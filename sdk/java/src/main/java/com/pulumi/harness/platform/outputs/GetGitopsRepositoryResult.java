// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetGitopsRepositoryRepo;
import com.pulumi.harness.platform.outputs.GetGitopsRepositoryUpdateMask;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGitopsRepositoryResult {
    /**
     * @return Account identifier of the GitOps repository.
     * 
     */
    private String accountId;
    /**
     * @return Agent identifier of the GitOps repository.
     * 
     */
    private String agentId;
    /**
     * @return Indicates if to operate on credential set instead of repository.
     * 
     */
    private @Nullable Boolean credsOnly;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Identifier of the GitOps repository.
     * 
     */
    private String identifier;
    /**
     * @return Organization identifier of the GitOps repository.
     * 
     */
    private @Nullable String orgId;
    /**
     * @return Project identifier of the GitOps repository.
     * 
     */
    private @Nullable String projectId;
    /**
     * @return Indicates to force refresh query for repository.
     * 
     */
    private @Nullable Boolean queryForceRefresh;
    /**
     * @return Project to query for the GitOps repo.
     * 
     */
    private @Nullable String queryProject;
    /**
     * @return GitOps repository to query.
     * 
     */
    private @Nullable String queryRepo;
    /**
     * @return Repo details holding application configurations.
     * 
     */
    private List<GetGitopsRepositoryRepo> repos;
    /**
     * @return Update mask of the repository.
     * 
     */
    private @Nullable List<GetGitopsRepositoryUpdateMask> updateMasks;
    /**
     * @return Indicates if the GitOps repository should be updated if existing and inserted if not.
     * 
     */
    private @Nullable Boolean upsert;

    private GetGitopsRepositoryResult() {}
    /**
     * @return Account identifier of the GitOps repository.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Agent identifier of the GitOps repository.
     * 
     */
    public String agentId() {
        return this.agentId;
    }
    /**
     * @return Indicates if to operate on credential set instead of repository.
     * 
     */
    public Optional<Boolean> credsOnly() {
        return Optional.ofNullable(this.credsOnly);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Identifier of the GitOps repository.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    /**
     * @return Organization identifier of the GitOps repository.
     * 
     */
    public Optional<String> orgId() {
        return Optional.ofNullable(this.orgId);
    }
    /**
     * @return Project identifier of the GitOps repository.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return Indicates to force refresh query for repository.
     * 
     */
    public Optional<Boolean> queryForceRefresh() {
        return Optional.ofNullable(this.queryForceRefresh);
    }
    /**
     * @return Project to query for the GitOps repo.
     * 
     */
    public Optional<String> queryProject() {
        return Optional.ofNullable(this.queryProject);
    }
    /**
     * @return GitOps repository to query.
     * 
     */
    public Optional<String> queryRepo() {
        return Optional.ofNullable(this.queryRepo);
    }
    /**
     * @return Repo details holding application configurations.
     * 
     */
    public List<GetGitopsRepositoryRepo> repos() {
        return this.repos;
    }
    /**
     * @return Update mask of the repository.
     * 
     */
    public List<GetGitopsRepositoryUpdateMask> updateMasks() {
        return this.updateMasks == null ? List.of() : this.updateMasks;
    }
    /**
     * @return Indicates if the GitOps repository should be updated if existing and inserted if not.
     * 
     */
    public Optional<Boolean> upsert() {
        return Optional.ofNullable(this.upsert);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGitopsRepositoryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String agentId;
        private @Nullable Boolean credsOnly;
        private String id;
        private String identifier;
        private @Nullable String orgId;
        private @Nullable String projectId;
        private @Nullable Boolean queryForceRefresh;
        private @Nullable String queryProject;
        private @Nullable String queryRepo;
        private List<GetGitopsRepositoryRepo> repos;
        private @Nullable List<GetGitopsRepositoryUpdateMask> updateMasks;
        private @Nullable Boolean upsert;
        public Builder() {}
        public Builder(GetGitopsRepositoryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.agentId = defaults.agentId;
    	      this.credsOnly = defaults.credsOnly;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.queryForceRefresh = defaults.queryForceRefresh;
    	      this.queryProject = defaults.queryProject;
    	      this.queryRepo = defaults.queryRepo;
    	      this.repos = defaults.repos;
    	      this.updateMasks = defaults.updateMasks;
    	      this.upsert = defaults.upsert;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder agentId(String agentId) {
            if (agentId == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryResult", "agentId");
            }
            this.agentId = agentId;
            return this;
        }
        @CustomType.Setter
        public Builder credsOnly(@Nullable Boolean credsOnly) {

            this.credsOnly = credsOnly;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryResult", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(@Nullable String orgId) {

            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder queryForceRefresh(@Nullable Boolean queryForceRefresh) {

            this.queryForceRefresh = queryForceRefresh;
            return this;
        }
        @CustomType.Setter
        public Builder queryProject(@Nullable String queryProject) {

            this.queryProject = queryProject;
            return this;
        }
        @CustomType.Setter
        public Builder queryRepo(@Nullable String queryRepo) {

            this.queryRepo = queryRepo;
            return this;
        }
        @CustomType.Setter
        public Builder repos(List<GetGitopsRepositoryRepo> repos) {
            if (repos == null) {
              throw new MissingRequiredPropertyException("GetGitopsRepositoryResult", "repos");
            }
            this.repos = repos;
            return this;
        }
        public Builder repos(GetGitopsRepositoryRepo... repos) {
            return repos(List.of(repos));
        }
        @CustomType.Setter
        public Builder updateMasks(@Nullable List<GetGitopsRepositoryUpdateMask> updateMasks) {

            this.updateMasks = updateMasks;
            return this;
        }
        public Builder updateMasks(GetGitopsRepositoryUpdateMask... updateMasks) {
            return updateMasks(List.of(updateMasks));
        }
        @CustomType.Setter
        public Builder upsert(@Nullable Boolean upsert) {

            this.upsert = upsert;
            return this;
        }
        public GetGitopsRepositoryResult build() {
            final var _resultValue = new GetGitopsRepositoryResult();
            _resultValue.accountId = accountId;
            _resultValue.agentId = agentId;
            _resultValue.credsOnly = credsOnly;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.orgId = orgId;
            _resultValue.projectId = projectId;
            _resultValue.queryForceRefresh = queryForceRefresh;
            _resultValue.queryProject = queryProject;
            _resultValue.queryRepo = queryRepo;
            _resultValue.repos = repos;
            _resultValue.updateMasks = updateMasks;
            _resultValue.upsert = upsert;
            return _resultValue;
        }
    }
}
