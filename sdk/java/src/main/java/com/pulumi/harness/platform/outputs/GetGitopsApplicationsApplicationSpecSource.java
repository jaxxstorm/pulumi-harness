// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.harness.platform.outputs.GetGitopsApplicationsApplicationSpecSourceDirectory;
import com.pulumi.harness.platform.outputs.GetGitopsApplicationsApplicationSpecSourceHelm;
import com.pulumi.harness.platform.outputs.GetGitopsApplicationsApplicationSpecSourceKsonnet;
import com.pulumi.harness.platform.outputs.GetGitopsApplicationsApplicationSpecSourceKustomize;
import com.pulumi.harness.platform.outputs.GetGitopsApplicationsApplicationSpecSourcePlugin;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGitopsApplicationsApplicationSpecSource {
    /**
     * @return Helm chart name, and must be specified for the GitOps applications sourced from a helm repo.
     * 
     */
    private @Nullable String chart;
    /**
     * @return Options for applications of type plain YAML or Jsonnet.
     * 
     */
    private @Nullable List<GetGitopsApplicationsApplicationSpecSourceDirectory> directories;
    /**
     * @return Holds helm specific options.
     * 
     */
    private @Nullable List<GetGitopsApplicationsApplicationSpecSourceHelm> helms;
    /**
     * @return Ksonnet specific options.
     * 
     */
    private @Nullable List<GetGitopsApplicationsApplicationSpecSourceKsonnet> ksonnets;
    /**
     * @return Options specific to a GitOps application source specific to Kustomize.
     * 
     */
    private @Nullable List<GetGitopsApplicationsApplicationSpecSourceKustomize> kustomizes;
    /**
     * @return Directory path within the git repository, and is only valid for the GitOps applications sourced from git.
     * 
     */
    private @Nullable String path;
    /**
     * @return Options specific to config management plugins.
     * 
     */
    private @Nullable List<GetGitopsApplicationsApplicationSpecSourcePlugin> plugins;
    /**
     * @return URL to the repository (git or helm) that contains the GitOps application manifests.
     * 
     */
    private @Nullable String repoUrl;
    /**
     * @return Revision of the source to sync the GitOps application to. In case of git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag of the chart&#39;s version.
     * 
     */
    private @Nullable String targetRevision;

    private GetGitopsApplicationsApplicationSpecSource() {}
    /**
     * @return Helm chart name, and must be specified for the GitOps applications sourced from a helm repo.
     * 
     */
    public Optional<String> chart() {
        return Optional.ofNullable(this.chart);
    }
    /**
     * @return Options for applications of type plain YAML or Jsonnet.
     * 
     */
    public List<GetGitopsApplicationsApplicationSpecSourceDirectory> directories() {
        return this.directories == null ? List.of() : this.directories;
    }
    /**
     * @return Holds helm specific options.
     * 
     */
    public List<GetGitopsApplicationsApplicationSpecSourceHelm> helms() {
        return this.helms == null ? List.of() : this.helms;
    }
    /**
     * @return Ksonnet specific options.
     * 
     */
    public List<GetGitopsApplicationsApplicationSpecSourceKsonnet> ksonnets() {
        return this.ksonnets == null ? List.of() : this.ksonnets;
    }
    /**
     * @return Options specific to a GitOps application source specific to Kustomize.
     * 
     */
    public List<GetGitopsApplicationsApplicationSpecSourceKustomize> kustomizes() {
        return this.kustomizes == null ? List.of() : this.kustomizes;
    }
    /**
     * @return Directory path within the git repository, and is only valid for the GitOps applications sourced from git.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return Options specific to config management plugins.
     * 
     */
    public List<GetGitopsApplicationsApplicationSpecSourcePlugin> plugins() {
        return this.plugins == null ? List.of() : this.plugins;
    }
    /**
     * @return URL to the repository (git or helm) that contains the GitOps application manifests.
     * 
     */
    public Optional<String> repoUrl() {
        return Optional.ofNullable(this.repoUrl);
    }
    /**
     * @return Revision of the source to sync the GitOps application to. In case of git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag of the chart&#39;s version.
     * 
     */
    public Optional<String> targetRevision() {
        return Optional.ofNullable(this.targetRevision);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGitopsApplicationsApplicationSpecSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String chart;
        private @Nullable List<GetGitopsApplicationsApplicationSpecSourceDirectory> directories;
        private @Nullable List<GetGitopsApplicationsApplicationSpecSourceHelm> helms;
        private @Nullable List<GetGitopsApplicationsApplicationSpecSourceKsonnet> ksonnets;
        private @Nullable List<GetGitopsApplicationsApplicationSpecSourceKustomize> kustomizes;
        private @Nullable String path;
        private @Nullable List<GetGitopsApplicationsApplicationSpecSourcePlugin> plugins;
        private @Nullable String repoUrl;
        private @Nullable String targetRevision;
        public Builder() {}
        public Builder(GetGitopsApplicationsApplicationSpecSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chart = defaults.chart;
    	      this.directories = defaults.directories;
    	      this.helms = defaults.helms;
    	      this.ksonnets = defaults.ksonnets;
    	      this.kustomizes = defaults.kustomizes;
    	      this.path = defaults.path;
    	      this.plugins = defaults.plugins;
    	      this.repoUrl = defaults.repoUrl;
    	      this.targetRevision = defaults.targetRevision;
        }

        @CustomType.Setter
        public Builder chart(@Nullable String chart) {

            this.chart = chart;
            return this;
        }
        @CustomType.Setter
        public Builder directories(@Nullable List<GetGitopsApplicationsApplicationSpecSourceDirectory> directories) {

            this.directories = directories;
            return this;
        }
        public Builder directories(GetGitopsApplicationsApplicationSpecSourceDirectory... directories) {
            return directories(List.of(directories));
        }
        @CustomType.Setter
        public Builder helms(@Nullable List<GetGitopsApplicationsApplicationSpecSourceHelm> helms) {

            this.helms = helms;
            return this;
        }
        public Builder helms(GetGitopsApplicationsApplicationSpecSourceHelm... helms) {
            return helms(List.of(helms));
        }
        @CustomType.Setter
        public Builder ksonnets(@Nullable List<GetGitopsApplicationsApplicationSpecSourceKsonnet> ksonnets) {

            this.ksonnets = ksonnets;
            return this;
        }
        public Builder ksonnets(GetGitopsApplicationsApplicationSpecSourceKsonnet... ksonnets) {
            return ksonnets(List.of(ksonnets));
        }
        @CustomType.Setter
        public Builder kustomizes(@Nullable List<GetGitopsApplicationsApplicationSpecSourceKustomize> kustomizes) {

            this.kustomizes = kustomizes;
            return this;
        }
        public Builder kustomizes(GetGitopsApplicationsApplicationSpecSourceKustomize... kustomizes) {
            return kustomizes(List.of(kustomizes));
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder plugins(@Nullable List<GetGitopsApplicationsApplicationSpecSourcePlugin> plugins) {

            this.plugins = plugins;
            return this;
        }
        public Builder plugins(GetGitopsApplicationsApplicationSpecSourcePlugin... plugins) {
            return plugins(List.of(plugins));
        }
        @CustomType.Setter
        public Builder repoUrl(@Nullable String repoUrl) {

            this.repoUrl = repoUrl;
            return this;
        }
        @CustomType.Setter
        public Builder targetRevision(@Nullable String targetRevision) {

            this.targetRevision = targetRevision;
            return this;
        }
        public GetGitopsApplicationsApplicationSpecSource build() {
            final var _resultValue = new GetGitopsApplicationsApplicationSpecSource();
            _resultValue.chart = chart;
            _resultValue.directories = directories;
            _resultValue.helms = helms;
            _resultValue.ksonnets = ksonnets;
            _resultValue.kustomizes = kustomizes;
            _resultValue.path = path;
            _resultValue.plugins = plugins;
            _resultValue.repoUrl = repoUrl;
            _resultValue.targetRevision = targetRevision;
            return _resultValue;
        }
    }
}
