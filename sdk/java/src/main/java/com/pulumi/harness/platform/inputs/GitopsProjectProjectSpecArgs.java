// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GitopsProjectProjectSpecClusterResourceWhitelistArgs;
import com.pulumi.harness.platform.inputs.GitopsProjectProjectSpecDestinationArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsProjectProjectSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsProjectProjectSpecArgs Empty = new GitopsProjectProjectSpecArgs();

    /**
     * ClusterResourceWhitelist contains list of whitelisted cluster level resources.
     * 
     */
    @Import(name="clusterResourceWhitelists")
    private @Nullable Output<List<GitopsProjectProjectSpecClusterResourceWhitelistArgs>> clusterResourceWhitelists;

    /**
     * @return ClusterResourceWhitelist contains list of whitelisted cluster level resources.
     * 
     */
    public Optional<Output<List<GitopsProjectProjectSpecClusterResourceWhitelistArgs>>> clusterResourceWhitelists() {
        return Optional.ofNullable(this.clusterResourceWhitelists);
    }

    /**
     * Destinations contains list of destinations available for deployment.
     * 
     */
    @Import(name="destinations")
    private @Nullable Output<List<GitopsProjectProjectSpecDestinationArgs>> destinations;

    /**
     * @return Destinations contains list of destinations available for deployment.
     * 
     */
    public Optional<Output<List<GitopsProjectProjectSpecDestinationArgs>>> destinations() {
        return Optional.ofNullable(this.destinations);
    }

    /**
     * SourceRepos contains list of repository URLs which can be used for deployment.
     * 
     */
    @Import(name="sourceRepos")
    private @Nullable Output<List<String>> sourceRepos;

    /**
     * @return SourceRepos contains list of repository URLs which can be used for deployment.
     * 
     */
    public Optional<Output<List<String>>> sourceRepos() {
        return Optional.ofNullable(this.sourceRepos);
    }

    private GitopsProjectProjectSpecArgs() {}

    private GitopsProjectProjectSpecArgs(GitopsProjectProjectSpecArgs $) {
        this.clusterResourceWhitelists = $.clusterResourceWhitelists;
        this.destinations = $.destinations;
        this.sourceRepos = $.sourceRepos;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsProjectProjectSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsProjectProjectSpecArgs $;

        public Builder() {
            $ = new GitopsProjectProjectSpecArgs();
        }

        public Builder(GitopsProjectProjectSpecArgs defaults) {
            $ = new GitopsProjectProjectSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterResourceWhitelists ClusterResourceWhitelist contains list of whitelisted cluster level resources.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceWhitelists(@Nullable Output<List<GitopsProjectProjectSpecClusterResourceWhitelistArgs>> clusterResourceWhitelists) {
            $.clusterResourceWhitelists = clusterResourceWhitelists;
            return this;
        }

        /**
         * @param clusterResourceWhitelists ClusterResourceWhitelist contains list of whitelisted cluster level resources.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceWhitelists(List<GitopsProjectProjectSpecClusterResourceWhitelistArgs> clusterResourceWhitelists) {
            return clusterResourceWhitelists(Output.of(clusterResourceWhitelists));
        }

        /**
         * @param clusterResourceWhitelists ClusterResourceWhitelist contains list of whitelisted cluster level resources.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceWhitelists(GitopsProjectProjectSpecClusterResourceWhitelistArgs... clusterResourceWhitelists) {
            return clusterResourceWhitelists(List.of(clusterResourceWhitelists));
        }

        /**
         * @param destinations Destinations contains list of destinations available for deployment.
         * 
         * @return builder
         * 
         */
        public Builder destinations(@Nullable Output<List<GitopsProjectProjectSpecDestinationArgs>> destinations) {
            $.destinations = destinations;
            return this;
        }

        /**
         * @param destinations Destinations contains list of destinations available for deployment.
         * 
         * @return builder
         * 
         */
        public Builder destinations(List<GitopsProjectProjectSpecDestinationArgs> destinations) {
            return destinations(Output.of(destinations));
        }

        /**
         * @param destinations Destinations contains list of destinations available for deployment.
         * 
         * @return builder
         * 
         */
        public Builder destinations(GitopsProjectProjectSpecDestinationArgs... destinations) {
            return destinations(List.of(destinations));
        }

        /**
         * @param sourceRepos SourceRepos contains list of repository URLs which can be used for deployment.
         * 
         * @return builder
         * 
         */
        public Builder sourceRepos(@Nullable Output<List<String>> sourceRepos) {
            $.sourceRepos = sourceRepos;
            return this;
        }

        /**
         * @param sourceRepos SourceRepos contains list of repository URLs which can be used for deployment.
         * 
         * @return builder
         * 
         */
        public Builder sourceRepos(List<String> sourceRepos) {
            return sourceRepos(Output.of(sourceRepos));
        }

        /**
         * @param sourceRepos SourceRepos contains list of repository URLs which can be used for deployment.
         * 
         * @return builder
         * 
         */
        public Builder sourceRepos(String... sourceRepos) {
            return sourceRepos(List.of(sourceRepos));
        }

        public GitopsProjectProjectSpecArgs build() {
            return $;
        }
    }

}
