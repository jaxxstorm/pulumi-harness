// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GitopsProjectProjectMetadataArgs;
import com.pulumi.harness.platform.inputs.GitopsProjectProjectSpecArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsProjectProjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsProjectProjectArgs Empty = new GitopsProjectProjectArgs();

    /**
     * Metadata details that all persisted resources must have.
     * 
     */
    @Import(name="metadatas")
    private @Nullable Output<List<GitopsProjectProjectMetadataArgs>> metadatas;

    /**
     * @return Metadata details that all persisted resources must have.
     * 
     */
    public Optional<Output<List<GitopsProjectProjectMetadataArgs>>> metadatas() {
        return Optional.ofNullable(this.metadatas);
    }

    /**
     * Spec is the specification of an AppProject.
     * 
     */
    @Import(name="specs")
    private @Nullable Output<List<GitopsProjectProjectSpecArgs>> specs;

    /**
     * @return Spec is the specification of an AppProject.
     * 
     */
    public Optional<Output<List<GitopsProjectProjectSpecArgs>>> specs() {
        return Optional.ofNullable(this.specs);
    }

    private GitopsProjectProjectArgs() {}

    private GitopsProjectProjectArgs(GitopsProjectProjectArgs $) {
        this.metadatas = $.metadatas;
        this.specs = $.specs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsProjectProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsProjectProjectArgs $;

        public Builder() {
            $ = new GitopsProjectProjectArgs();
        }

        public Builder(GitopsProjectProjectArgs defaults) {
            $ = new GitopsProjectProjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param metadatas Metadata details that all persisted resources must have.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(@Nullable Output<List<GitopsProjectProjectMetadataArgs>> metadatas) {
            $.metadatas = metadatas;
            return this;
        }

        /**
         * @param metadatas Metadata details that all persisted resources must have.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(List<GitopsProjectProjectMetadataArgs> metadatas) {
            return metadatas(Output.of(metadatas));
        }

        /**
         * @param metadatas Metadata details that all persisted resources must have.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(GitopsProjectProjectMetadataArgs... metadatas) {
            return metadatas(List.of(metadatas));
        }

        /**
         * @param specs Spec is the specification of an AppProject.
         * 
         * @return builder
         * 
         */
        public Builder specs(@Nullable Output<List<GitopsProjectProjectSpecArgs>> specs) {
            $.specs = specs;
            return this;
        }

        /**
         * @param specs Spec is the specification of an AppProject.
         * 
         * @return builder
         * 
         */
        public Builder specs(List<GitopsProjectProjectSpecArgs> specs) {
            return specs(Output.of(specs));
        }

        /**
         * @param specs Spec is the specification of an AppProject.
         * 
         * @return builder
         * 
         */
        public Builder specs(GitopsProjectProjectSpecArgs... specs) {
            return specs(List.of(specs));
        }

        public GitopsProjectProjectArgs build() {
            return $;
        }
    }

}
