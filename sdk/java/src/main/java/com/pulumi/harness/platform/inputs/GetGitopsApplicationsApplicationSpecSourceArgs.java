// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GetGitopsApplicationsApplicationSpecSourceDirectoryArgs;
import com.pulumi.harness.platform.inputs.GetGitopsApplicationsApplicationSpecSourceHelmArgs;
import com.pulumi.harness.platform.inputs.GetGitopsApplicationsApplicationSpecSourceKsonnetArgs;
import com.pulumi.harness.platform.inputs.GetGitopsApplicationsApplicationSpecSourceKustomizeArgs;
import com.pulumi.harness.platform.inputs.GetGitopsApplicationsApplicationSpecSourcePluginArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGitopsApplicationsApplicationSpecSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetGitopsApplicationsApplicationSpecSourceArgs Empty = new GetGitopsApplicationsApplicationSpecSourceArgs();

    /**
     * Helm chart name, and must be specified for the GitOps applications sourced from a helm repo.
     * 
     */
    @Import(name="chart")
    private @Nullable Output<String> chart;

    /**
     * @return Helm chart name, and must be specified for the GitOps applications sourced from a helm repo.
     * 
     */
    public Optional<Output<String>> chart() {
        return Optional.ofNullable(this.chart);
    }

    /**
     * Options for applications of type plain YAML or Jsonnet.
     * 
     */
    @Import(name="directories")
    private @Nullable Output<List<GetGitopsApplicationsApplicationSpecSourceDirectoryArgs>> directories;

    /**
     * @return Options for applications of type plain YAML or Jsonnet.
     * 
     */
    public Optional<Output<List<GetGitopsApplicationsApplicationSpecSourceDirectoryArgs>>> directories() {
        return Optional.ofNullable(this.directories);
    }

    /**
     * Holds helm specific options.
     * 
     */
    @Import(name="helms")
    private @Nullable Output<List<GetGitopsApplicationsApplicationSpecSourceHelmArgs>> helms;

    /**
     * @return Holds helm specific options.
     * 
     */
    public Optional<Output<List<GetGitopsApplicationsApplicationSpecSourceHelmArgs>>> helms() {
        return Optional.ofNullable(this.helms);
    }

    /**
     * Ksonnet specific options.
     * 
     */
    @Import(name="ksonnets")
    private @Nullable Output<List<GetGitopsApplicationsApplicationSpecSourceKsonnetArgs>> ksonnets;

    /**
     * @return Ksonnet specific options.
     * 
     */
    public Optional<Output<List<GetGitopsApplicationsApplicationSpecSourceKsonnetArgs>>> ksonnets() {
        return Optional.ofNullable(this.ksonnets);
    }

    /**
     * Options specific to a GitOps application source specific to Kustomize.
     * 
     */
    @Import(name="kustomizes")
    private @Nullable Output<List<GetGitopsApplicationsApplicationSpecSourceKustomizeArgs>> kustomizes;

    /**
     * @return Options specific to a GitOps application source specific to Kustomize.
     * 
     */
    public Optional<Output<List<GetGitopsApplicationsApplicationSpecSourceKustomizeArgs>>> kustomizes() {
        return Optional.ofNullable(this.kustomizes);
    }

    /**
     * Directory path within the git repository, and is only valid for the GitOps applications sourced from git.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Directory path within the git repository, and is only valid for the GitOps applications sourced from git.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Options specific to config management plugins.
     * 
     */
    @Import(name="plugins")
    private @Nullable Output<List<GetGitopsApplicationsApplicationSpecSourcePluginArgs>> plugins;

    /**
     * @return Options specific to config management plugins.
     * 
     */
    public Optional<Output<List<GetGitopsApplicationsApplicationSpecSourcePluginArgs>>> plugins() {
        return Optional.ofNullable(this.plugins);
    }

    /**
     * URL to the repository (git or helm) that contains the GitOps application manifests.
     * 
     */
    @Import(name="repoUrl")
    private @Nullable Output<String> repoUrl;

    /**
     * @return URL to the repository (git or helm) that contains the GitOps application manifests.
     * 
     */
    public Optional<Output<String>> repoUrl() {
        return Optional.ofNullable(this.repoUrl);
    }

    /**
     * Revision of the source to sync the GitOps application to. In case of git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag of the chart&#39;s version.
     * 
     */
    @Import(name="targetRevision")
    private @Nullable Output<String> targetRevision;

    /**
     * @return Revision of the source to sync the GitOps application to. In case of git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag of the chart&#39;s version.
     * 
     */
    public Optional<Output<String>> targetRevision() {
        return Optional.ofNullable(this.targetRevision);
    }

    private GetGitopsApplicationsApplicationSpecSourceArgs() {}

    private GetGitopsApplicationsApplicationSpecSourceArgs(GetGitopsApplicationsApplicationSpecSourceArgs $) {
        this.chart = $.chart;
        this.directories = $.directories;
        this.helms = $.helms;
        this.ksonnets = $.ksonnets;
        this.kustomizes = $.kustomizes;
        this.path = $.path;
        this.plugins = $.plugins;
        this.repoUrl = $.repoUrl;
        this.targetRevision = $.targetRevision;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGitopsApplicationsApplicationSpecSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGitopsApplicationsApplicationSpecSourceArgs $;

        public Builder() {
            $ = new GetGitopsApplicationsApplicationSpecSourceArgs();
        }

        public Builder(GetGitopsApplicationsApplicationSpecSourceArgs defaults) {
            $ = new GetGitopsApplicationsApplicationSpecSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param chart Helm chart name, and must be specified for the GitOps applications sourced from a helm repo.
         * 
         * @return builder
         * 
         */
        public Builder chart(@Nullable Output<String> chart) {
            $.chart = chart;
            return this;
        }

        /**
         * @param chart Helm chart name, and must be specified for the GitOps applications sourced from a helm repo.
         * 
         * @return builder
         * 
         */
        public Builder chart(String chart) {
            return chart(Output.of(chart));
        }

        /**
         * @param directories Options for applications of type plain YAML or Jsonnet.
         * 
         * @return builder
         * 
         */
        public Builder directories(@Nullable Output<List<GetGitopsApplicationsApplicationSpecSourceDirectoryArgs>> directories) {
            $.directories = directories;
            return this;
        }

        /**
         * @param directories Options for applications of type plain YAML or Jsonnet.
         * 
         * @return builder
         * 
         */
        public Builder directories(List<GetGitopsApplicationsApplicationSpecSourceDirectoryArgs> directories) {
            return directories(Output.of(directories));
        }

        /**
         * @param directories Options for applications of type plain YAML or Jsonnet.
         * 
         * @return builder
         * 
         */
        public Builder directories(GetGitopsApplicationsApplicationSpecSourceDirectoryArgs... directories) {
            return directories(List.of(directories));
        }

        /**
         * @param helms Holds helm specific options.
         * 
         * @return builder
         * 
         */
        public Builder helms(@Nullable Output<List<GetGitopsApplicationsApplicationSpecSourceHelmArgs>> helms) {
            $.helms = helms;
            return this;
        }

        /**
         * @param helms Holds helm specific options.
         * 
         * @return builder
         * 
         */
        public Builder helms(List<GetGitopsApplicationsApplicationSpecSourceHelmArgs> helms) {
            return helms(Output.of(helms));
        }

        /**
         * @param helms Holds helm specific options.
         * 
         * @return builder
         * 
         */
        public Builder helms(GetGitopsApplicationsApplicationSpecSourceHelmArgs... helms) {
            return helms(List.of(helms));
        }

        /**
         * @param ksonnets Ksonnet specific options.
         * 
         * @return builder
         * 
         */
        public Builder ksonnets(@Nullable Output<List<GetGitopsApplicationsApplicationSpecSourceKsonnetArgs>> ksonnets) {
            $.ksonnets = ksonnets;
            return this;
        }

        /**
         * @param ksonnets Ksonnet specific options.
         * 
         * @return builder
         * 
         */
        public Builder ksonnets(List<GetGitopsApplicationsApplicationSpecSourceKsonnetArgs> ksonnets) {
            return ksonnets(Output.of(ksonnets));
        }

        /**
         * @param ksonnets Ksonnet specific options.
         * 
         * @return builder
         * 
         */
        public Builder ksonnets(GetGitopsApplicationsApplicationSpecSourceKsonnetArgs... ksonnets) {
            return ksonnets(List.of(ksonnets));
        }

        /**
         * @param kustomizes Options specific to a GitOps application source specific to Kustomize.
         * 
         * @return builder
         * 
         */
        public Builder kustomizes(@Nullable Output<List<GetGitopsApplicationsApplicationSpecSourceKustomizeArgs>> kustomizes) {
            $.kustomizes = kustomizes;
            return this;
        }

        /**
         * @param kustomizes Options specific to a GitOps application source specific to Kustomize.
         * 
         * @return builder
         * 
         */
        public Builder kustomizes(List<GetGitopsApplicationsApplicationSpecSourceKustomizeArgs> kustomizes) {
            return kustomizes(Output.of(kustomizes));
        }

        /**
         * @param kustomizes Options specific to a GitOps application source specific to Kustomize.
         * 
         * @return builder
         * 
         */
        public Builder kustomizes(GetGitopsApplicationsApplicationSpecSourceKustomizeArgs... kustomizes) {
            return kustomizes(List.of(kustomizes));
        }

        /**
         * @param path Directory path within the git repository, and is only valid for the GitOps applications sourced from git.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Directory path within the git repository, and is only valid for the GitOps applications sourced from git.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param plugins Options specific to config management plugins.
         * 
         * @return builder
         * 
         */
        public Builder plugins(@Nullable Output<List<GetGitopsApplicationsApplicationSpecSourcePluginArgs>> plugins) {
            $.plugins = plugins;
            return this;
        }

        /**
         * @param plugins Options specific to config management plugins.
         * 
         * @return builder
         * 
         */
        public Builder plugins(List<GetGitopsApplicationsApplicationSpecSourcePluginArgs> plugins) {
            return plugins(Output.of(plugins));
        }

        /**
         * @param plugins Options specific to config management plugins.
         * 
         * @return builder
         * 
         */
        public Builder plugins(GetGitopsApplicationsApplicationSpecSourcePluginArgs... plugins) {
            return plugins(List.of(plugins));
        }

        /**
         * @param repoUrl URL to the repository (git or helm) that contains the GitOps application manifests.
         * 
         * @return builder
         * 
         */
        public Builder repoUrl(@Nullable Output<String> repoUrl) {
            $.repoUrl = repoUrl;
            return this;
        }

        /**
         * @param repoUrl URL to the repository (git or helm) that contains the GitOps application manifests.
         * 
         * @return builder
         * 
         */
        public Builder repoUrl(String repoUrl) {
            return repoUrl(Output.of(repoUrl));
        }

        /**
         * @param targetRevision Revision of the source to sync the GitOps application to. In case of git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag of the chart&#39;s version.
         * 
         * @return builder
         * 
         */
        public Builder targetRevision(@Nullable Output<String> targetRevision) {
            $.targetRevision = targetRevision;
            return this;
        }

        /**
         * @param targetRevision Revision of the source to sync the GitOps application to. In case of git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag of the chart&#39;s version.
         * 
         * @return builder
         * 
         */
        public Builder targetRevision(String targetRevision) {
            return targetRevision(Output.of(targetRevision));
        }

        public GetGitopsApplicationsApplicationSpecSourceArgs build() {
            return $;
        }
    }

}
