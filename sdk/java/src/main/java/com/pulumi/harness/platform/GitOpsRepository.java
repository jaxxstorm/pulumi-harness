// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.GitOpsRepositoryArgs;
import com.pulumi.harness.platform.inputs.GitOpsRepositoryState;
import com.pulumi.harness.platform.outputs.GitOpsRepositoryRepo;
import com.pulumi.harness.platform.outputs.GitOpsRepositoryUpdateMask;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for creating Harness Gitops Repositories.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.platform.GitOpsRepository;
 * import com.pulumi.harness.platform.GitOpsRepositoryArgs;
 * import com.pulumi.harness.platform.inputs.GitOpsRepositoryRepoArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new GitOpsRepository("example", GitOpsRepositoryArgs.builder()
 *             .identifier("identifier")
 *             .accountId("account_id")
 *             .projectId("project_id")
 *             .orgId("org_id")
 *             .agentId("agent_id")
 *             .repos(GitOpsRepositoryRepoArgs.builder()
 *                 .repo("https://github.com/willycoll/argocd-example-apps.git")
 *                 .name("repo_name")
 *                 .insecure(true)
 *                 .connectionType("HTTPS_ANONYMOUS")
 *                 .build())
 *             .upsert(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Import a Account level Gitops Repository
 * 
 * ```sh
 * $ pulumi import harness:platform/gitOpsRepository:GitOpsRepository example &lt;agent_id&gt;/&lt;respository_id&gt;
 * ```
 * 
 * Import a Project level Gitops Repository
 * 
 * ```sh
 * $ pulumi import harness:platform/gitOpsRepository:GitOpsRepository example &lt;organization_id&gt;/&lt;project_id&gt;/&lt;agent_id&gt;/&lt;respository_id&gt;
 * ```
 * 
 */
@ResourceType(type="harness:platform/gitOpsRepository:GitOpsRepository")
public class GitOpsRepository extends com.pulumi.resources.CustomResource {
    /**
     * Account identifier of the GitOps repository.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return Account identifier of the GitOps repository.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * Agent identifier of the GitOps repository.
     * 
     */
    @Export(name="agentId", refs={String.class}, tree="[0]")
    private Output<String> agentId;

    /**
     * @return Agent identifier of the GitOps repository.
     * 
     */
    public Output<String> agentId() {
        return this.agentId;
    }
    /**
     * Indicates if to operate on credential set instead of repository.
     * 
     */
    @Export(name="credsOnly", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> credsOnly;

    /**
     * @return Indicates if to operate on credential set instead of repository.
     * 
     */
    public Output<Optional<Boolean>> credsOnly() {
        return Codegen.optional(this.credsOnly);
    }
    /**
     * Identifier of the GitOps repository.
     * 
     */
    @Export(name="identifier", refs={String.class}, tree="[0]")
    private Output<String> identifier;

    /**
     * @return Identifier of the GitOps repository.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * Organization identifier of the GitOps repository.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> orgId;

    /**
     * @return Organization identifier of the GitOps repository.
     * 
     */
    public Output<Optional<String>> orgId() {
        return Codegen.optional(this.orgId);
    }
    /**
     * Project identifier of the GitOps repository.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return Project identifier of the GitOps repository.
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    /**
     * Indicates to force refresh query for repository.
     * 
     */
    @Export(name="queryForceRefresh", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> queryForceRefresh;

    /**
     * @return Indicates to force refresh query for repository.
     * 
     */
    public Output<Optional<Boolean>> queryForceRefresh() {
        return Codegen.optional(this.queryForceRefresh);
    }
    /**
     * Project to query for the GitOps repo.
     * 
     */
    @Export(name="queryProject", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> queryProject;

    /**
     * @return Project to query for the GitOps repo.
     * 
     */
    public Output<Optional<String>> queryProject() {
        return Codegen.optional(this.queryProject);
    }
    /**
     * GitOps repository to query.
     * 
     */
    @Export(name="queryRepo", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> queryRepo;

    /**
     * @return GitOps repository to query.
     * 
     */
    public Output<Optional<String>> queryRepo() {
        return Codegen.optional(this.queryRepo);
    }
    /**
     * Repo details holding application configurations.
     * 
     */
    @Export(name="repos", refs={List.class,GitOpsRepositoryRepo.class}, tree="[0,1]")
    private Output<List<GitOpsRepositoryRepo>> repos;

    /**
     * @return Repo details holding application configurations.
     * 
     */
    public Output<List<GitOpsRepositoryRepo>> repos() {
        return this.repos;
    }
    /**
     * Update mask of the repository.
     * 
     */
    @Export(name="updateMasks", refs={List.class,GitOpsRepositoryUpdateMask.class}, tree="[0,1]")
    private Output</* @Nullable */ List<GitOpsRepositoryUpdateMask>> updateMasks;

    /**
     * @return Update mask of the repository.
     * 
     */
    public Output<Optional<List<GitOpsRepositoryUpdateMask>>> updateMasks() {
        return Codegen.optional(this.updateMasks);
    }
    /**
     * Indicates if the GitOps repository should be updated if existing and inserted if not.
     * 
     */
    @Export(name="upsert", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> upsert;

    /**
     * @return Indicates if the GitOps repository should be updated if existing and inserted if not.
     * 
     */
    public Output<Optional<Boolean>> upsert() {
        return Codegen.optional(this.upsert);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GitOpsRepository(String name) {
        this(name, GitOpsRepositoryArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GitOpsRepository(String name, GitOpsRepositoryArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GitOpsRepository(String name, GitOpsRepositoryArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/gitOpsRepository:GitOpsRepository", name, args == null ? GitOpsRepositoryArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private GitOpsRepository(String name, Output<String> id, @Nullable GitOpsRepositoryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/gitOpsRepository:GitOpsRepository", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GitOpsRepository get(String name, Output<String> id, @Nullable GitOpsRepositoryState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GitOpsRepository(name, id, state, options);
    }
}
