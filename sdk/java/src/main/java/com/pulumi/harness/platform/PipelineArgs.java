// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.PipelineGitDetailsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineArgs Empty = new PipelineArgs();

    /**
     * Description of the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Contains parameters related to creating an Entity for Git Experience.
     * 
     */
    @Import(name="gitDetails")
    private @Nullable Output<PipelineGitDetailsArgs> gitDetails;

    /**
     * @return Contains parameters related to creating an Entity for Git Experience.
     * 
     */
    public Optional<Output<PipelineGitDetailsArgs>> gitDetails() {
        return Optional.ofNullable(this.gitDetails);
    }

    /**
     * Unique identifier of the resource.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Tags to associate with the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to associate with the resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * If true, returns Pipeline YAML with Templates applied on it.
     * 
     */
    @Import(name="templateApplied")
    private @Nullable Output<Boolean> templateApplied;

    /**
     * @return If true, returns Pipeline YAML with Templates applied on it.
     * 
     */
    public Optional<Output<Boolean>> templateApplied() {
        return Optional.ofNullable(this.templateApplied);
    }

    /**
     * Pipeline YAML after resolving Templates (returned as a String).
     * 
     */
    @Import(name="templateAppliedPipelineYaml")
    private @Nullable Output<String> templateAppliedPipelineYaml;

    /**
     * @return Pipeline YAML after resolving Templates (returned as a String).
     * 
     */
    public Optional<Output<String>> templateAppliedPipelineYaml() {
        return Optional.ofNullable(this.templateAppliedPipelineYaml);
    }

    /**
     * YAML of the pipeline. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
     * 
     */
    @Import(name="yaml", required=true)
    private Output<String> yaml;

    /**
     * @return YAML of the pipeline. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
     * 
     */
    public Output<String> yaml() {
        return this.yaml;
    }

    private PipelineArgs() {}

    private PipelineArgs(PipelineArgs $) {
        this.description = $.description;
        this.gitDetails = $.gitDetails;
        this.identifier = $.identifier;
        this.name = $.name;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.tags = $.tags;
        this.templateApplied = $.templateApplied;
        this.templateAppliedPipelineYaml = $.templateAppliedPipelineYaml;
        this.yaml = $.yaml;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineArgs $;

        public Builder() {
            $ = new PipelineArgs();
        }

        public Builder(PipelineArgs defaults) {
            $ = new PipelineArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param gitDetails Contains parameters related to creating an Entity for Git Experience.
         * 
         * @return builder
         * 
         */
        public Builder gitDetails(@Nullable Output<PipelineGitDetailsArgs> gitDetails) {
            $.gitDetails = gitDetails;
            return this;
        }

        /**
         * @param gitDetails Contains parameters related to creating an Entity for Git Experience.
         * 
         * @return builder
         * 
         */
        public Builder gitDetails(PipelineGitDetailsArgs gitDetails) {
            return gitDetails(Output.of(gitDetails));
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param templateApplied If true, returns Pipeline YAML with Templates applied on it.
         * 
         * @return builder
         * 
         */
        public Builder templateApplied(@Nullable Output<Boolean> templateApplied) {
            $.templateApplied = templateApplied;
            return this;
        }

        /**
         * @param templateApplied If true, returns Pipeline YAML with Templates applied on it.
         * 
         * @return builder
         * 
         */
        public Builder templateApplied(Boolean templateApplied) {
            return templateApplied(Output.of(templateApplied));
        }

        /**
         * @param templateAppliedPipelineYaml Pipeline YAML after resolving Templates (returned as a String).
         * 
         * @return builder
         * 
         */
        public Builder templateAppliedPipelineYaml(@Nullable Output<String> templateAppliedPipelineYaml) {
            $.templateAppliedPipelineYaml = templateAppliedPipelineYaml;
            return this;
        }

        /**
         * @param templateAppliedPipelineYaml Pipeline YAML after resolving Templates (returned as a String).
         * 
         * @return builder
         * 
         */
        public Builder templateAppliedPipelineYaml(String templateAppliedPipelineYaml) {
            return templateAppliedPipelineYaml(Output.of(templateAppliedPipelineYaml));
        }

        /**
         * @param yaml YAML of the pipeline. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
         * 
         * @return builder
         * 
         */
        public Builder yaml(Output<String> yaml) {
            $.yaml = yaml;
            return this;
        }

        /**
         * @param yaml YAML of the pipeline. In YAML, to reference an entity at the organization scope, prefix &#39;org&#39; to the expression: org.{identifier}. To reference an entity at the account scope, prefix &#39;account` to the expression: account.{identifier}. For eg, to reference a connector with identifier &#39;connectorId&#39; at the organization scope in a stage mention it as connectorRef: org.connectorId.
         * 
         * @return builder
         * 
         */
        public Builder yaml(String yaml) {
            return yaml(Output.of(yaml));
        }

        public PipelineArgs build() {
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("PipelineArgs", "identifier");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("PipelineArgs", "orgId");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("PipelineArgs", "projectId");
            }
            if ($.yaml == null) {
                throw new MissingRequiredPropertyException("PipelineArgs", "yaml");
            }
            return $;
        }
    }

}
