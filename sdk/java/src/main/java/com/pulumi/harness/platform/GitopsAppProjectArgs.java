// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GitopsAppProjectProjectArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitopsAppProjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitopsAppProjectArgs Empty = new GitopsAppProjectArgs();

    /**
     * Account identifier of the GitOps project.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Account identifier of the GitOps project.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Agent identifier of the GitOps project.
     * 
     */
    @Import(name="agentId", required=true)
    private Output<String> agentId;

    /**
     * @return Agent identifier of the GitOps project.
     * 
     */
    public Output<String> agentId() {
        return this.agentId;
    }

    /**
     * Org identifier of the GitOps project.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Org identifier of the GitOps project.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Project identifier of the GitOps repository.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Project identifier of the GitOps repository.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * GitOps project configuration.
     * 
     */
    @Import(name="projects", required=true)
    private Output<List<GitopsAppProjectProjectArgs>> projects;

    /**
     * @return GitOps project configuration.
     * 
     */
    public Output<List<GitopsAppProjectProjectArgs>> projects() {
        return this.projects;
    }

    /**
     * Identifier for the GitOps project.
     * 
     */
    @Import(name="queryName")
    private @Nullable Output<String> queryName;

    /**
     * @return Identifier for the GitOps project.
     * 
     */
    public Optional<Output<String>> queryName() {
        return Optional.ofNullable(this.queryName);
    }

    /**
     * Indicates if the GitOps repository should be updated if existing and inserted if not.
     * 
     */
    @Import(name="upsert")
    private @Nullable Output<Boolean> upsert;

    /**
     * @return Indicates if the GitOps repository should be updated if existing and inserted if not.
     * 
     */
    public Optional<Output<Boolean>> upsert() {
        return Optional.ofNullable(this.upsert);
    }

    private GitopsAppProjectArgs() {}

    private GitopsAppProjectArgs(GitopsAppProjectArgs $) {
        this.accountId = $.accountId;
        this.agentId = $.agentId;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.projects = $.projects;
        this.queryName = $.queryName;
        this.upsert = $.upsert;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitopsAppProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitopsAppProjectArgs $;

        public Builder() {
            $ = new GitopsAppProjectArgs();
        }

        public Builder(GitopsAppProjectArgs defaults) {
            $ = new GitopsAppProjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account identifier of the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account identifier of the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param agentId Agent identifier of the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder agentId(Output<String> agentId) {
            $.agentId = agentId;
            return this;
        }

        /**
         * @param agentId Agent identifier of the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder agentId(String agentId) {
            return agentId(Output.of(agentId));
        }

        /**
         * @param orgId Org identifier of the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Org identifier of the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Project identifier of the GitOps repository.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project identifier of the GitOps repository.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param projects GitOps project configuration.
         * 
         * @return builder
         * 
         */
        public Builder projects(Output<List<GitopsAppProjectProjectArgs>> projects) {
            $.projects = projects;
            return this;
        }

        /**
         * @param projects GitOps project configuration.
         * 
         * @return builder
         * 
         */
        public Builder projects(List<GitopsAppProjectProjectArgs> projects) {
            return projects(Output.of(projects));
        }

        /**
         * @param projects GitOps project configuration.
         * 
         * @return builder
         * 
         */
        public Builder projects(GitopsAppProjectProjectArgs... projects) {
            return projects(List.of(projects));
        }

        /**
         * @param queryName Identifier for the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder queryName(@Nullable Output<String> queryName) {
            $.queryName = queryName;
            return this;
        }

        /**
         * @param queryName Identifier for the GitOps project.
         * 
         * @return builder
         * 
         */
        public Builder queryName(String queryName) {
            return queryName(Output.of(queryName));
        }

        /**
         * @param upsert Indicates if the GitOps repository should be updated if existing and inserted if not.
         * 
         * @return builder
         * 
         */
        public Builder upsert(@Nullable Output<Boolean> upsert) {
            $.upsert = upsert;
            return this;
        }

        /**
         * @param upsert Indicates if the GitOps repository should be updated if existing and inserted if not.
         * 
         * @return builder
         * 
         */
        public Builder upsert(Boolean upsert) {
            return upsert(Output.of(upsert));
        }

        public GitopsAppProjectArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("GitopsAppProjectArgs", "accountId");
            }
            if ($.agentId == null) {
                throw new MissingRequiredPropertyException("GitopsAppProjectArgs", "agentId");
            }
            if ($.projects == null) {
                throw new MissingRequiredPropertyException("GitopsAppProjectArgs", "projects");
            }
            return $;
        }
    }

}
