// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.ConnectorCustomSecretManagerTemplateInputArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorCustomSecretManagerState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorCustomSecretManagerState Empty = new ConnectorCustomSecretManagerState();

    /**
     * Tags to filter delegates for connection.
     * 
     */
    @Import(name="delegateSelectors")
    private @Nullable Output<List<String>> delegateSelectors;

    /**
     * @return Tags to filter delegates for connection.
     * 
     */
    public Optional<Output<List<String>>> delegateSelectors() {
        return Optional.ofNullable(this.delegateSelectors);
    }

    /**
     * : A brief description of what the resource does or is used for.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return : A brief description of what the resource does or is used for.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * : Unique identifier of the resource.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return : Unique identifier of the resource.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * : Name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return : Name of the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * : Specifies whether the secrets manager runs on a Harness delegate.
     * 
     */
    @Import(name="onDelegate")
    private @Nullable Output<Boolean> onDelegate;

    /**
     * @return : Specifies whether the secrets manager runs on a Harness delegate.
     * 
     */
    public Optional<Output<Boolean>> onDelegate() {
        return Optional.ofNullable(this.onDelegate);
    }

    /**
     * Unique identifier of the organization.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Unique identifier of the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * : Reference to the Harness secret containing SSH credentials for the target host. Required if `on_delegate` is set to false.
     * 
     */
    @Import(name="sshSecretRef")
    private @Nullable Output<String> sshSecretRef;

    /**
     * @return : Reference to the Harness secret containing SSH credentials for the target host. Required if `on_delegate` is set to false.
     * 
     */
    public Optional<Output<String>> sshSecretRef() {
        return Optional.ofNullable(this.sshSecretRef);
    }

    /**
     * : Tags to associate with the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return : Tags to associate with the resource.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * : Host address where secrets will be managed. Required if `on_delegate` is set to false.
     * 
     */
    @Import(name="targetHost")
    private @Nullable Output<String> targetHost;

    /**
     * @return : Host address where secrets will be managed. Required if `on_delegate` is set to false.
     * 
     */
    public Optional<Output<String>> targetHost() {
        return Optional.ofNullable(this.targetHost);
    }

    @Import(name="templateInputs")
    private @Nullable Output<List<ConnectorCustomSecretManagerTemplateInputArgs>> templateInputs;

    public Optional<Output<List<ConnectorCustomSecretManagerTemplateInputArgs>>> templateInputs() {
        return Optional.ofNullable(this.templateInputs);
    }

    /**
     * : Reference to the template used for managing secrets.
     * 
     */
    @Import(name="templateRef")
    private @Nullable Output<String> templateRef;

    /**
     * @return : Reference to the template used for managing secrets.
     * 
     */
    public Optional<Output<String>> templateRef() {
        return Optional.ofNullable(this.templateRef);
    }

    /**
     * : Timeout in seconds for secrets management operations.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return : Timeout in seconds for secrets management operations.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * : Type of the custom secrets manager, typically set to `CustomSecretManager`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return : Type of the custom secrets manager, typically set to `CustomSecretManager`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * : Version identifier of the secrets management template.
     * 
     */
    @Import(name="versionLabel")
    private @Nullable Output<String> versionLabel;

    /**
     * @return : Version identifier of the secrets management template.
     * 
     */
    public Optional<Output<String>> versionLabel() {
        return Optional.ofNullable(this.versionLabel);
    }

    /**
     * : Directory path on the target host where secrets management tasks are performed. Required if `on_delegate` is set to false.
     * 
     */
    @Import(name="workingDirectory")
    private @Nullable Output<String> workingDirectory;

    /**
     * @return : Directory path on the target host where secrets management tasks are performed. Required if `on_delegate` is set to false.
     * 
     */
    public Optional<Output<String>> workingDirectory() {
        return Optional.ofNullable(this.workingDirectory);
    }

    private ConnectorCustomSecretManagerState() {}

    private ConnectorCustomSecretManagerState(ConnectorCustomSecretManagerState $) {
        this.delegateSelectors = $.delegateSelectors;
        this.description = $.description;
        this.identifier = $.identifier;
        this.name = $.name;
        this.onDelegate = $.onDelegate;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.sshSecretRef = $.sshSecretRef;
        this.tags = $.tags;
        this.targetHost = $.targetHost;
        this.templateInputs = $.templateInputs;
        this.templateRef = $.templateRef;
        this.timeout = $.timeout;
        this.type = $.type;
        this.versionLabel = $.versionLabel;
        this.workingDirectory = $.workingDirectory;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorCustomSecretManagerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorCustomSecretManagerState $;

        public Builder() {
            $ = new ConnectorCustomSecretManagerState();
        }

        public Builder(ConnectorCustomSecretManagerState defaults) {
            $ = new ConnectorCustomSecretManagerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param delegateSelectors Tags to filter delegates for connection.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(@Nullable Output<List<String>> delegateSelectors) {
            $.delegateSelectors = delegateSelectors;
            return this;
        }

        /**
         * @param delegateSelectors Tags to filter delegates for connection.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(List<String> delegateSelectors) {
            return delegateSelectors(Output.of(delegateSelectors));
        }

        /**
         * @param delegateSelectors Tags to filter delegates for connection.
         * 
         * @return builder
         * 
         */
        public Builder delegateSelectors(String... delegateSelectors) {
            return delegateSelectors(List.of(delegateSelectors));
        }

        /**
         * @param description : A brief description of what the resource does or is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description : A brief description of what the resource does or is used for.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param identifier : Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier : Unique identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param name : Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name : Name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param onDelegate : Specifies whether the secrets manager runs on a Harness delegate.
         * 
         * @return builder
         * 
         */
        public Builder onDelegate(@Nullable Output<Boolean> onDelegate) {
            $.onDelegate = onDelegate;
            return this;
        }

        /**
         * @param onDelegate : Specifies whether the secrets manager runs on a Harness delegate.
         * 
         * @return builder
         * 
         */
        public Builder onDelegate(Boolean onDelegate) {
            return onDelegate(Output.of(onDelegate));
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier of the organization.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param sshSecretRef : Reference to the Harness secret containing SSH credentials for the target host. Required if `on_delegate` is set to false.
         * 
         * @return builder
         * 
         */
        public Builder sshSecretRef(@Nullable Output<String> sshSecretRef) {
            $.sshSecretRef = sshSecretRef;
            return this;
        }

        /**
         * @param sshSecretRef : Reference to the Harness secret containing SSH credentials for the target host. Required if `on_delegate` is set to false.
         * 
         * @return builder
         * 
         */
        public Builder sshSecretRef(String sshSecretRef) {
            return sshSecretRef(Output.of(sshSecretRef));
        }

        /**
         * @param tags : Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags : Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags : Tags to associate with the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param targetHost : Host address where secrets will be managed. Required if `on_delegate` is set to false.
         * 
         * @return builder
         * 
         */
        public Builder targetHost(@Nullable Output<String> targetHost) {
            $.targetHost = targetHost;
            return this;
        }

        /**
         * @param targetHost : Host address where secrets will be managed. Required if `on_delegate` is set to false.
         * 
         * @return builder
         * 
         */
        public Builder targetHost(String targetHost) {
            return targetHost(Output.of(targetHost));
        }

        public Builder templateInputs(@Nullable Output<List<ConnectorCustomSecretManagerTemplateInputArgs>> templateInputs) {
            $.templateInputs = templateInputs;
            return this;
        }

        public Builder templateInputs(List<ConnectorCustomSecretManagerTemplateInputArgs> templateInputs) {
            return templateInputs(Output.of(templateInputs));
        }

        public Builder templateInputs(ConnectorCustomSecretManagerTemplateInputArgs... templateInputs) {
            return templateInputs(List.of(templateInputs));
        }

        /**
         * @param templateRef : Reference to the template used for managing secrets.
         * 
         * @return builder
         * 
         */
        public Builder templateRef(@Nullable Output<String> templateRef) {
            $.templateRef = templateRef;
            return this;
        }

        /**
         * @param templateRef : Reference to the template used for managing secrets.
         * 
         * @return builder
         * 
         */
        public Builder templateRef(String templateRef) {
            return templateRef(Output.of(templateRef));
        }

        /**
         * @param timeout : Timeout in seconds for secrets management operations.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout : Timeout in seconds for secrets management operations.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param type : Type of the custom secrets manager, typically set to `CustomSecretManager`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type : Type of the custom secrets manager, typically set to `CustomSecretManager`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param versionLabel : Version identifier of the secrets management template.
         * 
         * @return builder
         * 
         */
        public Builder versionLabel(@Nullable Output<String> versionLabel) {
            $.versionLabel = versionLabel;
            return this;
        }

        /**
         * @param versionLabel : Version identifier of the secrets management template.
         * 
         * @return builder
         * 
         */
        public Builder versionLabel(String versionLabel) {
            return versionLabel(Output.of(versionLabel));
        }

        /**
         * @param workingDirectory : Directory path on the target host where secrets management tasks are performed. Required if `on_delegate` is set to false.
         * 
         * @return builder
         * 
         */
        public Builder workingDirectory(@Nullable Output<String> workingDirectory) {
            $.workingDirectory = workingDirectory;
            return this;
        }

        /**
         * @param workingDirectory : Directory path on the target host where secrets management tasks are performed. Required if `on_delegate` is set to false.
         * 
         * @return builder
         * 
         */
        public Builder workingDirectory(String workingDirectory) {
            return workingDirectory(Output.of(workingDirectory));
        }

        public ConnectorCustomSecretManagerState build() {
            return $;
        }
    }

}
