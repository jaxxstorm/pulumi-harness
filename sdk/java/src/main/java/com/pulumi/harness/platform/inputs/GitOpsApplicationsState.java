// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GitOpsApplicationsApplicationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitOpsApplicationsState extends com.pulumi.resources.ResourceArgs {

    public static final GitOpsApplicationsState Empty = new GitOpsApplicationsState();

    /**
     * Account identifier of the GitOps application.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Account identifier of the GitOps application.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Agent identifier of the GitOps application.
     * 
     */
    @Import(name="agentId")
    private @Nullable Output<String> agentId;

    /**
     * @return Agent identifier of the GitOps application.
     * 
     */
    public Optional<Output<String>> agentId() {
        return Optional.ofNullable(this.agentId);
    }

    /**
     * Definition of the GitOps application resource.
     * 
     */
    @Import(name="applications")
    private @Nullable Output<List<GitOpsApplicationsApplicationArgs>> applications;

    /**
     * @return Definition of the GitOps application resource.
     * 
     */
    public Optional<Output<List<GitOpsApplicationsApplicationArgs>>> applications() {
        return Optional.ofNullable(this.applications);
    }

    /**
     * Cluster identifier of the GitOps application.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return Cluster identifier of the GitOps application.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * Identifier of the GitOps application.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return Identifier of the GitOps application.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    /**
     * Kind of the GitOps application.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return Kind of the GitOps application.
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Name of the GitOps application.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the GitOps application.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Options to remove existing finalizers to delete the GitOps application.
     * 
     */
    @Import(name="optionsRemoveExistingFinalizers")
    private @Nullable Output<Boolean> optionsRemoveExistingFinalizers;

    /**
     * @return Options to remove existing finalizers to delete the GitOps application.
     * 
     */
    public Optional<Output<Boolean>> optionsRemoveExistingFinalizers() {
        return Optional.ofNullable(this.optionsRemoveExistingFinalizers);
    }

    /**
     * Organization identifier of the GitOps application.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Organization identifier of the GitOps application.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the &#39;default&#39; project.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the &#39;default&#39; project.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Project identifier of the GitOps application.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Project identifier of the GitOps application.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Project names to filter the corresponding GitOps applications.
     * 
     */
    @Import(name="queryProject")
    private @Nullable Output<String> queryProject;

    /**
     * @return Project names to filter the corresponding GitOps applications.
     * 
     */
    public Optional<Output<String>> queryProject() {
        return Optional.ofNullable(this.queryProject);
    }

    /**
     * Forces the GitOps application to reconcile when set to true.
     * 
     */
    @Import(name="queryRefresh")
    private @Nullable Output<String> queryRefresh;

    /**
     * @return Forces the GitOps application to reconcile when set to true.
     * 
     */
    public Optional<Output<String>> queryRefresh() {
        return Optional.ofNullable(this.queryRefresh);
    }

    /**
     * Repo URL to restrict returned list applications.
     * 
     */
    @Import(name="queryRepo")
    private @Nullable Output<String> queryRepo;

    /**
     * @return Repo URL to restrict returned list applications.
     * 
     */
    public Optional<Output<String>> queryRepo() {
        return Optional.ofNullable(this.queryRepo);
    }

    /**
     * Shows modifications after a version that is specified with a watch call.
     * 
     */
    @Import(name="queryResourceVersion")
    private @Nullable Output<String> queryResourceVersion;

    /**
     * @return Shows modifications after a version that is specified with a watch call.
     * 
     */
    public Optional<Output<String>> queryResourceVersion() {
        return Optional.ofNullable(this.queryResourceVersion);
    }

    /**
     * Filters GitOps applications corresponding to the labels.
     * 
     */
    @Import(name="querySelector")
    private @Nullable Output<String> querySelector;

    /**
     * @return Filters GitOps applications corresponding to the labels.
     * 
     */
    public Optional<Output<String>> querySelector() {
        return Optional.ofNullable(this.querySelector);
    }

    /**
     * Repository identifier of the GitOps application.
     * 
     */
    @Import(name="repoId")
    private @Nullable Output<String> repoId;

    /**
     * @return Repository identifier of the GitOps application.
     * 
     */
    public Optional<Output<String>> repoId() {
        return Optional.ofNullable(this.repoId);
    }

    /**
     * Request cascade to delete the GitOps application.
     * 
     */
    @Import(name="requestCascade")
    private @Nullable Output<Boolean> requestCascade;

    /**
     * @return Request cascade to delete the GitOps application.
     * 
     */
    public Optional<Output<Boolean>> requestCascade() {
        return Optional.ofNullable(this.requestCascade);
    }

    /**
     * Request name to delete the GitOps application.
     * 
     */
    @Import(name="requestName")
    private @Nullable Output<String> requestName;

    /**
     * @return Request name to delete the GitOps application.
     * 
     */
    public Optional<Output<String>> requestName() {
        return Optional.ofNullable(this.requestName);
    }

    /**
     * Request propagation policy to delete the GitOps application.
     * 
     */
    @Import(name="requestPropagationPolicy")
    private @Nullable Output<String> requestPropagationPolicy;

    /**
     * @return Request propagation policy to delete the GitOps application.
     * 
     */
    public Optional<Output<String>> requestPropagationPolicy() {
        return Optional.ofNullable(this.requestPropagationPolicy);
    }

    /**
     * Indicates if the GitOps application should be updated if existing and inserted if not.
     * 
     */
    @Import(name="upsert")
    private @Nullable Output<Boolean> upsert;

    /**
     * @return Indicates if the GitOps application should be updated if existing and inserted if not.
     * 
     */
    public Optional<Output<Boolean>> upsert() {
        return Optional.ofNullable(this.upsert);
    }

    /**
     * Indicates if the GitOps application has to be validated.
     * 
     */
    @Import(name="validate")
    private @Nullable Output<Boolean> validate;

    /**
     * @return Indicates if the GitOps application has to be validated.
     * 
     */
    public Optional<Output<Boolean>> validate() {
        return Optional.ofNullable(this.validate);
    }

    private GitOpsApplicationsState() {}

    private GitOpsApplicationsState(GitOpsApplicationsState $) {
        this.accountId = $.accountId;
        this.agentId = $.agentId;
        this.applications = $.applications;
        this.clusterId = $.clusterId;
        this.identifier = $.identifier;
        this.kind = $.kind;
        this.name = $.name;
        this.optionsRemoveExistingFinalizers = $.optionsRemoveExistingFinalizers;
        this.orgId = $.orgId;
        this.project = $.project;
        this.projectId = $.projectId;
        this.queryProject = $.queryProject;
        this.queryRefresh = $.queryRefresh;
        this.queryRepo = $.queryRepo;
        this.queryResourceVersion = $.queryResourceVersion;
        this.querySelector = $.querySelector;
        this.repoId = $.repoId;
        this.requestCascade = $.requestCascade;
        this.requestName = $.requestName;
        this.requestPropagationPolicy = $.requestPropagationPolicy;
        this.upsert = $.upsert;
        this.validate = $.validate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitOpsApplicationsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitOpsApplicationsState $;

        public Builder() {
            $ = new GitOpsApplicationsState();
        }

        public Builder(GitOpsApplicationsState defaults) {
            $ = new GitOpsApplicationsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account identifier of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account identifier of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param agentId Agent identifier of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder agentId(@Nullable Output<String> agentId) {
            $.agentId = agentId;
            return this;
        }

        /**
         * @param agentId Agent identifier of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder agentId(String agentId) {
            return agentId(Output.of(agentId));
        }

        /**
         * @param applications Definition of the GitOps application resource.
         * 
         * @return builder
         * 
         */
        public Builder applications(@Nullable Output<List<GitOpsApplicationsApplicationArgs>> applications) {
            $.applications = applications;
            return this;
        }

        /**
         * @param applications Definition of the GitOps application resource.
         * 
         * @return builder
         * 
         */
        public Builder applications(List<GitOpsApplicationsApplicationArgs> applications) {
            return applications(Output.of(applications));
        }

        /**
         * @param applications Definition of the GitOps application resource.
         * 
         * @return builder
         * 
         */
        public Builder applications(GitOpsApplicationsApplicationArgs... applications) {
            return applications(List.of(applications));
        }

        /**
         * @param clusterId Cluster identifier of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId Cluster identifier of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param identifier Identifier of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Identifier of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param kind Kind of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind Kind of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param name Name of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param optionsRemoveExistingFinalizers Options to remove existing finalizers to delete the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder optionsRemoveExistingFinalizers(@Nullable Output<Boolean> optionsRemoveExistingFinalizers) {
            $.optionsRemoveExistingFinalizers = optionsRemoveExistingFinalizers;
            return this;
        }

        /**
         * @param optionsRemoveExistingFinalizers Options to remove existing finalizers to delete the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder optionsRemoveExistingFinalizers(Boolean optionsRemoveExistingFinalizers) {
            return optionsRemoveExistingFinalizers(Output.of(optionsRemoveExistingFinalizers));
        }

        /**
         * @param orgId Organization identifier of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Organization identifier of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param project Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the &#39;default&#39; project.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the &#39;default&#39; project.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param projectId Project identifier of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project identifier of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param queryProject Project names to filter the corresponding GitOps applications.
         * 
         * @return builder
         * 
         */
        public Builder queryProject(@Nullable Output<String> queryProject) {
            $.queryProject = queryProject;
            return this;
        }

        /**
         * @param queryProject Project names to filter the corresponding GitOps applications.
         * 
         * @return builder
         * 
         */
        public Builder queryProject(String queryProject) {
            return queryProject(Output.of(queryProject));
        }

        /**
         * @param queryRefresh Forces the GitOps application to reconcile when set to true.
         * 
         * @return builder
         * 
         */
        public Builder queryRefresh(@Nullable Output<String> queryRefresh) {
            $.queryRefresh = queryRefresh;
            return this;
        }

        /**
         * @param queryRefresh Forces the GitOps application to reconcile when set to true.
         * 
         * @return builder
         * 
         */
        public Builder queryRefresh(String queryRefresh) {
            return queryRefresh(Output.of(queryRefresh));
        }

        /**
         * @param queryRepo Repo URL to restrict returned list applications.
         * 
         * @return builder
         * 
         */
        public Builder queryRepo(@Nullable Output<String> queryRepo) {
            $.queryRepo = queryRepo;
            return this;
        }

        /**
         * @param queryRepo Repo URL to restrict returned list applications.
         * 
         * @return builder
         * 
         */
        public Builder queryRepo(String queryRepo) {
            return queryRepo(Output.of(queryRepo));
        }

        /**
         * @param queryResourceVersion Shows modifications after a version that is specified with a watch call.
         * 
         * @return builder
         * 
         */
        public Builder queryResourceVersion(@Nullable Output<String> queryResourceVersion) {
            $.queryResourceVersion = queryResourceVersion;
            return this;
        }

        /**
         * @param queryResourceVersion Shows modifications after a version that is specified with a watch call.
         * 
         * @return builder
         * 
         */
        public Builder queryResourceVersion(String queryResourceVersion) {
            return queryResourceVersion(Output.of(queryResourceVersion));
        }

        /**
         * @param querySelector Filters GitOps applications corresponding to the labels.
         * 
         * @return builder
         * 
         */
        public Builder querySelector(@Nullable Output<String> querySelector) {
            $.querySelector = querySelector;
            return this;
        }

        /**
         * @param querySelector Filters GitOps applications corresponding to the labels.
         * 
         * @return builder
         * 
         */
        public Builder querySelector(String querySelector) {
            return querySelector(Output.of(querySelector));
        }

        /**
         * @param repoId Repository identifier of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder repoId(@Nullable Output<String> repoId) {
            $.repoId = repoId;
            return this;
        }

        /**
         * @param repoId Repository identifier of the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder repoId(String repoId) {
            return repoId(Output.of(repoId));
        }

        /**
         * @param requestCascade Request cascade to delete the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder requestCascade(@Nullable Output<Boolean> requestCascade) {
            $.requestCascade = requestCascade;
            return this;
        }

        /**
         * @param requestCascade Request cascade to delete the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder requestCascade(Boolean requestCascade) {
            return requestCascade(Output.of(requestCascade));
        }

        /**
         * @param requestName Request name to delete the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder requestName(@Nullable Output<String> requestName) {
            $.requestName = requestName;
            return this;
        }

        /**
         * @param requestName Request name to delete the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder requestName(String requestName) {
            return requestName(Output.of(requestName));
        }

        /**
         * @param requestPropagationPolicy Request propagation policy to delete the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder requestPropagationPolicy(@Nullable Output<String> requestPropagationPolicy) {
            $.requestPropagationPolicy = requestPropagationPolicy;
            return this;
        }

        /**
         * @param requestPropagationPolicy Request propagation policy to delete the GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder requestPropagationPolicy(String requestPropagationPolicy) {
            return requestPropagationPolicy(Output.of(requestPropagationPolicy));
        }

        /**
         * @param upsert Indicates if the GitOps application should be updated if existing and inserted if not.
         * 
         * @return builder
         * 
         */
        public Builder upsert(@Nullable Output<Boolean> upsert) {
            $.upsert = upsert;
            return this;
        }

        /**
         * @param upsert Indicates if the GitOps application should be updated if existing and inserted if not.
         * 
         * @return builder
         * 
         */
        public Builder upsert(Boolean upsert) {
            return upsert(Output.of(upsert));
        }

        /**
         * @param validate Indicates if the GitOps application has to be validated.
         * 
         * @return builder
         * 
         */
        public Builder validate(@Nullable Output<Boolean> validate) {
            $.validate = validate;
            return this;
        }

        /**
         * @param validate Indicates if the GitOps application has to be validated.
         * 
         * @return builder
         * 
         */
        public Builder validate(Boolean validate) {
            return validate(Output.of(validate));
        }

        public GitOpsApplicationsState build() {
            return $;
        }
    }

}
