// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GitOpsRepoCertRequestArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GitOpsRepoCertState extends com.pulumi.resources.ResourceArgs {

    public static final GitOpsRepoCertState Empty = new GitOpsRepoCertState();

    /**
     * account identifier of the Repository Certificates.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return account identifier of the Repository Certificates.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * agent identifier of the Repository Certificates.
     * 
     */
    @Import(name="agentId")
    private @Nullable Output<String> agentId;

    /**
     * @return agent identifier of the Repository Certificates.
     * 
     */
    public Optional<Output<String>> agentId() {
        return Optional.ofNullable(this.agentId);
    }

    /**
     * organization identifier of the Repository Certificates.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return organization identifier of the Repository Certificates.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * project identifier of the Repository Certificates.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return project identifier of the Repository Certificates.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Repository Certificates create/Update request.
     * 
     */
    @Import(name="requests")
    private @Nullable Output<List<GitOpsRepoCertRequestArgs>> requests;

    /**
     * @return Repository Certificates create/Update request.
     * 
     */
    public Optional<Output<List<GitOpsRepoCertRequestArgs>>> requests() {
        return Optional.ofNullable(this.requests);
    }

    private GitOpsRepoCertState() {}

    private GitOpsRepoCertState(GitOpsRepoCertState $) {
        this.accountId = $.accountId;
        this.agentId = $.agentId;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.requests = $.requests;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitOpsRepoCertState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitOpsRepoCertState $;

        public Builder() {
            $ = new GitOpsRepoCertState();
        }

        public Builder(GitOpsRepoCertState defaults) {
            $ = new GitOpsRepoCertState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId account identifier of the Repository Certificates.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId account identifier of the Repository Certificates.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param agentId agent identifier of the Repository Certificates.
         * 
         * @return builder
         * 
         */
        public Builder agentId(@Nullable Output<String> agentId) {
            $.agentId = agentId;
            return this;
        }

        /**
         * @param agentId agent identifier of the Repository Certificates.
         * 
         * @return builder
         * 
         */
        public Builder agentId(String agentId) {
            return agentId(Output.of(agentId));
        }

        /**
         * @param orgId organization identifier of the Repository Certificates.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId organization identifier of the Repository Certificates.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId project identifier of the Repository Certificates.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId project identifier of the Repository Certificates.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param requests Repository Certificates create/Update request.
         * 
         * @return builder
         * 
         */
        public Builder requests(@Nullable Output<List<GitOpsRepoCertRequestArgs>> requests) {
            $.requests = requests;
            return this;
        }

        /**
         * @param requests Repository Certificates create/Update request.
         * 
         * @return builder
         * 
         */
        public Builder requests(List<GitOpsRepoCertRequestArgs> requests) {
            return requests(Output.of(requests));
        }

        /**
         * @param requests Repository Certificates create/Update request.
         * 
         * @return builder
         * 
         */
        public Builder requests(GitOpsRepoCertRequestArgs... requests) {
            return requests(List.of(requests));
        }

        public GitOpsRepoCertState build() {
            return $;
        }
    }

}
