// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.GitopsAppProjectArgs;
import com.pulumi.harness.platform.inputs.GitopsAppProjectState;
import com.pulumi.harness.platform.outputs.GitopsAppProjectProject;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="harness:platform/gitopsAppProject:GitopsAppProject")
public class GitopsAppProject extends com.pulumi.resources.CustomResource {
    /**
     * Account identifier of the GitOps project.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return Account identifier of the GitOps project.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * Agent identifier of the GitOps project.
     * 
     */
    @Export(name="agentId", refs={String.class}, tree="[0]")
    private Output<String> agentId;

    /**
     * @return Agent identifier of the GitOps project.
     * 
     */
    public Output<String> agentId() {
        return this.agentId;
    }
    /**
     * Org identifier of the GitOps project.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> orgId;

    /**
     * @return Org identifier of the GitOps project.
     * 
     */
    public Output<Optional<String>> orgId() {
        return Codegen.optional(this.orgId);
    }
    /**
     * Project identifier of the GitOps repository.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return Project identifier of the GitOps repository.
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    /**
     * GitOps project configuration.
     * 
     */
    @Export(name="projects", refs={List.class,GitopsAppProjectProject.class}, tree="[0,1]")
    private Output<List<GitopsAppProjectProject>> projects;

    /**
     * @return GitOps project configuration.
     * 
     */
    public Output<List<GitopsAppProjectProject>> projects() {
        return this.projects;
    }
    /**
     * Identifier for the GitOps project.
     * 
     */
    @Export(name="queryName", refs={String.class}, tree="[0]")
    private Output<String> queryName;

    /**
     * @return Identifier for the GitOps project.
     * 
     */
    public Output<String> queryName() {
        return this.queryName;
    }
    /**
     * Indicates if the GitOps repository should be updated if existing and inserted if not.
     * 
     */
    @Export(name="upsert", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> upsert;

    /**
     * @return Indicates if the GitOps repository should be updated if existing and inserted if not.
     * 
     */
    public Output<Optional<Boolean>> upsert() {
        return Codegen.optional(this.upsert);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GitopsAppProject(String name) {
        this(name, GitopsAppProjectArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GitopsAppProject(String name, GitopsAppProjectArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GitopsAppProject(String name, GitopsAppProjectArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/gitopsAppProject:GitopsAppProject", name, args == null ? GitopsAppProjectArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private GitopsAppProject(String name, Output<String> id, @Nullable GitopsAppProjectState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/gitopsAppProject:GitopsAppProject", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GitopsAppProject get(String name, Output<String> id, @Nullable GitopsAppProjectState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GitopsAppProject(name, id, state, options);
    }
}
