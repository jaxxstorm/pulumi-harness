// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GetGitopsApplicationsApplicationSpecDestination;
import com.pulumi.harness.platform.inputs.GetGitopsApplicationsApplicationSpecSource;
import com.pulumi.harness.platform.inputs.GetGitopsApplicationsApplicationSpecSyncPolicy;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGitopsApplicationsApplicationSpec extends com.pulumi.resources.InvokeArgs {

    public static final GetGitopsApplicationsApplicationSpec Empty = new GetGitopsApplicationsApplicationSpec();

    /**
     * Information about the GitOps application&#39;s destination.
     * 
     */
    @Import(name="destinations")
    private @Nullable List<GetGitopsApplicationsApplicationSpecDestination> destinations;

    /**
     * @return Information about the GitOps application&#39;s destination.
     * 
     */
    public Optional<List<GetGitopsApplicationsApplicationSpecDestination>> destinations() {
        return Optional.ofNullable(this.destinations);
    }

    /**
     * Contains all information about the source of a GitOps application.
     * 
     */
    @Import(name="sources")
    private @Nullable List<GetGitopsApplicationsApplicationSpecSource> sources;

    /**
     * @return Contains all information about the source of a GitOps application.
     * 
     */
    public Optional<List<GetGitopsApplicationsApplicationSpecSource>> sources() {
        return Optional.ofNullable(this.sources);
    }

    /**
     * Controls when a sync will be performed in response to updates in git.
     * 
     */
    @Import(name="syncPolicies")
    private @Nullable List<GetGitopsApplicationsApplicationSpecSyncPolicy> syncPolicies;

    /**
     * @return Controls when a sync will be performed in response to updates in git.
     * 
     */
    public Optional<List<GetGitopsApplicationsApplicationSpecSyncPolicy>> syncPolicies() {
        return Optional.ofNullable(this.syncPolicies);
    }

    private GetGitopsApplicationsApplicationSpec() {}

    private GetGitopsApplicationsApplicationSpec(GetGitopsApplicationsApplicationSpec $) {
        this.destinations = $.destinations;
        this.sources = $.sources;
        this.syncPolicies = $.syncPolicies;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGitopsApplicationsApplicationSpec defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGitopsApplicationsApplicationSpec $;

        public Builder() {
            $ = new GetGitopsApplicationsApplicationSpec();
        }

        public Builder(GetGitopsApplicationsApplicationSpec defaults) {
            $ = new GetGitopsApplicationsApplicationSpec(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinations Information about the GitOps application&#39;s destination.
         * 
         * @return builder
         * 
         */
        public Builder destinations(@Nullable List<GetGitopsApplicationsApplicationSpecDestination> destinations) {
            $.destinations = destinations;
            return this;
        }

        /**
         * @param destinations Information about the GitOps application&#39;s destination.
         * 
         * @return builder
         * 
         */
        public Builder destinations(GetGitopsApplicationsApplicationSpecDestination... destinations) {
            return destinations(List.of(destinations));
        }

        /**
         * @param sources Contains all information about the source of a GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder sources(@Nullable List<GetGitopsApplicationsApplicationSpecSource> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources Contains all information about the source of a GitOps application.
         * 
         * @return builder
         * 
         */
        public Builder sources(GetGitopsApplicationsApplicationSpecSource... sources) {
            return sources(List.of(sources));
        }

        /**
         * @param syncPolicies Controls when a sync will be performed in response to updates in git.
         * 
         * @return builder
         * 
         */
        public Builder syncPolicies(@Nullable List<GetGitopsApplicationsApplicationSpecSyncPolicy> syncPolicies) {
            $.syncPolicies = syncPolicies;
            return this;
        }

        /**
         * @param syncPolicies Controls when a sync will be performed in response to updates in git.
         * 
         * @return builder
         * 
         */
        public Builder syncPolicies(GetGitopsApplicationsApplicationSpecSyncPolicy... syncPolicies) {
            return syncPolicies(List.of(syncPolicies));
        }

        public GetGitopsApplicationsApplicationSpec build() {
            return $;
        }
    }

}
