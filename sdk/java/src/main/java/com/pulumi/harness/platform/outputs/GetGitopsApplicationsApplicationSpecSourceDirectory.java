// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnet;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGitopsApplicationsApplicationSpecSourceDirectory {
    /**
     * @return Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.
     * 
     */
    private String exclude;
    /**
     * @return Glob pattern to match paths against that should be explicitly included during manifest generation.
     * 
     */
    private String include;
    /**
     * @return Options specific to applications of type Jsonnet.
     * 
     */
    private List<GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnet> jsonnets;
    /**
     * @return Indicates to scan a directory recursively for manifests.
     * 
     */
    private Boolean recurse;

    private GetGitopsApplicationsApplicationSpecSourceDirectory() {}
    /**
     * @return Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.
     * 
     */
    public String exclude() {
        return this.exclude;
    }
    /**
     * @return Glob pattern to match paths against that should be explicitly included during manifest generation.
     * 
     */
    public String include() {
        return this.include;
    }
    /**
     * @return Options specific to applications of type Jsonnet.
     * 
     */
    public List<GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnet> jsonnets() {
        return this.jsonnets;
    }
    /**
     * @return Indicates to scan a directory recursively for manifests.
     * 
     */
    public Boolean recurse() {
        return this.recurse;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGitopsApplicationsApplicationSpecSourceDirectory defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String exclude;
        private String include;
        private List<GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnet> jsonnets;
        private Boolean recurse;
        public Builder() {}
        public Builder(GetGitopsApplicationsApplicationSpecSourceDirectory defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exclude = defaults.exclude;
    	      this.include = defaults.include;
    	      this.jsonnets = defaults.jsonnets;
    	      this.recurse = defaults.recurse;
        }

        @CustomType.Setter
        public Builder exclude(String exclude) {
            if (exclude == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceDirectory", "exclude");
            }
            this.exclude = exclude;
            return this;
        }
        @CustomType.Setter
        public Builder include(String include) {
            if (include == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceDirectory", "include");
            }
            this.include = include;
            return this;
        }
        @CustomType.Setter
        public Builder jsonnets(List<GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnet> jsonnets) {
            if (jsonnets == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceDirectory", "jsonnets");
            }
            this.jsonnets = jsonnets;
            return this;
        }
        public Builder jsonnets(GetGitopsApplicationsApplicationSpecSourceDirectoryJsonnet... jsonnets) {
            return jsonnets(List.of(jsonnets));
        }
        @CustomType.Setter
        public Builder recurse(Boolean recurse) {
            if (recurse == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceDirectory", "recurse");
            }
            this.recurse = recurse;
            return this;
        }
        public GetGitopsApplicationsApplicationSpecSourceDirectory build() {
            final var _resultValue = new GetGitopsApplicationsApplicationSpecSourceDirectory();
            _resultValue.exclude = exclude;
            _resultValue.include = include;
            _resultValue.jsonnets = jsonnets;
            _resultValue.recurse = recurse;
            return _resultValue;
        }
    }
}
