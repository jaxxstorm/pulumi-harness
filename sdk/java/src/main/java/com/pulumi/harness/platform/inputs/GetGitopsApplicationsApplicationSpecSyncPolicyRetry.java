// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GetGitopsApplicationsApplicationSpecSyncPolicyRetryBackoff;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGitopsApplicationsApplicationSpecSyncPolicyRetry extends com.pulumi.resources.InvokeArgs {

    public static final GetGitopsApplicationsApplicationSpecSyncPolicyRetry Empty = new GetGitopsApplicationsApplicationSpecSyncPolicyRetry();

    /**
     * Backoff strategy to use on subsequent retries for failing syncs.
     * 
     */
    @Import(name="backoffs")
    private @Nullable List<GetGitopsApplicationsApplicationSpecSyncPolicyRetryBackoff> backoffs;

    /**
     * @return Backoff strategy to use on subsequent retries for failing syncs.
     * 
     */
    public Optional<List<GetGitopsApplicationsApplicationSpecSyncPolicyRetryBackoff>> backoffs() {
        return Optional.ofNullable(this.backoffs);
    }

    /**
     * Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     * 
     */
    @Import(name="limit")
    private @Nullable String limit;

    /**
     * @return Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     * 
     */
    public Optional<String> limit() {
        return Optional.ofNullable(this.limit);
    }

    private GetGitopsApplicationsApplicationSpecSyncPolicyRetry() {}

    private GetGitopsApplicationsApplicationSpecSyncPolicyRetry(GetGitopsApplicationsApplicationSpecSyncPolicyRetry $) {
        this.backoffs = $.backoffs;
        this.limit = $.limit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGitopsApplicationsApplicationSpecSyncPolicyRetry defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGitopsApplicationsApplicationSpecSyncPolicyRetry $;

        public Builder() {
            $ = new GetGitopsApplicationsApplicationSpecSyncPolicyRetry();
        }

        public Builder(GetGitopsApplicationsApplicationSpecSyncPolicyRetry defaults) {
            $ = new GetGitopsApplicationsApplicationSpecSyncPolicyRetry(Objects.requireNonNull(defaults));
        }

        /**
         * @param backoffs Backoff strategy to use on subsequent retries for failing syncs.
         * 
         * @return builder
         * 
         */
        public Builder backoffs(@Nullable List<GetGitopsApplicationsApplicationSpecSyncPolicyRetryBackoff> backoffs) {
            $.backoffs = backoffs;
            return this;
        }

        /**
         * @param backoffs Backoff strategy to use on subsequent retries for failing syncs.
         * 
         * @return builder
         * 
         */
        public Builder backoffs(GetGitopsApplicationsApplicationSpecSyncPolicyRetryBackoff... backoffs) {
            return backoffs(List.of(backoffs));
        }

        /**
         * @param limit Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
         * 
         * @return builder
         * 
         */
        public Builder limit(@Nullable String limit) {
            $.limit = limit;
            return this;
        }

        public GetGitopsApplicationsApplicationSpecSyncPolicyRetry build() {
            return $;
        }
    }

}
