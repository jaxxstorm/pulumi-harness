// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGitopsRepoCredCred {
    /**
     * @return Specifies whether helm-oci support should be enabled for this repo.
     * 
     */
    private @Nullable Boolean enableOci;
    /**
     * @return Specifies the GitHub API URL for GitHub app authentication.
     * 
     */
    private @Nullable String githubAppEnterpriseBaseUrl;
    /**
     * @return Specifies the Github App ID of the app used to access the repo for GitHub app authentication.
     * 
     */
    private @Nullable String githubAppId;
    /**
     * @return Specifies the ID of the installed GitHub App for GitHub app authentication.
     * 
     */
    private @Nullable String githubAppInstallationId;
    /**
     * @return github*app*private_key specifies the private key PEM data for authentication via GitHub app.
     * 
     */
    private @Nullable String githubAppPrivateKey;
    /**
     * @return Password for authenticating at the repo server.
     * 
     */
    private @Nullable String password;
    /**
     * @return Contains the private key data for authenticating at the repo server using SSH (only Git repos).
     * 
     */
    private @Nullable String sshPrivateKey;
    /**
     * @return Specifies the TLS client cert data for authenticating at the repo server.
     * 
     */
    private @Nullable String tlsClientCertData;
    /**
     * @return Specifies the TLS client cert key for authenticating at the repo server.
     * 
     */
    private @Nullable String tlsClientCertKey;
    /**
     * @return Type specifies the type of the repoCreds.Can be either &#39;git&#39; or &#39;helm. &#39;git&#39; is assumed if empty or absent
     * 
     */
    private @Nullable String type;
    /**
     * @return url representing this object.
     * 
     */
    private @Nullable String url;
    /**
     * @return Username for authenticating at the repo server.
     * 
     */
    private @Nullable String username;

    private GetGitopsRepoCredCred() {}
    /**
     * @return Specifies whether helm-oci support should be enabled for this repo.
     * 
     */
    public Optional<Boolean> enableOci() {
        return Optional.ofNullable(this.enableOci);
    }
    /**
     * @return Specifies the GitHub API URL for GitHub app authentication.
     * 
     */
    public Optional<String> githubAppEnterpriseBaseUrl() {
        return Optional.ofNullable(this.githubAppEnterpriseBaseUrl);
    }
    /**
     * @return Specifies the Github App ID of the app used to access the repo for GitHub app authentication.
     * 
     */
    public Optional<String> githubAppId() {
        return Optional.ofNullable(this.githubAppId);
    }
    /**
     * @return Specifies the ID of the installed GitHub App for GitHub app authentication.
     * 
     */
    public Optional<String> githubAppInstallationId() {
        return Optional.ofNullable(this.githubAppInstallationId);
    }
    /**
     * @return github*app*private_key specifies the private key PEM data for authentication via GitHub app.
     * 
     */
    public Optional<String> githubAppPrivateKey() {
        return Optional.ofNullable(this.githubAppPrivateKey);
    }
    /**
     * @return Password for authenticating at the repo server.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return Contains the private key data for authenticating at the repo server using SSH (only Git repos).
     * 
     */
    public Optional<String> sshPrivateKey() {
        return Optional.ofNullable(this.sshPrivateKey);
    }
    /**
     * @return Specifies the TLS client cert data for authenticating at the repo server.
     * 
     */
    public Optional<String> tlsClientCertData() {
        return Optional.ofNullable(this.tlsClientCertData);
    }
    /**
     * @return Specifies the TLS client cert key for authenticating at the repo server.
     * 
     */
    public Optional<String> tlsClientCertKey() {
        return Optional.ofNullable(this.tlsClientCertKey);
    }
    /**
     * @return Type specifies the type of the repoCreds.Can be either &#39;git&#39; or &#39;helm. &#39;git&#39; is assumed if empty or absent
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return url representing this object.
     * 
     */
    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }
    /**
     * @return Username for authenticating at the repo server.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGitopsRepoCredCred defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enableOci;
        private @Nullable String githubAppEnterpriseBaseUrl;
        private @Nullable String githubAppId;
        private @Nullable String githubAppInstallationId;
        private @Nullable String githubAppPrivateKey;
        private @Nullable String password;
        private @Nullable String sshPrivateKey;
        private @Nullable String tlsClientCertData;
        private @Nullable String tlsClientCertKey;
        private @Nullable String type;
        private @Nullable String url;
        private @Nullable String username;
        public Builder() {}
        public Builder(GetGitopsRepoCredCred defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableOci = defaults.enableOci;
    	      this.githubAppEnterpriseBaseUrl = defaults.githubAppEnterpriseBaseUrl;
    	      this.githubAppId = defaults.githubAppId;
    	      this.githubAppInstallationId = defaults.githubAppInstallationId;
    	      this.githubAppPrivateKey = defaults.githubAppPrivateKey;
    	      this.password = defaults.password;
    	      this.sshPrivateKey = defaults.sshPrivateKey;
    	      this.tlsClientCertData = defaults.tlsClientCertData;
    	      this.tlsClientCertKey = defaults.tlsClientCertKey;
    	      this.type = defaults.type;
    	      this.url = defaults.url;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder enableOci(@Nullable Boolean enableOci) {

            this.enableOci = enableOci;
            return this;
        }
        @CustomType.Setter
        public Builder githubAppEnterpriseBaseUrl(@Nullable String githubAppEnterpriseBaseUrl) {

            this.githubAppEnterpriseBaseUrl = githubAppEnterpriseBaseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder githubAppId(@Nullable String githubAppId) {

            this.githubAppId = githubAppId;
            return this;
        }
        @CustomType.Setter
        public Builder githubAppInstallationId(@Nullable String githubAppInstallationId) {

            this.githubAppInstallationId = githubAppInstallationId;
            return this;
        }
        @CustomType.Setter
        public Builder githubAppPrivateKey(@Nullable String githubAppPrivateKey) {

            this.githubAppPrivateKey = githubAppPrivateKey;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder sshPrivateKey(@Nullable String sshPrivateKey) {

            this.sshPrivateKey = sshPrivateKey;
            return this;
        }
        @CustomType.Setter
        public Builder tlsClientCertData(@Nullable String tlsClientCertData) {

            this.tlsClientCertData = tlsClientCertData;
            return this;
        }
        @CustomType.Setter
        public Builder tlsClientCertKey(@Nullable String tlsClientCertKey) {

            this.tlsClientCertKey = tlsClientCertKey;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder url(@Nullable String url) {

            this.url = url;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        public GetGitopsRepoCredCred build() {
            final var _resultValue = new GetGitopsRepoCredCred();
            _resultValue.enableOci = enableOci;
            _resultValue.githubAppEnterpriseBaseUrl = githubAppEnterpriseBaseUrl;
            _resultValue.githubAppId = githubAppId;
            _resultValue.githubAppInstallationId = githubAppInstallationId;
            _resultValue.githubAppPrivateKey = githubAppPrivateKey;
            _resultValue.password = password;
            _resultValue.sshPrivateKey = sshPrivateKey;
            _resultValue.tlsClientCertData = tlsClientCertData;
            _resultValue.tlsClientCertKey = tlsClientCertKey;
            _resultValue.type = type;
            _resultValue.url = url;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
