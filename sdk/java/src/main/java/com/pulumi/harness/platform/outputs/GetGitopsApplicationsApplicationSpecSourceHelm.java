// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetGitopsApplicationsApplicationSpecSourceHelmFileParameter;
import com.pulumi.harness.platform.outputs.GetGitopsApplicationsApplicationSpecSourceHelmParameter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGitopsApplicationsApplicationSpecSourceHelm {
    /**
     * @return File parameters to the helm template.
     * 
     */
    private List<GetGitopsApplicationsApplicationSpecSourceHelmFileParameter> fileParameters;
    /**
     * @return List of helm parameters which are passed to the helm template command upon manifest generation.
     * 
     */
    private List<GetGitopsApplicationsApplicationSpecSourceHelmParameter> parameters;
    /**
     * @return Indicates if to pass credentials to all domains (helm&#39;s --pass-credentials)
     * 
     */
    private Boolean passCredentials;
    /**
     * @return Helm release name to use. If omitted it will use the GitOps application name.
     * 
     */
    private String releaseName;
    /**
     * @return List of helm value files to use when generating a template.
     * 
     */
    private List<String> valueFiles;
    /**
     * @return Helm values to be passed to helm template, typically defined as a block.
     * 
     */
    private String values;
    /**
     * @return Helm version to use for templating (either &#34;2&#34; or &#34;3&#34;)
     * 
     */
    private String version;

    private GetGitopsApplicationsApplicationSpecSourceHelm() {}
    /**
     * @return File parameters to the helm template.
     * 
     */
    public List<GetGitopsApplicationsApplicationSpecSourceHelmFileParameter> fileParameters() {
        return this.fileParameters;
    }
    /**
     * @return List of helm parameters which are passed to the helm template command upon manifest generation.
     * 
     */
    public List<GetGitopsApplicationsApplicationSpecSourceHelmParameter> parameters() {
        return this.parameters;
    }
    /**
     * @return Indicates if to pass credentials to all domains (helm&#39;s --pass-credentials)
     * 
     */
    public Boolean passCredentials() {
        return this.passCredentials;
    }
    /**
     * @return Helm release name to use. If omitted it will use the GitOps application name.
     * 
     */
    public String releaseName() {
        return this.releaseName;
    }
    /**
     * @return List of helm value files to use when generating a template.
     * 
     */
    public List<String> valueFiles() {
        return this.valueFiles;
    }
    /**
     * @return Helm values to be passed to helm template, typically defined as a block.
     * 
     */
    public String values() {
        return this.values;
    }
    /**
     * @return Helm version to use for templating (either &#34;2&#34; or &#34;3&#34;)
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGitopsApplicationsApplicationSpecSourceHelm defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetGitopsApplicationsApplicationSpecSourceHelmFileParameter> fileParameters;
        private List<GetGitopsApplicationsApplicationSpecSourceHelmParameter> parameters;
        private Boolean passCredentials;
        private String releaseName;
        private List<String> valueFiles;
        private String values;
        private String version;
        public Builder() {}
        public Builder(GetGitopsApplicationsApplicationSpecSourceHelm defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fileParameters = defaults.fileParameters;
    	      this.parameters = defaults.parameters;
    	      this.passCredentials = defaults.passCredentials;
    	      this.releaseName = defaults.releaseName;
    	      this.valueFiles = defaults.valueFiles;
    	      this.values = defaults.values;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder fileParameters(List<GetGitopsApplicationsApplicationSpecSourceHelmFileParameter> fileParameters) {
            if (fileParameters == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceHelm", "fileParameters");
            }
            this.fileParameters = fileParameters;
            return this;
        }
        public Builder fileParameters(GetGitopsApplicationsApplicationSpecSourceHelmFileParameter... fileParameters) {
            return fileParameters(List.of(fileParameters));
        }
        @CustomType.Setter
        public Builder parameters(List<GetGitopsApplicationsApplicationSpecSourceHelmParameter> parameters) {
            if (parameters == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceHelm", "parameters");
            }
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(GetGitopsApplicationsApplicationSpecSourceHelmParameter... parameters) {
            return parameters(List.of(parameters));
        }
        @CustomType.Setter
        public Builder passCredentials(Boolean passCredentials) {
            if (passCredentials == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceHelm", "passCredentials");
            }
            this.passCredentials = passCredentials;
            return this;
        }
        @CustomType.Setter
        public Builder releaseName(String releaseName) {
            if (releaseName == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceHelm", "releaseName");
            }
            this.releaseName = releaseName;
            return this;
        }
        @CustomType.Setter
        public Builder valueFiles(List<String> valueFiles) {
            if (valueFiles == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceHelm", "valueFiles");
            }
            this.valueFiles = valueFiles;
            return this;
        }
        public Builder valueFiles(String... valueFiles) {
            return valueFiles(List.of(valueFiles));
        }
        @CustomType.Setter
        public Builder values(String values) {
            if (values == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceHelm", "values");
            }
            this.values = values;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceHelm", "version");
            }
            this.version = version;
            return this;
        }
        public GetGitopsApplicationsApplicationSpecSourceHelm build() {
            final var _resultValue = new GetGitopsApplicationsApplicationSpecSourceHelm();
            _resultValue.fileParameters = fileParameters;
            _resultValue.parameters = parameters;
            _resultValue.passCredentials = passCredentials;
            _resultValue.releaseName = releaseName;
            _resultValue.valueFiles = valueFiles;
            _resultValue.values = values;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
