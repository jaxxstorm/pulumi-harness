// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GetGitopsRepoCredCredArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGitopsRepoCredArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetGitopsRepoCredArgs Empty = new GetGitopsRepoCredArgs();

    /**
     * account identifier of the Repository Credentials.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return account identifier of the Repository Credentials.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * agent identifier of the Repository Credentials.
     * 
     */
    @Import(name="agentId", required=true)
    private Output<String> agentId;

    /**
     * @return agent identifier of the Repository Credentials.
     * 
     */
    public Output<String> agentId() {
        return this.agentId;
    }

    /**
     * credential details.
     * 
     */
    @Import(name="creds")
    private @Nullable Output<List<GetGitopsRepoCredCredArgs>> creds;

    /**
     * @return credential details.
     * 
     */
    public Optional<Output<List<GetGitopsRepoCredCredArgs>>> creds() {
        return Optional.ofNullable(this.creds);
    }

    /**
     * Identifier of the Repository Credentials.
     * 
     */
    @Import(name="identifier", required=true)
    private Output<String> identifier;

    /**
     * @return Identifier of the Repository Credentials.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }

    /**
     * Organization identifier of the Repository Credential.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Organization identifier of the Repository Credential.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Project identifier of the Repository Credential.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Project identifier of the Repository Credential.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * if the Repository credential should be upserted.
     * 
     */
    @Import(name="upsert")
    private @Nullable Output<Boolean> upsert;

    /**
     * @return if the Repository credential should be upserted.
     * 
     */
    public Optional<Output<Boolean>> upsert() {
        return Optional.ofNullable(this.upsert);
    }

    private GetGitopsRepoCredArgs() {}

    private GetGitopsRepoCredArgs(GetGitopsRepoCredArgs $) {
        this.accountId = $.accountId;
        this.agentId = $.agentId;
        this.creds = $.creds;
        this.identifier = $.identifier;
        this.orgId = $.orgId;
        this.projectId = $.projectId;
        this.upsert = $.upsert;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGitopsRepoCredArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGitopsRepoCredArgs $;

        public Builder() {
            $ = new GetGitopsRepoCredArgs();
        }

        public Builder(GetGitopsRepoCredArgs defaults) {
            $ = new GetGitopsRepoCredArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId account identifier of the Repository Credentials.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId account identifier of the Repository Credentials.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param agentId agent identifier of the Repository Credentials.
         * 
         * @return builder
         * 
         */
        public Builder agentId(Output<String> agentId) {
            $.agentId = agentId;
            return this;
        }

        /**
         * @param agentId agent identifier of the Repository Credentials.
         * 
         * @return builder
         * 
         */
        public Builder agentId(String agentId) {
            return agentId(Output.of(agentId));
        }

        /**
         * @param creds credential details.
         * 
         * @return builder
         * 
         */
        public Builder creds(@Nullable Output<List<GetGitopsRepoCredCredArgs>> creds) {
            $.creds = creds;
            return this;
        }

        /**
         * @param creds credential details.
         * 
         * @return builder
         * 
         */
        public Builder creds(List<GetGitopsRepoCredCredArgs> creds) {
            return creds(Output.of(creds));
        }

        /**
         * @param creds credential details.
         * 
         * @return builder
         * 
         */
        public Builder creds(GetGitopsRepoCredCredArgs... creds) {
            return creds(List.of(creds));
        }

        /**
         * @param identifier Identifier of the Repository Credentials.
         * 
         * @return builder
         * 
         */
        public Builder identifier(Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier Identifier of the Repository Credentials.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        /**
         * @param orgId Organization identifier of the Repository Credential.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Organization identifier of the Repository Credential.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param projectId Project identifier of the Repository Credential.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project identifier of the Repository Credential.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param upsert if the Repository credential should be upserted.
         * 
         * @return builder
         * 
         */
        public Builder upsert(@Nullable Output<Boolean> upsert) {
            $.upsert = upsert;
            return this;
        }

        /**
         * @param upsert if the Repository credential should be upserted.
         * 
         * @return builder
         * 
         */
        public Builder upsert(Boolean upsert) {
            return upsert(Output.of(upsert));
        }

        public GetGitopsRepoCredArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("GetGitopsRepoCredArgs", "accountId");
            }
            if ($.agentId == null) {
                throw new MissingRequiredPropertyException("GetGitopsRepoCredArgs", "agentId");
            }
            if ($.identifier == null) {
                throw new MissingRequiredPropertyException("GetGitopsRepoCredArgs", "identifier");
            }
            return $;
        }
    }

}
