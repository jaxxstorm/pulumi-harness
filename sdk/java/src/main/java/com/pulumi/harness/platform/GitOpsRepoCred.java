// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.GitOpsRepoCredArgs;
import com.pulumi.harness.platform.inputs.GitOpsRepoCredState;
import com.pulumi.harness.platform.outputs.GitOpsRepoCredCred;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource for creating a Harness Gitops Repositories Credentials.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.harness.platform.GitOpsRepoCred;
 * import com.pulumi.harness.platform.GitOpsRepoCredArgs;
 * import com.pulumi.harness.platform.inputs.GitOpsRepoCredCredArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new GitOpsRepoCred("test", GitOpsRepoCredArgs.builder()
 *             .identifier("identifier")
 *             .accountId("account_id")
 *             .agentId("agent_id")
 *             .projectId("project_id")
 *             .orgId("org_id")
 *             .creds(GitOpsRepoCredCredArgs.builder()
 *                 .type("git")
 *                 .url("github.com")
 *                 .sshPrivateKey("yoursshprivatekey")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Import a Account level Gitops Repository Credentials
 * 
 * ```sh
 * $ pulumi import harness:platform/gitOpsRepoCred:GitOpsRepoCred example &lt;agent_id&gt;/&lt;repocred_id&gt;
 * ```
 * 
 * Import a Project level Gitops Repository Credentials
 * 
 * ```sh
 * $ pulumi import harness:platform/gitOpsRepoCred:GitOpsRepoCred example &lt;organization_id&gt;/&lt;project_id&gt;/&lt;agent_id&gt;/&lt;repocred_id&gt;
 * ```
 * 
 */
@ResourceType(type="harness:platform/gitOpsRepoCred:GitOpsRepoCred")
public class GitOpsRepoCred extends com.pulumi.resources.CustomResource {
    /**
     * Account identifier of the Repository Credential.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return Account identifier of the Repository Credential.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * Agent identifier of the Repository Credential.
     * 
     */
    @Export(name="agentId", refs={String.class}, tree="[0]")
    private Output<String> agentId;

    /**
     * @return Agent identifier of the Repository Credential.
     * 
     */
    public Output<String> agentId() {
        return this.agentId;
    }
    /**
     * credential details.
     * 
     */
    @Export(name="creds", refs={List.class,GitOpsRepoCredCred.class}, tree="[0,1]")
    private Output<List<GitOpsRepoCredCred>> creds;

    /**
     * @return credential details.
     * 
     */
    public Output<List<GitOpsRepoCredCred>> creds() {
        return this.creds;
    }
    /**
     * Identifier of the Repository Credential.
     * 
     */
    @Export(name="identifier", refs={String.class}, tree="[0]")
    private Output<String> identifier;

    /**
     * @return Identifier of the Repository Credential.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * Organization identifier of the Repository Credential.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> orgId;

    /**
     * @return Organization identifier of the Repository Credential.
     * 
     */
    public Output<Optional<String>> orgId() {
        return Codegen.optional(this.orgId);
    }
    /**
     * Project identifier of the Repository Credential.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return Project identifier of the Repository Credential.
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    /**
     * if the Repository credential should be upserted.
     * 
     */
    @Export(name="upsert", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> upsert;

    /**
     * @return if the Repository credential should be upserted.
     * 
     */
    public Output<Optional<Boolean>> upsert() {
        return Codegen.optional(this.upsert);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GitOpsRepoCred(String name) {
        this(name, GitOpsRepoCredArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GitOpsRepoCred(String name, GitOpsRepoCredArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GitOpsRepoCred(String name, GitOpsRepoCredArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/gitOpsRepoCred:GitOpsRepoCred", name, args == null ? GitOpsRepoCredArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private GitOpsRepoCred(String name, Output<String> id, @Nullable GitOpsRepoCredState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/gitOpsRepoCred:GitOpsRepoCred", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GitOpsRepoCred get(String name, Output<String> id, @Nullable GitOpsRepoCredState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GitOpsRepoCred(name, id, state, options);
    }
}
