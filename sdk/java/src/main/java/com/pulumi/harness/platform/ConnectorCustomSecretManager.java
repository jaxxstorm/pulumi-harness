// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.harness.Utilities;
import com.pulumi.harness.platform.ConnectorCustomSecretManagerArgs;
import com.pulumi.harness.platform.inputs.ConnectorCustomSecretManagerState;
import com.pulumi.harness.platform.outputs.ConnectorCustomSecretManagerTemplateInput;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ## Import
 * 
 * Import account level custom secret manager connector
 * 
 * ```sh
 * $ pulumi import harness:platform/connectorCustomSecretManager:ConnectorCustomSecretManager example &lt;connector_id&gt;
 * ```
 * 
 * Import org level custom secret manager connector
 * 
 * ```sh
 * $ pulumi import harness:platform/connectorCustomSecretManager:ConnectorCustomSecretManager example &lt;ord_id&gt;/&lt;connector_id&gt;
 * ```
 * 
 * Import project level custom secret manager connector
 * 
 * ```sh
 * $ pulumi import harness:platform/connectorCustomSecretManager:ConnectorCustomSecretManager example &lt;org_id&gt;/&lt;project_id&gt;/&lt;connector_id&gt;
 * ```
 * 
 */
@ResourceType(type="harness:platform/connectorCustomSecretManager:ConnectorCustomSecretManager")
public class ConnectorCustomSecretManager extends com.pulumi.resources.CustomResource {
    /**
     * Tags to filter delegates for connection.
     * 
     */
    @Export(name="delegateSelectors", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> delegateSelectors;

    /**
     * @return Tags to filter delegates for connection.
     * 
     */
    public Output<Optional<List<String>>> delegateSelectors() {
        return Codegen.optional(this.delegateSelectors);
    }
    /**
     * : A brief description of what the resource does or is used for.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return : A brief description of what the resource does or is used for.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * : Unique identifier of the resource.
     * 
     */
    @Export(name="identifier", refs={String.class}, tree="[0]")
    private Output<String> identifier;

    /**
     * @return : Unique identifier of the resource.
     * 
     */
    public Output<String> identifier() {
        return this.identifier;
    }
    /**
     * : Name of the resource.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return : Name of the resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * : Specifies whether the secrets manager runs on a Harness delegate.
     * 
     */
    @Export(name="onDelegate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> onDelegate;

    /**
     * @return : Specifies whether the secrets manager runs on a Harness delegate.
     * 
     */
    public Output<Optional<Boolean>> onDelegate() {
        return Codegen.optional(this.onDelegate);
    }
    /**
     * Unique identifier of the organization.
     * 
     */
    @Export(name="orgId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> orgId;

    /**
     * @return Unique identifier of the organization.
     * 
     */
    public Output<Optional<String>> orgId() {
        return Codegen.optional(this.orgId);
    }
    /**
     * Unique identifier of the project.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return Unique identifier of the project.
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    /**
     * : Reference to the Harness secret containing SSH credentials for the target host. Required if `on_delegate` is set to false.
     * 
     */
    @Export(name="sshSecretRef", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sshSecretRef;

    /**
     * @return : Reference to the Harness secret containing SSH credentials for the target host. Required if `on_delegate` is set to false.
     * 
     */
    public Output<Optional<String>> sshSecretRef() {
        return Codegen.optional(this.sshSecretRef);
    }
    /**
     * : Tags to associate with the resource.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return : Tags to associate with the resource.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * : Host address where secrets will be managed. Required if `on_delegate` is set to false.
     * 
     */
    @Export(name="targetHost", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> targetHost;

    /**
     * @return : Host address where secrets will be managed. Required if `on_delegate` is set to false.
     * 
     */
    public Output<Optional<String>> targetHost() {
        return Codegen.optional(this.targetHost);
    }
    @Export(name="templateInputs", refs={List.class,ConnectorCustomSecretManagerTemplateInput.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ConnectorCustomSecretManagerTemplateInput>> templateInputs;

    public Output<Optional<List<ConnectorCustomSecretManagerTemplateInput>>> templateInputs() {
        return Codegen.optional(this.templateInputs);
    }
    /**
     * : Reference to the template used for managing secrets.
     * 
     */
    @Export(name="templateRef", refs={String.class}, tree="[0]")
    private Output<String> templateRef;

    /**
     * @return : Reference to the template used for managing secrets.
     * 
     */
    public Output<String> templateRef() {
        return this.templateRef;
    }
    /**
     * : Timeout in seconds for secrets management operations.
     * 
     */
    @Export(name="timeout", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> timeout;

    /**
     * @return : Timeout in seconds for secrets management operations.
     * 
     */
    public Output<Optional<Integer>> timeout() {
        return Codegen.optional(this.timeout);
    }
    /**
     * : Type of the custom secrets manager, typically set to `CustomSecretManager`.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> type;

    /**
     * @return : Type of the custom secrets manager, typically set to `CustomSecretManager`.
     * 
     */
    public Output<Optional<String>> type() {
        return Codegen.optional(this.type);
    }
    /**
     * : Version identifier of the secrets management template.
     * 
     */
    @Export(name="versionLabel", refs={String.class}, tree="[0]")
    private Output<String> versionLabel;

    /**
     * @return : Version identifier of the secrets management template.
     * 
     */
    public Output<String> versionLabel() {
        return this.versionLabel;
    }
    /**
     * : Directory path on the target host where secrets management tasks are performed. Required if `on_delegate` is set to false.
     * 
     */
    @Export(name="workingDirectory", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> workingDirectory;

    /**
     * @return : Directory path on the target host where secrets management tasks are performed. Required if `on_delegate` is set to false.
     * 
     */
    public Output<Optional<String>> workingDirectory() {
        return Codegen.optional(this.workingDirectory);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ConnectorCustomSecretManager(java.lang.String name) {
        this(name, ConnectorCustomSecretManagerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ConnectorCustomSecretManager(java.lang.String name, ConnectorCustomSecretManagerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ConnectorCustomSecretManager(java.lang.String name, ConnectorCustomSecretManagerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/connectorCustomSecretManager:ConnectorCustomSecretManager", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ConnectorCustomSecretManager(java.lang.String name, Output<java.lang.String> id, @Nullable ConnectorCustomSecretManagerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("harness:platform/connectorCustomSecretManager:ConnectorCustomSecretManager", name, state, makeResourceOptions(options, id), false);
    }

    private static ConnectorCustomSecretManagerArgs makeArgs(ConnectorCustomSecretManagerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ConnectorCustomSecretManagerArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/pulumi")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ConnectorCustomSecretManager get(java.lang.String name, Output<java.lang.String> id, @Nullable ConnectorCustomSecretManagerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ConnectorCustomSecretManager(name, id, state, options);
    }
}
