// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.outputs.GetGitopsApplicationsApplication;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGitopsApplicationsResult {
    /**
     * @return Account identifier of the GitOps application.
     * 
     */
    private String accountId;
    /**
     * @return Agent identifier of the GitOps application.
     * 
     */
    private String agentId;
    /**
     * @return Definition of the GitOps application resource.
     * 
     */
    private @Nullable List<GetGitopsApplicationsApplication> applications;
    /**
     * @return Cluster identifier of the GitOps application.
     * 
     */
    private @Nullable String clusterId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Identifier of the GitOps application.
     * 
     */
    private @Nullable String identifier;
    /**
     * @return Kind of the GitOps application.
     * 
     */
    private @Nullable String kind;
    /**
     * @return Name of the GitOps application.
     * 
     */
    private String name;
    /**
     * @return Options to remove existing finalizers to delete the GitOps application.
     * 
     */
    private @Nullable Boolean optionsRemoveExistingFinalizers;
    /**
     * @return Organization identifier of the GitOps application.
     * 
     */
    private String orgId;
    /**
     * @return Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the &#39;default&#39; project.
     * 
     */
    private @Nullable String project;
    /**
     * @return Project identifier of the GitOps application.
     * 
     */
    private String projectId;
    /**
     * @return Project names to filter the corresponding GitOps applications.
     * 
     */
    private @Nullable String queryProject;
    /**
     * @return Forces the GitOps application to reconcile when set to true.
     * 
     */
    private @Nullable String queryRefresh;
    /**
     * @return Repo URL to restrict returned list applications.
     * 
     */
    private @Nullable String queryRepo;
    /**
     * @return Shows modifications after a version that is specified with a watch call.
     * 
     */
    private @Nullable String queryResourceVersion;
    /**
     * @return Filters GitOps applications corresponding to the labels.
     * 
     */
    private @Nullable String querySelector;
    /**
     * @return Repository identifier of the GitOps application.
     * 
     */
    private String repoId;
    /**
     * @return Request cascade to delete the GitOps application.
     * 
     */
    private @Nullable Boolean requestCascade;
    /**
     * @return Request name to delete the GitOps application.
     * 
     */
    private @Nullable String requestName;
    /**
     * @return Request propagation policy to delete the GitOps application.
     * 
     */
    private @Nullable String requestPropagationPolicy;
    /**
     * @return Indicates if the GitOps application should be updated if existing and inserted if not.
     * 
     */
    private @Nullable Boolean upsert;
    /**
     * @return Indicates if the GitOps application has to be validated.
     * 
     */
    private @Nullable Boolean validate;

    private GetGitopsApplicationsResult() {}
    /**
     * @return Account identifier of the GitOps application.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Agent identifier of the GitOps application.
     * 
     */
    public String agentId() {
        return this.agentId;
    }
    /**
     * @return Definition of the GitOps application resource.
     * 
     */
    public List<GetGitopsApplicationsApplication> applications() {
        return this.applications == null ? List.of() : this.applications;
    }
    /**
     * @return Cluster identifier of the GitOps application.
     * 
     */
    public Optional<String> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Identifier of the GitOps application.
     * 
     */
    public Optional<String> identifier() {
        return Optional.ofNullable(this.identifier);
    }
    /**
     * @return Kind of the GitOps application.
     * 
     */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }
    /**
     * @return Name of the GitOps application.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Options to remove existing finalizers to delete the GitOps application.
     * 
     */
    public Optional<Boolean> optionsRemoveExistingFinalizers() {
        return Optional.ofNullable(this.optionsRemoveExistingFinalizers);
    }
    /**
     * @return Organization identifier of the GitOps application.
     * 
     */
    public String orgId() {
        return this.orgId;
    }
    /**
     * @return Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the &#39;default&#39; project.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    /**
     * @return Project identifier of the GitOps application.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Project names to filter the corresponding GitOps applications.
     * 
     */
    public Optional<String> queryProject() {
        return Optional.ofNullable(this.queryProject);
    }
    /**
     * @return Forces the GitOps application to reconcile when set to true.
     * 
     */
    public Optional<String> queryRefresh() {
        return Optional.ofNullable(this.queryRefresh);
    }
    /**
     * @return Repo URL to restrict returned list applications.
     * 
     */
    public Optional<String> queryRepo() {
        return Optional.ofNullable(this.queryRepo);
    }
    /**
     * @return Shows modifications after a version that is specified with a watch call.
     * 
     */
    public Optional<String> queryResourceVersion() {
        return Optional.ofNullable(this.queryResourceVersion);
    }
    /**
     * @return Filters GitOps applications corresponding to the labels.
     * 
     */
    public Optional<String> querySelector() {
        return Optional.ofNullable(this.querySelector);
    }
    /**
     * @return Repository identifier of the GitOps application.
     * 
     */
    public String repoId() {
        return this.repoId;
    }
    /**
     * @return Request cascade to delete the GitOps application.
     * 
     */
    public Optional<Boolean> requestCascade() {
        return Optional.ofNullable(this.requestCascade);
    }
    /**
     * @return Request name to delete the GitOps application.
     * 
     */
    public Optional<String> requestName() {
        return Optional.ofNullable(this.requestName);
    }
    /**
     * @return Request propagation policy to delete the GitOps application.
     * 
     */
    public Optional<String> requestPropagationPolicy() {
        return Optional.ofNullable(this.requestPropagationPolicy);
    }
    /**
     * @return Indicates if the GitOps application should be updated if existing and inserted if not.
     * 
     */
    public Optional<Boolean> upsert() {
        return Optional.ofNullable(this.upsert);
    }
    /**
     * @return Indicates if the GitOps application has to be validated.
     * 
     */
    public Optional<Boolean> validate() {
        return Optional.ofNullable(this.validate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGitopsApplicationsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String agentId;
        private @Nullable List<GetGitopsApplicationsApplication> applications;
        private @Nullable String clusterId;
        private String id;
        private @Nullable String identifier;
        private @Nullable String kind;
        private String name;
        private @Nullable Boolean optionsRemoveExistingFinalizers;
        private String orgId;
        private @Nullable String project;
        private String projectId;
        private @Nullable String queryProject;
        private @Nullable String queryRefresh;
        private @Nullable String queryRepo;
        private @Nullable String queryResourceVersion;
        private @Nullable String querySelector;
        private String repoId;
        private @Nullable Boolean requestCascade;
        private @Nullable String requestName;
        private @Nullable String requestPropagationPolicy;
        private @Nullable Boolean upsert;
        private @Nullable Boolean validate;
        public Builder() {}
        public Builder(GetGitopsApplicationsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.agentId = defaults.agentId;
    	      this.applications = defaults.applications;
    	      this.clusterId = defaults.clusterId;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.optionsRemoveExistingFinalizers = defaults.optionsRemoveExistingFinalizers;
    	      this.orgId = defaults.orgId;
    	      this.project = defaults.project;
    	      this.projectId = defaults.projectId;
    	      this.queryProject = defaults.queryProject;
    	      this.queryRefresh = defaults.queryRefresh;
    	      this.queryRepo = defaults.queryRepo;
    	      this.queryResourceVersion = defaults.queryResourceVersion;
    	      this.querySelector = defaults.querySelector;
    	      this.repoId = defaults.repoId;
    	      this.requestCascade = defaults.requestCascade;
    	      this.requestName = defaults.requestName;
    	      this.requestPropagationPolicy = defaults.requestPropagationPolicy;
    	      this.upsert = defaults.upsert;
    	      this.validate = defaults.validate;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder agentId(String agentId) {
            if (agentId == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsResult", "agentId");
            }
            this.agentId = agentId;
            return this;
        }
        @CustomType.Setter
        public Builder applications(@Nullable List<GetGitopsApplicationsApplication> applications) {

            this.applications = applications;
            return this;
        }
        public Builder applications(GetGitopsApplicationsApplication... applications) {
            return applications(List.of(applications));
        }
        @CustomType.Setter
        public Builder clusterId(@Nullable String clusterId) {

            this.clusterId = clusterId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(@Nullable String identifier) {

            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder kind(@Nullable String kind) {

            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder optionsRemoveExistingFinalizers(@Nullable Boolean optionsRemoveExistingFinalizers) {

            this.optionsRemoveExistingFinalizers = optionsRemoveExistingFinalizers;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            if (orgId == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsResult", "orgId");
            }
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder queryProject(@Nullable String queryProject) {

            this.queryProject = queryProject;
            return this;
        }
        @CustomType.Setter
        public Builder queryRefresh(@Nullable String queryRefresh) {

            this.queryRefresh = queryRefresh;
            return this;
        }
        @CustomType.Setter
        public Builder queryRepo(@Nullable String queryRepo) {

            this.queryRepo = queryRepo;
            return this;
        }
        @CustomType.Setter
        public Builder queryResourceVersion(@Nullable String queryResourceVersion) {

            this.queryResourceVersion = queryResourceVersion;
            return this;
        }
        @CustomType.Setter
        public Builder querySelector(@Nullable String querySelector) {

            this.querySelector = querySelector;
            return this;
        }
        @CustomType.Setter
        public Builder repoId(String repoId) {
            if (repoId == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsResult", "repoId");
            }
            this.repoId = repoId;
            return this;
        }
        @CustomType.Setter
        public Builder requestCascade(@Nullable Boolean requestCascade) {

            this.requestCascade = requestCascade;
            return this;
        }
        @CustomType.Setter
        public Builder requestName(@Nullable String requestName) {

            this.requestName = requestName;
            return this;
        }
        @CustomType.Setter
        public Builder requestPropagationPolicy(@Nullable String requestPropagationPolicy) {

            this.requestPropagationPolicy = requestPropagationPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder upsert(@Nullable Boolean upsert) {

            this.upsert = upsert;
            return this;
        }
        @CustomType.Setter
        public Builder validate(@Nullable Boolean validate) {

            this.validate = validate;
            return this;
        }
        public GetGitopsApplicationsResult build() {
            final var _resultValue = new GetGitopsApplicationsResult();
            _resultValue.accountId = accountId;
            _resultValue.agentId = agentId;
            _resultValue.applications = applications;
            _resultValue.clusterId = clusterId;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.kind = kind;
            _resultValue.name = name;
            _resultValue.optionsRemoveExistingFinalizers = optionsRemoveExistingFinalizers;
            _resultValue.orgId = orgId;
            _resultValue.project = project;
            _resultValue.projectId = projectId;
            _resultValue.queryProject = queryProject;
            _resultValue.queryRefresh = queryRefresh;
            _resultValue.queryRepo = queryRepo;
            _resultValue.queryResourceVersion = queryResourceVersion;
            _resultValue.querySelector = querySelector;
            _resultValue.repoId = repoId;
            _resultValue.requestCascade = requestCascade;
            _resultValue.requestName = requestName;
            _resultValue.requestPropagationPolicy = requestPropagationPolicy;
            _resultValue.upsert = upsert;
            _resultValue.validate = validate;
            return _resultValue;
        }
    }
}
