// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.harness.platform.inputs.GetGitopsApplicationsApplicationSpecSourceHelmFileParameter;
import com.pulumi.harness.platform.inputs.GetGitopsApplicationsApplicationSpecSourceHelmParameter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGitopsApplicationsApplicationSpecSourceHelm extends com.pulumi.resources.InvokeArgs {

    public static final GetGitopsApplicationsApplicationSpecSourceHelm Empty = new GetGitopsApplicationsApplicationSpecSourceHelm();

    /**
     * File parameters to the helm template.
     * 
     */
    @Import(name="fileParameters")
    private @Nullable List<GetGitopsApplicationsApplicationSpecSourceHelmFileParameter> fileParameters;

    /**
     * @return File parameters to the helm template.
     * 
     */
    public Optional<List<GetGitopsApplicationsApplicationSpecSourceHelmFileParameter>> fileParameters() {
        return Optional.ofNullable(this.fileParameters);
    }

    /**
     * List of helm parameters which are passed to the helm template command upon manifest generation.
     * 
     */
    @Import(name="parameters")
    private @Nullable List<GetGitopsApplicationsApplicationSpecSourceHelmParameter> parameters;

    /**
     * @return List of helm parameters which are passed to the helm template command upon manifest generation.
     * 
     */
    public Optional<List<GetGitopsApplicationsApplicationSpecSourceHelmParameter>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Indicates if to pass credentials to all domains (helm&#39;s --pass-credentials)
     * 
     */
    @Import(name="passCredentials")
    private @Nullable Boolean passCredentials;

    /**
     * @return Indicates if to pass credentials to all domains (helm&#39;s --pass-credentials)
     * 
     */
    public Optional<Boolean> passCredentials() {
        return Optional.ofNullable(this.passCredentials);
    }

    /**
     * Helm release name to use. If omitted it will use the GitOps application name.
     * 
     */
    @Import(name="releaseName")
    private @Nullable String releaseName;

    /**
     * @return Helm release name to use. If omitted it will use the GitOps application name.
     * 
     */
    public Optional<String> releaseName() {
        return Optional.ofNullable(this.releaseName);
    }

    /**
     * List of helm value files to use when generating a template.
     * 
     */
    @Import(name="valueFiles")
    private @Nullable List<String> valueFiles;

    /**
     * @return List of helm value files to use when generating a template.
     * 
     */
    public Optional<List<String>> valueFiles() {
        return Optional.ofNullable(this.valueFiles);
    }

    /**
     * Helm values to be passed to helm template, typically defined as a block.
     * 
     */
    @Import(name="values")
    private @Nullable String values;

    /**
     * @return Helm values to be passed to helm template, typically defined as a block.
     * 
     */
    public Optional<String> values() {
        return Optional.ofNullable(this.values);
    }

    /**
     * Helm version to use for templating (either &#34;2&#34; or &#34;3&#34;)
     * 
     */
    @Import(name="version")
    private @Nullable String version;

    /**
     * @return Helm version to use for templating (either &#34;2&#34; or &#34;3&#34;)
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    private GetGitopsApplicationsApplicationSpecSourceHelm() {}

    private GetGitopsApplicationsApplicationSpecSourceHelm(GetGitopsApplicationsApplicationSpecSourceHelm $) {
        this.fileParameters = $.fileParameters;
        this.parameters = $.parameters;
        this.passCredentials = $.passCredentials;
        this.releaseName = $.releaseName;
        this.valueFiles = $.valueFiles;
        this.values = $.values;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGitopsApplicationsApplicationSpecSourceHelm defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGitopsApplicationsApplicationSpecSourceHelm $;

        public Builder() {
            $ = new GetGitopsApplicationsApplicationSpecSourceHelm();
        }

        public Builder(GetGitopsApplicationsApplicationSpecSourceHelm defaults) {
            $ = new GetGitopsApplicationsApplicationSpecSourceHelm(Objects.requireNonNull(defaults));
        }

        /**
         * @param fileParameters File parameters to the helm template.
         * 
         * @return builder
         * 
         */
        public Builder fileParameters(@Nullable List<GetGitopsApplicationsApplicationSpecSourceHelmFileParameter> fileParameters) {
            $.fileParameters = fileParameters;
            return this;
        }

        /**
         * @param fileParameters File parameters to the helm template.
         * 
         * @return builder
         * 
         */
        public Builder fileParameters(GetGitopsApplicationsApplicationSpecSourceHelmFileParameter... fileParameters) {
            return fileParameters(List.of(fileParameters));
        }

        /**
         * @param parameters List of helm parameters which are passed to the helm template command upon manifest generation.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable List<GetGitopsApplicationsApplicationSpecSourceHelmParameter> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters List of helm parameters which are passed to the helm template command upon manifest generation.
         * 
         * @return builder
         * 
         */
        public Builder parameters(GetGitopsApplicationsApplicationSpecSourceHelmParameter... parameters) {
            return parameters(List.of(parameters));
        }

        /**
         * @param passCredentials Indicates if to pass credentials to all domains (helm&#39;s --pass-credentials)
         * 
         * @return builder
         * 
         */
        public Builder passCredentials(@Nullable Boolean passCredentials) {
            $.passCredentials = passCredentials;
            return this;
        }

        /**
         * @param releaseName Helm release name to use. If omitted it will use the GitOps application name.
         * 
         * @return builder
         * 
         */
        public Builder releaseName(@Nullable String releaseName) {
            $.releaseName = releaseName;
            return this;
        }

        /**
         * @param valueFiles List of helm value files to use when generating a template.
         * 
         * @return builder
         * 
         */
        public Builder valueFiles(@Nullable List<String> valueFiles) {
            $.valueFiles = valueFiles;
            return this;
        }

        /**
         * @param valueFiles List of helm value files to use when generating a template.
         * 
         * @return builder
         * 
         */
        public Builder valueFiles(String... valueFiles) {
            return valueFiles(List.of(valueFiles));
        }

        /**
         * @param values Helm values to be passed to helm template, typically defined as a block.
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable String values) {
            $.values = values;
            return this;
        }

        /**
         * @param version Helm version to use for templating (either &#34;2&#34; or &#34;3&#34;)
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable String version) {
            $.version = version;
            return this;
        }

        public GetGitopsApplicationsApplicationSpecSourceHelm build() {
            return $;
        }
    }

}
