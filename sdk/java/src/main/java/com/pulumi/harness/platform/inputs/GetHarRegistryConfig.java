// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.harness.platform.inputs.GetHarRegistryConfigAuth;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetHarRegistryConfig extends com.pulumi.resources.InvokeArgs {

    public static final GetHarRegistryConfig Empty = new GetHarRegistryConfig();

    /**
     * Authentication configuration for UPSTREAM type
     * 
     */
    @Import(name="auths")
    private @Nullable List<GetHarRegistryConfigAuth> auths;

    /**
     * @return Authentication configuration for UPSTREAM type
     * 
     */
    public Optional<List<GetHarRegistryConfigAuth>> auths() {
        return Optional.ofNullable(this.auths);
    }

    /**
     * Source of the upstream
     * 
     */
    @Import(name="source")
    private @Nullable String source;

    /**
     * @return Source of the upstream
     * 
     */
    public Optional<String> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Type of registry (VIRTUAL, UPSTREAM)
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Type of registry (VIRTUAL, UPSTREAM)
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * URL of the upstream
     * 
     */
    @Import(name="url")
    private @Nullable String url;

    /**
     * @return URL of the upstream
     * 
     */
    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }

    private GetHarRegistryConfig() {}

    private GetHarRegistryConfig(GetHarRegistryConfig $) {
        this.auths = $.auths;
        this.source = $.source;
        this.type = $.type;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetHarRegistryConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetHarRegistryConfig $;

        public Builder() {
            $ = new GetHarRegistryConfig();
        }

        public Builder(GetHarRegistryConfig defaults) {
            $ = new GetHarRegistryConfig(Objects.requireNonNull(defaults));
        }

        /**
         * @param auths Authentication configuration for UPSTREAM type
         * 
         * @return builder
         * 
         */
        public Builder auths(@Nullable List<GetHarRegistryConfigAuth> auths) {
            $.auths = auths;
            return this;
        }

        /**
         * @param auths Authentication configuration for UPSTREAM type
         * 
         * @return builder
         * 
         */
        public Builder auths(GetHarRegistryConfigAuth... auths) {
            return auths(List.of(auths));
        }

        /**
         * @param source Source of the upstream
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable String source) {
            $.source = source;
            return this;
        }

        /**
         * @param type Type of registry (VIRTUAL, UPSTREAM)
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param url URL of the upstream
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable String url) {
            $.url = url;
            return this;
        }

        public GetHarRegistryConfig build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GetHarRegistryConfig", "type");
            }
            return $;
        }
    }

}
