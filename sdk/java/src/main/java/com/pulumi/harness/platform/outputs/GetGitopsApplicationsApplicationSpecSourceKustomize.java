// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.harness.platform.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetGitopsApplicationsApplicationSpecSourceKustomize {
    /**
     * @return List of additional annotations to add to rendered manifests.
     * 
     */
    private Map<String,String> commonAnnotations;
    /**
     * @return List of additional labels to add to rendered manifests.
     * 
     */
    private Map<String,String> commonLabels;
    /**
     * @return Indicates if to force applying common annotations to resources for kustomize apps.
     * 
     */
    private Boolean forceCommonAnnotations;
    /**
     * @return Indicates if to force apply common labels to resources for kustomize apps.
     * 
     */
    private Boolean forceCommonLabels;
    /**
     * @return List of kustomize image override specifications.
     * 
     */
    private List<String> images;
    /**
     * @return Prefix prepended to resources for kustomize apps.
     * 
     */
    private String namePrefix;
    /**
     * @return Suffix appended to resources for kustomize apps.
     * 
     */
    private String nameSuffix;
    /**
     * @return Version of kustomize to use for rendering manifests.
     * 
     */
    private String version;

    private GetGitopsApplicationsApplicationSpecSourceKustomize() {}
    /**
     * @return List of additional annotations to add to rendered manifests.
     * 
     */
    public Map<String,String> commonAnnotations() {
        return this.commonAnnotations;
    }
    /**
     * @return List of additional labels to add to rendered manifests.
     * 
     */
    public Map<String,String> commonLabels() {
        return this.commonLabels;
    }
    /**
     * @return Indicates if to force applying common annotations to resources for kustomize apps.
     * 
     */
    public Boolean forceCommonAnnotations() {
        return this.forceCommonAnnotations;
    }
    /**
     * @return Indicates if to force apply common labels to resources for kustomize apps.
     * 
     */
    public Boolean forceCommonLabels() {
        return this.forceCommonLabels;
    }
    /**
     * @return List of kustomize image override specifications.
     * 
     */
    public List<String> images() {
        return this.images;
    }
    /**
     * @return Prefix prepended to resources for kustomize apps.
     * 
     */
    public String namePrefix() {
        return this.namePrefix;
    }
    /**
     * @return Suffix appended to resources for kustomize apps.
     * 
     */
    public String nameSuffix() {
        return this.nameSuffix;
    }
    /**
     * @return Version of kustomize to use for rendering manifests.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGitopsApplicationsApplicationSpecSourceKustomize defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> commonAnnotations;
        private Map<String,String> commonLabels;
        private Boolean forceCommonAnnotations;
        private Boolean forceCommonLabels;
        private List<String> images;
        private String namePrefix;
        private String nameSuffix;
        private String version;
        public Builder() {}
        public Builder(GetGitopsApplicationsApplicationSpecSourceKustomize defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commonAnnotations = defaults.commonAnnotations;
    	      this.commonLabels = defaults.commonLabels;
    	      this.forceCommonAnnotations = defaults.forceCommonAnnotations;
    	      this.forceCommonLabels = defaults.forceCommonLabels;
    	      this.images = defaults.images;
    	      this.namePrefix = defaults.namePrefix;
    	      this.nameSuffix = defaults.nameSuffix;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder commonAnnotations(Map<String,String> commonAnnotations) {
            if (commonAnnotations == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceKustomize", "commonAnnotations");
            }
            this.commonAnnotations = commonAnnotations;
            return this;
        }
        @CustomType.Setter
        public Builder commonLabels(Map<String,String> commonLabels) {
            if (commonLabels == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceKustomize", "commonLabels");
            }
            this.commonLabels = commonLabels;
            return this;
        }
        @CustomType.Setter
        public Builder forceCommonAnnotations(Boolean forceCommonAnnotations) {
            if (forceCommonAnnotations == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceKustomize", "forceCommonAnnotations");
            }
            this.forceCommonAnnotations = forceCommonAnnotations;
            return this;
        }
        @CustomType.Setter
        public Builder forceCommonLabels(Boolean forceCommonLabels) {
            if (forceCommonLabels == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceKustomize", "forceCommonLabels");
            }
            this.forceCommonLabels = forceCommonLabels;
            return this;
        }
        @CustomType.Setter
        public Builder images(List<String> images) {
            if (images == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceKustomize", "images");
            }
            this.images = images;
            return this;
        }
        public Builder images(String... images) {
            return images(List.of(images));
        }
        @CustomType.Setter
        public Builder namePrefix(String namePrefix) {
            if (namePrefix == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceKustomize", "namePrefix");
            }
            this.namePrefix = namePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder nameSuffix(String nameSuffix) {
            if (nameSuffix == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceKustomize", "nameSuffix");
            }
            this.nameSuffix = nameSuffix;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetGitopsApplicationsApplicationSpecSourceKustomize", "version");
            }
            this.version = version;
            return this;
        }
        public GetGitopsApplicationsApplicationSpecSourceKustomize build() {
            final var _resultValue = new GetGitopsApplicationsApplicationSpecSourceKustomize();
            _resultValue.commonAnnotations = commonAnnotations;
            _resultValue.commonLabels = commonLabels;
            _resultValue.forceCommonAnnotations = forceCommonAnnotations;
            _resultValue.forceCommonLabels = forceCommonLabels;
            _resultValue.images = images;
            _resultValue.namePrefix = namePrefix;
            _resultValue.nameSuffix = nameSuffix;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
