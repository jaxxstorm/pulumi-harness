// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetGitopsProject
    {
        /// <summary>
        /// ## Example Usage
        /// </summary>
        public static Task<GetGitopsProjectResult> InvokeAsync(GetGitopsProjectArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGitopsProjectResult>("harness:platform/getGitopsProject:getGitopsProject", args ?? new GetGitopsProjectArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// </summary>
        public static Output<GetGitopsProjectResult> Invoke(GetGitopsProjectInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGitopsProjectResult>("harness:platform/getGitopsProject:getGitopsProject", args ?? new GetGitopsProjectInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGitopsProjectArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier of the GitOps project.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Agent identifier of the GitOps project.
        /// </summary>
        [Input("agentId", required: true)]
        public string AgentId { get; set; } = null!;

        /// <summary>
        /// Org identifier of the GitOps project.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the GitOps repository.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        [Input("projects", required: true)]
        private List<Inputs.GetGitopsProjectProjectArgs>? _projects;

        /// <summary>
        /// App projects configuration details.
        /// </summary>
        public List<Inputs.GetGitopsProjectProjectArgs> Projects
        {
            get => _projects ?? (_projects = new List<Inputs.GetGitopsProjectProjectArgs>());
            set => _projects = value;
        }

        /// <summary>
        /// Identifier for the GitOps project.
        /// </summary>
        [Input("queryName")]
        public string? QueryName { get; set; }

        /// <summary>
        /// Indicates if the GitOps repository should be updated if existing and inserted if not.
        /// </summary>
        [Input("upsert")]
        public bool? Upsert { get; set; }

        public GetGitopsProjectArgs()
        {
        }
        public static new GetGitopsProjectArgs Empty => new GetGitopsProjectArgs();
    }

    public sealed class GetGitopsProjectInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier of the GitOps project.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Agent identifier of the GitOps project.
        /// </summary>
        [Input("agentId", required: true)]
        public Input<string> AgentId { get; set; } = null!;

        /// <summary>
        /// Org identifier of the GitOps project.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project identifier of the GitOps repository.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("projects", required: true)]
        private InputList<Inputs.GetGitopsProjectProjectInputArgs>? _projects;

        /// <summary>
        /// App projects configuration details.
        /// </summary>
        public InputList<Inputs.GetGitopsProjectProjectInputArgs> Projects
        {
            get => _projects ?? (_projects = new InputList<Inputs.GetGitopsProjectProjectInputArgs>());
            set => _projects = value;
        }

        /// <summary>
        /// Identifier for the GitOps project.
        /// </summary>
        [Input("queryName")]
        public Input<string>? QueryName { get; set; }

        /// <summary>
        /// Indicates if the GitOps repository should be updated if existing and inserted if not.
        /// </summary>
        [Input("upsert")]
        public Input<bool>? Upsert { get; set; }

        public GetGitopsProjectInvokeArgs()
        {
        }
        public static new GetGitopsProjectInvokeArgs Empty => new GetGitopsProjectInvokeArgs();
    }


    [OutputType]
    public sealed class GetGitopsProjectResult
    {
        /// <summary>
        /// Account identifier of the GitOps project.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Agent identifier of the GitOps project.
        /// </summary>
        public readonly string AgentId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Org identifier of the GitOps project.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Project identifier of the GitOps repository.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// App projects configuration details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGitopsProjectProjectResult> Projects;
        /// <summary>
        /// Identifier for the GitOps project.
        /// </summary>
        public readonly string? QueryName;
        /// <summary>
        /// Indicates if the GitOps repository should be updated if existing and inserted if not.
        /// </summary>
        public readonly bool? Upsert;

        [OutputConstructor]
        private GetGitopsProjectResult(
            string accountId,

            string agentId,

            string id,

            string? orgId,

            string? projectId,

            ImmutableArray<Outputs.GetGitopsProjectProjectResult> projects,

            string? queryName,

            bool? upsert)
        {
            AccountId = accountId;
            AgentId = agentId;
            Id = id;
            OrgId = orgId;
            ProjectId = projectId;
            Projects = projects;
            QueryName = queryName;
            Upsert = upsert;
        }
    }
}
