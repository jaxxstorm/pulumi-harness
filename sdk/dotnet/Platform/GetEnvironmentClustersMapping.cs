// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    public static class GetEnvironmentClustersMapping
    {
        /// <summary>
        /// Data source for retrieving a Harness Cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetEnvironmentClustersMapping.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetEnvironmentClustersMappingResult> InvokeAsync(GetEnvironmentClustersMappingArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEnvironmentClustersMappingResult>("harness:platform/getEnvironmentClustersMapping:getEnvironmentClustersMapping", args ?? new GetEnvironmentClustersMappingArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a Harness Cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Harness = Pulumi.Harness;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Harness.Platform.GetEnvironmentClustersMapping.Invoke(new()
        ///     {
        ///         Identifier = "identifier",
        ///         OrgId = "org_id",
        ///         ProjectId = "project_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetEnvironmentClustersMappingResult> Invoke(GetEnvironmentClustersMappingInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEnvironmentClustersMappingResult>("harness:platform/getEnvironmentClustersMapping:getEnvironmentClustersMapping", args ?? new GetEnvironmentClustersMappingInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEnvironmentClustersMappingArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// environment identifier of the cluster.
        /// </summary>
        [Input("envId", required: true)]
        public string EnvId { get; set; } = null!;

        /// <summary>
        /// identifier of the cluster.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// org_id of the cluster.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// project_id of the cluster.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        public GetEnvironmentClustersMappingArgs()
        {
        }
        public static new GetEnvironmentClustersMappingArgs Empty => new GetEnvironmentClustersMappingArgs();
    }

    public sealed class GetEnvironmentClustersMappingInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// environment identifier of the cluster.
        /// </summary>
        [Input("envId", required: true)]
        public Input<string> EnvId { get; set; } = null!;

        /// <summary>
        /// identifier of the cluster.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// org_id of the cluster.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// project_id of the cluster.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public GetEnvironmentClustersMappingInvokeArgs()
        {
        }
        public static new GetEnvironmentClustersMappingInvokeArgs Empty => new GetEnvironmentClustersMappingInvokeArgs();
    }


    [OutputType]
    public sealed class GetEnvironmentClustersMappingResult
    {
        /// <summary>
        /// environment identifier of the cluster.
        /// </summary>
        public readonly string EnvId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// identifier of the cluster.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// org_id of the cluster.
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// project_id of the cluster.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// scope at which the cluster exists in harness gitops
        /// </summary>
        public readonly string Scope;

        [OutputConstructor]
        private GetEnvironmentClustersMappingResult(
            string envId,

            string id,

            string identifier,

            string? orgId,

            string? projectId,

            string scope)
        {
            EnvId = envId;
            Id = id;
            Identifier = identifier;
            OrgId = orgId;
            ProjectId = projectId;
            Scope = scope;
        }
    }
}
