// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform
{
    /// <summary>
    /// Resource for creating a Template. Description field is deprecated
    /// 
    /// ## Remote Pipeline template
    /// 
    /// resource "harness.platform.Template" "pipeline_template_remote" {
    ///   identifier = "identifier"
    ///   org_id     = harness_platform_project.test.org_id
    ///   project_id = harness_platform_project.test.id
    ///   name       = "name"
    ///   comments   = "comments"
    ///   version    = "ab"
    ///   is_stable  = true
    ///   git_details {
    ///     branch_name    = "main"
    ///     commit_message = "Commit"
    ///     file_path      = "file_path"
    ///     connector_ref  = "account.connector_ref"
    ///     store_type     = "REMOTE"
    ///     repo_name      = "repo_name"
    ///   }
    ///   template_yaml = &lt;&lt;-EOT
    /// template:
    ///   name: "name"
    ///   identifier: "identifier"
    ///   versionLabel: "ab"
    ///   type: Pipeline
    ///   projectIdentifier: ${harness_platform_project.test.id}
    ///   orgIdentifier: ${harness_platform_project.test.org_id}
    ///   tags: {}
    ///   spec:
    ///     stages:
    ///       - stage:
    ///           identifier: dvvdvd
    ///           name: dvvdvd
    ///           description: ""
    ///           type: Deployment
    ///           spec:
    ///             deploymentType: Kubernetes
    ///             service:
    ///               serviceRef: &lt;+input&gt;
    ///               serviceInputs: &lt;+input&gt;
    ///             environment:
    ///               environmentRef: &lt;+input&gt;
    ///               deployToAll: false
    ///               environmentInputs: &lt;+input&gt;
    ///               serviceOverrideInputs: &lt;+input&gt;
    ///               infrastructureDefinitions: &lt;+input&gt;
    ///             execution:
    ///               steps:
    ///                 - step:
    ///                     name: Rollout Deployment
    ///                     identifier: rolloutDeployment
    ///                     type: K8sRollingDeploy
    ///                     timeout: 10m
    ///                     spec:
    ///                       skipDryRun: false
    ///                       pruningEnabled: false
    ///               rollbackSteps:
    ///                 - step:
    ///                     name: Rollback Rollout Deployment
    ///                     identifier: rollbackRolloutDeployment
    ///                     type: K8sRollingRollback
    ///                     timeout: 10m
    ///                     spec:
    ///                       pruningEnabled: false
    ///           tags: {}
    ///           failureStrategies:
    ///             - onFailure:
    ///                 errors:
    ///                   - AllErrors
    ///                 action:
    ///                   type: StageRollback
    /// 
    ///   EOT
    /// }
    /// 
    /// ## Remote Pipeline template to create new branch from existing base branch
    /// 
    /// resource "harness.platform.Template" "pipeline_template_remote" {
    ///   identifier = "identifier"
    ///   org_id     = harness_platform_project.test.org_id
    ///   project_id = harness_platform_project.test.id
    ///   name       = "name"
    ///   comments   = "comments"
    ///   version    = "ab"
    ///   is_stable  = true
    ///   git_details {
    ///     branch_name    = "new_branch"
    ///     commit_message = "Commit"
    ///     file_path      = "file_path"
    ///     connector_ref  = "account.connector_ref"
    ///     store_type     = "REMOTE"
    ///     repo_name      = "repo_name"
    ///     base_branch    = "main"
    ///   }
    ///   template_yaml = &lt;&lt;-EOT
    /// template:
    ///   name: "name"
    ///   identifier: "identifier"
    ///   versionLabel: "ab"
    ///   type: Pipeline
    ///   projectIdentifier: ${harness_platform_project.test.id}
    ///   orgIdentifier: ${harness_platform_project.test.org_id}
    ///   tags: {}
    ///   spec:
    ///     stages:
    ///       - stage:
    ///           identifier: dvvdvd
    ///           name: dvvdvd
    ///           description: ""
    ///           type: Deployment
    ///           spec:
    ///             deploymentType: Kubernetes
    ///             service:
    ///               serviceRef: &lt;+input&gt;
    ///               serviceInputs: &lt;+input&gt;
    ///             environment:
    ///               environmentRef: &lt;+input&gt;
    ///               deployToAll: false
    ///               environmentInputs: &lt;+input&gt;
    ///               serviceOverrideInputs: &lt;+input&gt;
    ///               infrastructureDefinitions: &lt;+input&gt;
    ///             execution:
    ///               steps:
    ///                 - step:
    ///                     name: Rollout Deployment
    ///                     identifier: rolloutDeployment
    ///                     type: K8sRollingDeploy
    ///                     timeout: 10m
    ///                     spec:
    ///                       skipDryRun: false
    ///                       pruningEnabled: false
    ///               rollbackSteps:
    ///                 - step:
    ///                     name: Rollback Rollout Deployment
    ///                     identifier: rollbackRolloutDeployment
    ///                     type: K8sRollingRollback
    ///                     timeout: 10m
    ///                     spec:
    ///                       pruningEnabled: false
    ///           tags: {}
    ///           failureStrategies:
    ///             - onFailure:
    ///                 errors:
    ///                   - AllErrors
    ///                 action:
    ///                   type: StageRollback
    /// 
    ///   EOT
    /// }
    /// 
    /// ## Inline Pipeline template
    /// 
    /// resource "harness.platform.Template" "pipeline_template_inline" {
    ///   identifier    = "identifier"
    ///   org_id        = harness_platform_project.test.org_id
    ///   project_id    = harness_platform_project.test.id
    ///   name          = "name"
    ///   comments      = "comments"
    ///   version       = "ab"
    ///   is_stable     = true
    ///   template_yaml = &lt;&lt;-EOT
    /// template:
    ///   name: "name"
    ///   identifier: "identifier"
    ///   versionLabel: "ab"
    ///   type: Pipeline
    ///   projectIdentifier: ${harness_platform_project.test.id}
    ///   orgIdentifier: ${harness_platform_project.test.org_id}
    ///   tags: {}
    ///   spec:
    ///     stages:
    ///       - stage:
    ///           identifier: dvvdvd
    ///           name: dvvdvd
    ///           description: ""
    ///           type: Deployment
    ///           spec:
    ///             deploymentType: Kubernetes
    ///             service:
    ///               serviceRef: &lt;+input&gt;
    ///               serviceInputs: &lt;+input&gt;
    ///             environment:
    ///               environmentRef: &lt;+input&gt;
    ///               deployToAll: false
    ///               environmentInputs: &lt;+input&gt;
    ///               serviceOverrideInputs: &lt;+input&gt;
    ///               infrastructureDefinitions: &lt;+input&gt;
    ///             execution:
    ///               steps:
    ///                 - step:
    ///                     name: Rollout Deployment
    ///                     identifier: rolloutDeployment
    ///                     type: K8sRollingDeploy
    ///                     timeout: 10m
    ///                     spec:
    ///                       skipDryRun: false
    ///                       pruningEnabled: false
    ///               rollbackSteps:
    ///                 - step:
    ///                     name: Rollback Rollout Deployment
    ///                     identifier: rollbackRolloutDeployment
    ///                     type: K8sRollingRollback
    ///                     timeout: 10m
    ///                     spec:
    ///                       pruningEnabled: false
    ///           tags: {}
    ///           failureStrategies:
    ///             - onFailure:
    ///                 errors:
    ///                   - AllErrors
    ///                 action:
    ///                   type: StageRollback
    /// 
    ///   EOT
    /// }
    /// 
    /// ## Inline Step template
    /// 
    /// resource "harness.platform.Template" "step_template_inline" {
    ///   identifier    = "identifier"
    ///   org_id        = harness_platform_project.test.org_id
    ///   project_id    = harness_platform_project.test.id
    ///   name          = "name"
    ///   comments      = "comments"
    ///   version       = "ab"
    ///   is_stable     = true
    ///   template_yaml = &lt;&lt;-EOT
    /// template:
    ///   name: "name"
    ///   identifier: "identifier"
    ///   versionLabel: "ab"
    ///   type: Step
    ///   projectIdentifier: ${harness_platform_project.test.id}
    ///   orgIdentifier: ${harness_platform_project.test.org_id}
    ///   tags: {}
    ///   spec:
    ///     timeout: 10m
    ///     type: ShellScript
    ///     spec:
    ///       shell: Bash
    ///       onDelegate: true
    ///       source:
    ///         type: Inline
    ///         spec:
    ///           script: &lt;+input&gt;
    ///       environmentVariables: []
    ///       outputVariables: []
    /// 
    ///   EOT
    /// }
    /// 
    /// ## Remote Step template
    /// 
    /// resource "harness.platform.Template" "step_template_remote" {
    ///   identifier = "identifier"
    ///   org_id     = harness_platform_project.test.org_id
    ///   project_id = harness_platform_project.test.id
    ///   name       = "name"
    ///   comments   = "comments"
    ///   version    = "ab"
    ///   is_stable  = true
    ///   git_details {
    ///     branch_name    = "main"
    ///     commit_message = "Commit"
    ///     file_path      = "file_path"
    ///     connector_ref  = "account.connector_ref"
    ///     store_type     = "REMOTE"
    ///     repo_name      = "repo_name"
    ///   }
    ///   template_yaml = &lt;&lt;-EOT
    /// template:
    ///   name: "name"
    ///   identifier: "identifier"
    ///   versionLabel: "ab"
    ///   type: Step
    ///   projectIdentifier: ${harness_platform_project.test.id}
    ///   orgIdentifier: ${harness_platform_project.test.org_id}
    ///   tags: {}
    ///   spec:
    ///     timeout: 10m
    ///     type: ShellScript
    ///     spec:
    ///       shell: Bash
    ///       onDelegate: true
    ///       source:
    ///         type: Inline
    ///         spec:
    ///           script: &lt;+input&gt;
    ///       environmentVariables: []
    ///       outputVariables: []
    /// 
    ///   EOT
    /// }
    /// 
    /// ## Remote Step template to create new branch from existing branch
    /// 
    /// resource "harness.platform.Template" "step_template_remote" {
    ///   identifier = "identifier"
    ///   org_id     = harness_platform_project.test.org_id
    ///   project_id = harness_platform_project.test.id
    ///   name       = "name"
    ///   comments   = "comments"
    ///   version    = "ab"
    ///   is_stable  = true
    ///   git_details {
    ///     branch_name    = "new_branch"
    ///     commit_message = "Commit"
    ///     file_path      = "file_path"
    ///     connector_ref  = "account.connector_ref"
    ///     store_type     = "REMOTE"
    ///     repo_name      = "repo_name"
    ///     base_branch    = "main"
    ///   }
    ///   template_yaml = &lt;&lt;-EOT
    /// template:
    ///   name: "name"
    ///   identifier: "identifier"
    ///   versionLabel: "ab"
    ///   type: Step
    ///   projectIdentifier: ${harness_platform_project.test.id}
    ///   orgIdentifier: ${harness_platform_project.test.org_id}
    ///   tags: {}
    ///   spec:
    ///     timeout: 10m
    ///     type: ShellScript
    ///     spec:
    ///       shell: Bash
    ///       onDelegate: true
    ///       source:
    ///         type: Inline
    ///         spec:
    ///           script: &lt;+input&gt;
    ///       environmentVariables: []
    ///       outputVariables: []
    /// 
    ///   EOT
    /// }
    /// 
    /// ## Inline Stage template
    /// 
    /// resource "harness.platform.Template" "stage_template_inline" {
    ///   identifier    = "identifier"
    ///   org_id        = harness_platform_project.test.org_id
    ///   project_id    = harness_platform_project.test.id
    ///   name          = "name"
    ///   comments      = "comments"
    ///   version       = "ab"
    ///   is_stable     = true
    ///   template_yaml = &lt;&lt;-EOT
    /// template:
    ///   name: "name"
    ///   identifier: "identifier"
    ///   versionLabel: "ab"
    ///   type: Stage
    ///   projectIdentifier: ${harness_platform_project.test.id}
    ///   orgIdentifier: ${harness_platform_project.test.org_id}
    ///   tags: {}
    ///   spec:
    ///     type: Deployment
    ///     spec:
    ///       deploymentType: Kubernetes
    ///       service:
    ///         serviceRef: &lt;+input&gt;
    ///         serviceInputs: &lt;+input&gt;
    ///       environment:
    ///         environmentRef: &lt;+input&gt;
    ///         deployToAll: false
    ///         environmentInputs: &lt;+input&gt;
    ///         infrastructureDefinitions: &lt;+input&gt;
    ///       execution:
    ///         steps:
    ///           - step:
    ///               type: ShellScript
    ///               name: Shell Script_1
    ///               identifier: ShellScript_1
    ///               spec:
    ///                 shell: Bash
    ///                 onDelegate: true
    ///                 source:
    ///                   type: Inline
    ///                   spec:
    ///                     script: &lt;+input&gt;
    ///                 environmentVariables: []
    ///                 outputVariables: []
    ///               timeout: &lt;+input&gt;
    ///         rollbackSteps: []
    ///     failureStrategies:
    ///       - onFailure:
    ///           errors:
    ///             - AllErrors
    ///           action:
    ///             type: StageRollback
    /// 
    ///   EOT
    /// }
    /// 
    /// ## Remote Stage template
    /// 
    /// resource "harness.platform.Template" "stage_template_remote" {
    ///   identifier = "identifier"
    ///   org_id     = harness_platform_project.test.org_id
    ///   project_id = harness_platform_project.test.id
    ///   name       = "name"
    ///   comments   = "comments"
    ///   version    = "ab"
    ///   is_stable  = true
    ///   git_details {
    ///     branch_name    = "main"
    ///     commit_message = "Commit"
    ///     file_path      = "file_path"
    ///     connector_ref  = "account.connector_ref"
    ///     store_type     = "REMOTE"
    ///     repo_name      = "repo_name"
    ///   }
    ///   template_yaml = &lt;&lt;-EOT
    /// template:
    ///   name: "name"
    ///   identifier: "identifier"
    ///   versionLabel: "ab"
    ///   type: Stage
    ///   projectIdentifier: ${harness_platform_project.test.id}
    ///   orgIdentifier: ${harness_platform_project.test.org_id}
    ///   tags: {}
    ///   spec:
    ///     type: Deployment
    ///     spec:
    ///       deploymentType: Kubernetes
    ///       service:
    ///         serviceRef: &lt;+input&gt;
    ///         serviceInputs: &lt;+input&gt;
    ///       environment:
    ///         environmentRef: &lt;+input&gt;
    ///         deployToAll: false
    ///         environmentInputs: &lt;+input&gt;
    ///         infrastructureDefinitions: &lt;+input&gt;
    ///       execution:
    ///         steps:
    ///           - step:
    ///               type: ShellScript
    ///               name: Shell Script_1
    ///               identifier: ShellScript_1
    ///               spec:
    ///                 shell: Bash
    ///                 onDelegate: true
    ///                 source:
    ///                   type: Inline
    ///                   spec:
    ///                     script: &lt;+input&gt;
    ///                 environmentVariables: []
    ///                 outputVariables: []
    ///               timeout: &lt;+input&gt;
    ///         rollbackSteps: []
    ///     failureStrategies:
    ///       - onFailure:
    ///           errors:
    ///             - AllErrors
    ///           action:
    ///             type: StageRollback
    /// 
    ///   EOT
    /// }
    /// 
    /// ## Remote Stage template to create new branch from existing branch
    /// 
    /// resource "harness.platform.Template" "stage_template_remote" {
    ///   identifier = "identifier"
    ///   org_id     = harness_platform_project.test.org_id
    ///   project_id = harness_platform_project.test.id
    ///   name       = "name"
    ///   comments   = "comments"
    ///   version    = "ab"
    ///   is_stable  = true
    ///   git_details {
    ///     branch_name    = "new_branch"
    ///     commit_message = "Commit"
    ///     file_path      = "file_path"
    ///     connector_ref  = "account.connector_ref"
    ///     store_type     = "REMOTE"
    ///     repo_name      = "repo_name"
    ///     base_branch    = "main"
    ///   }
    ///   template_yaml = &lt;&lt;-EOT
    /// template:
    ///   name: "name"
    ///   identifier: "identifier"
    ///   versionLabel: "ab"
    ///   type: Stage
    ///   projectIdentifier: ${harness_platform_project.test.id}
    ///   orgIdentifier: ${harness_platform_project.test.org_id}
    ///   tags: {}
    ///   spec:
    ///     type: Deployment
    ///     spec:
    ///       deploymentType: Kubernetes
    ///       service:
    ///         serviceRef: &lt;+input&gt;
    ///         serviceInputs: &lt;+input&gt;
    ///       environment:
    ///         environmentRef: &lt;+input&gt;
    ///         deployToAll: false
    ///         environmentInputs: &lt;+input&gt;
    ///         infrastructureDefinitions: &lt;+input&gt;
    ///       execution:
    ///         steps:
    ///           - step:
    ///               type: ShellScript
    ///               name: Shell Script_1
    ///               identifier: ShellScript_1
    ///               spec:
    ///                 shell: Bash
    ///                 onDelegate: true
    ///                 source:
    ///                   type: Inline
    ///                   spec:
    ///                     script: &lt;+input&gt;
    ///                 environmentVariables: []
    ///                 outputVariables: []
    ///               timeout: &lt;+input&gt;
    ///         rollbackSteps: []
    ///     failureStrategies:
    ///       - onFailure:
    ///           errors:
    ///             - AllErrors
    ///           action:
    ///             type: StageRollback
    /// 
    ///   EOT
    /// }
    /// 
    /// ## Inline StepGroup template
    /// 
    /// resource "harness.platform.Template" "stepgroup_template_inline" {
    ///   identifier    = "identifier"
    ///   org_id        = harness_platform_project.test.org_id
    ///   project_id    = harness_platform_project.test.id
    ///   name          = "name"
    ///   comments      = "comments"
    ///   version       = "ab"
    ///   is_stable     = true
    ///   template_yaml = &lt;&lt;-EOT
    /// template:
    ///   name: "name"
    ///   identifier: "identifier"
    ///   versionLabel: "ab"
    ///   type: StepGroup
    ///   projectIdentifier: ${harness_platform_project.test.id}
    ///   orgIdentifier: ${harness_platform_project.test.org_id}
    ///   tags: {}
    ///   spec:
    ///     stageType: Deployment
    ///     steps:
    ///       - step:
    ///           type: ShellScript
    ///           name: Shell Script_1
    ///           identifier: ShellScript_1
    ///           spec:
    ///             shell: Bash
    ///             onDelegate: true
    ///             source:
    ///               type: Inline
    ///               spec:
    ///                 script: &lt;+input&gt;
    ///             environmentVariables: []
    ///             outputVariables: []
    ///           timeout: 10m
    /// 
    ///   EOT
    /// }
    /// 
    /// ## Remote StepGroup template
    /// 
    /// resource "harness.platform.Template" "stepgroup_template_remote" {
    ///   identifier = "identifier"
    ///   org_id     = harness_platform_project.test.org_id
    ///   project_id = harness_platform_project.test.id
    ///   name       = "name"
    ///   comments   = "comments"
    ///   version    = "ab"
    ///   is_stable  = true
    ///   git_details {
    ///     branch_name    = "main"
    ///     commit_message = "Commit"
    ///     file_path      = "file_path"
    ///     connector_ref  = "account.connector_ref"
    ///     store_type     = "REMOTE"
    ///     repo_name      = "repo_name"
    ///   }
    ///   template_yaml = &lt;&lt;-EOT
    /// template:
    ///   name: "name"
    ///   identifier: "identifier"
    ///   versionLabel: "ab"
    ///   type: StepGroup
    ///   projectIdentifier: ${harness_platform_project.test.id}
    ///   orgIdentifier: ${harness_platform_project.test.org_id}
    ///   tags: {}
    ///   spec:
    ///     stageType: Deployment
    ///     steps:
    ///       - step:
    ///           type: ShellScript
    ///           name: Shell Script_1
    ///           identifier: ShellScript_1
    ///           spec:
    ///             shell: Bash
    ///             onDelegate: true
    ///             source:
    ///               type: Inline
    ///               spec:
    ///                 script: &lt;+input&gt;
    ///             environmentVariables: []
    ///             outputVariables: []
    ///           timeout: 10m
    /// 
    ///   EOT
    /// }
    /// 
    /// ## Remote StepGroup template to create new branch from existing branch
    /// 
    /// resource "harness.platform.Template" "stepgroup_template_remote" {
    ///   identifier = "identifier"
    ///   org_id     = harness_platform_project.test.org_id
    ///   project_id = harness_platform_project.test.id
    ///   name       = "name"
    ///   comments   = "comments"
    ///   version    = "ab"
    ///   is_stable  = true
    ///   git_details {
    ///     branch_name    = "new_branch"
    ///     commit_message = "Commit"
    ///     file_path      = "file_path"
    ///     connector_ref  = "account.connector_ref"
    ///     store_type     = "REMOTE"
    ///     repo_name      = "repo_name"
    ///     base_branch    = "main"
    ///   }
    ///   template_yaml = &lt;&lt;-EOT
    /// template:
    ///   name: "name"
    ///   identifier: "identifier"
    ///   versionLabel: "ab"
    ///   type: StepGroup
    ///   projectIdentifier: ${harness_platform_project.test.id}
    ///   orgIdentifier: ${harness_platform_project.test.org_id}
    ///   tags: {}
    ///   spec:
    ///     stageType: Deployment
    ///     steps:
    ///       - step:
    ///           type: ShellScript
    ///           name: Shell Script_1
    ///           identifier: ShellScript_1
    ///           spec:
    ///             shell: Bash
    ///             onDelegate: true
    ///             source:
    ///               type: Inline
    ///               spec:
    ///                 script: &lt;+input&gt;
    ///             environmentVariables: []
    ///             outputVariables: []
    ///           timeout: 10m
    /// 
    ///   EOT
    /// }
    /// 
    /// ## Inline Monitered Service template
    /// 
    /// resource "harness.platform.Template" "monitered_service_template_inline" {
    ///   identifier    = "identifier"
    ///   org_id        = harness_platform_project.test.org_id
    ///   project_id    = harness_platform_project.test.id
    ///   name          = "name"
    ///   comments      = "comments"
    ///   version       = "ab"
    ///   is_stable     = true
    ///   template_yaml = &lt;&lt;-EOT
    /// template:
    ///   name: "name"
    ///   identifier: "identifier"
    ///   versionLabel: "ab"
    ///   type: MonitoredService
    ///   projectIdentifier: ${harness_platform_project.test.id}
    ///   orgIdentifier: ${harness_platform_project.test.org_id}
    ///   tags: {}
    ///   spec:
    ///     serviceRef: &lt;+input&gt;
    ///     environmentRef: &lt;+input&gt;
    ///     type: Application
    ///     sources:
    ///       changeSources:
    ///         - name: Harness CD Next Gen
    ///           identifier: harness_cd_next_gen
    ///           type: HarnessCDNextGen
    ///           enabled: true
    ///           category: Deployment
    ///           spec: {}
    ///       healthSources:
    ///         - name: health
    ///           identifier: health
    ///           type: AppDynamics
    ///           spec:
    ///             applicationName: &lt;+input&gt;
    ///             tierName: &lt;+input&gt;
    ///             metricData:
    ///               Errors: true
    ///               Performance: true
    ///             metricDefinitions: []
    ///             feature: Application Monitoring
    ///             connectorRef: &lt;+input&gt;
    ///             metricPacks:
    ///               - identifier: Errors
    ///               - identifier: Performance
    /// 
    ///   EOT
    /// }
    /// 
    /// ## Artifact Source template
    /// 
    /// resource "harness.platform.Template" "artifact_source_template" {
    ///   identifier    = "identifier"
    ///   org_id        = harness_platform_project.test.org_id
    ///   project_id    = harness_platform_project.test.id
    ///   name          = "name"
    ///   comments      = "comments"
    ///   version       = "ab"
    ///   is_stable     = true
    ///   template_yaml = &lt;&lt;-EOT
    /// template:
    ///   name: "name"
    ///   identifier: "identifier"
    ///   versionLabel: "ab"
    ///   type: ArtifactSource
    ///   projectIdentifier: ${harness_platform_project.test.id}
    ///   orgIdentifier: ${harness_platform_project.test.org_id}
    ///   tags: {}
    ///   spec:
    ///     type: DockerRegistry
    ///     spec:
    ///       imagePath: library/nginx
    ///       tag: &lt;+input&gt;
    ///       connectorRef: account.Harness_DockerHub
    /// 
    ///   EOT
    /// }
    /// 
    /// ## Deployment template
    /// 
    /// resource "harness.platform.Template" "deployment_template" {
    ///   identifier    = "identifier"
    ///   org_id        = harness_platform_project.test.org_id
    ///   project_id    = harness_platform_project.test.id
    ///   name          = "name"
    ///   comments      = "comments"
    ///   version       = "ab"
    ///   is_stable     = true
    ///   template_yaml = &lt;&lt;-EOT
    /// template:
    ///   name: "name"
    ///   identifier: "identifier"
    ///   versionLabel: "ab"
    ///   type: CustomDeployment
    ///   projectIdentifier: ${harness_platform_project.test.id}
    ///   orgIdentifier: ${harness_platform_project.test.org_id}
    ///   tags: {}
    ///   spec:
    ///     infrastructure:
    ///       variables:
    ///         - name: kubeConnector
    ///           type: Connector
    ///           value: &lt;+input&gt;
    ///           description: ""
    ///       fetchInstancesScript:
    ///         store:
    ///           type: Inline
    ///           spec:
    ///             content: |
    ///               #
    ///               # Script is expected to query Infrastructure and dump json
    ///               # in $INSTANCE_OUTPUT_PATH file path
    ///               #
    ///               # Harness is expected to initialize ${INSTANCE_OUTPUT_PATH}
    ///               # environment variable - a random unique file path on delegate,
    ///               # so script execution can save the result.
    ///               #
    ///               /opt/harness-delegate/client-tools/kubectl/v1.19.2/kubectl get pods --namespace=harness-delegate-ng -o json &gt; $INSTANCE_OUTPUT_PATH
    ///       instanceAttributes:
    ///         - name: instancename
    ///           jsonPath: metadata.name
    ///           description: ""
    ///       instancesListPath: items
    ///     execution:
    ///       stepTemplateRefs: []
    /// 
    ///   EOT
    /// }
    /// 
    /// ## Secrets Manager template
    /// 
    /// resource "harness.platform.Template" "secrets_manager_template" {
    ///   identifier    = "identifier"
    ///   org_id        = harness_platform_project.test.org_id
    ///   project_id    = harness_platform_project.test.id
    ///   name          = "name"
    ///   comments      = "comments"
    ///   version       = "ab"
    ///   is_stable     = true
    ///   template_yaml = &lt;&lt;-EOT
    /// template:
    ///   name: "name"
    ///   identifier: "identifier"
    ///   versionLabel: "ab"
    ///   type: SecretManager
    ///   projectIdentifier: ${harness_platform_project.test.id}
    ///   orgIdentifier: ${harness_platform_project.test.org_id}
    ///   tags: {}
    ///   spec:
    ///     executionTarget: {}
    ///     shell: Bash
    ///     onDelegate: true
    ///     source:
    ///       spec:
    ///         script: |-
    ///           curl -o secret.json -X GET https://example.com/&lt;+secretManager.environmentVariables.enginename&gt;/&lt;+secretManager.environmentVariables.path&gt; -H 'X-Vault-Token: &lt;+secrets.getValue("vaultTokenOne")&gt;'
    ///           secret=$(jq -r '.data."&lt;+secretManager.environmentVariables.key&gt;"' secret.json)
    ///         type: Inline
    ///     environmentVariables:
    ///       - name: enginename
    ///         type: String
    ///         value: &lt;+input&gt;
    ///       - name: path
    ///         type: String
    ///         value: &lt;+input&gt;
    ///       - name: key
    ///         type: String
    ///         value: &lt;+input&gt;
    /// 
    ///   EOT
    /// }
    /// 
    /// ### Creating Multiple Versions of a Template
    /// ##Stable version of the Template
    /// resource "harness.platform.Template" "template_v1" {
    ///   identifier    = "temp"
    ///   org_id        = harness_platform_project.test.org_id
    ///   name          = "temp"
    ///   comments      = "comments"
    ///   version       = "v1"
    ///   is_stable     = true
    ///   force_delete  = true
    ///   template_yaml = &lt;&lt;-EOT
    /// 			template:
    ///       name: "temp"
    ///       identifier: "temp"
    ///       versionLabel: v1
    ///       type: Pipeline
    ///       orgIdentifier: ${harness_platform_organization.test.id}
    ///       tags: {}
    ///       spec:
    ///         stages:
    ///           - stage:
    ///               name: dvvdvd
    ///               identifier: dvvdvd
    ///               description: ""
    ///               type: Deployment
    ///               spec:
    ///                 deploymentType: Kubernetes
    ///                 service:
    ///                   serviceRef: &lt;+input&gt;
    ///                   serviceInputs: &lt;+input&gt;
    ///                 environment:
    ///                   environmentRef: &lt;+input&gt;
    ///                   deployToAll: false
    ///                   environmentInputs: &lt;+input&gt;
    ///                   serviceOverrideInputs: &lt;+input&gt;
    ///                   infrastructureDefinitions: &lt;+input&gt;
    ///                 execution:
    ///                   steps:
    ///                     - step:
    ///                         name: Rollout Deployment
    ///                         identifier: rolloutDeployment
    ///                         type: K8sRollingDeploy
    ///                         timeout: 10m
    ///                         spec:
    ///                           skipDryRun: false
    ///                           pruningEnabled: false
    ///                   rollbackSteps:
    ///                     - step:
    ///                         name: Rollback Rollout Deployment
    ///                         identifier: rollbackRolloutDeployment
    ///                         type: K8sRollingRollback
    ///                         timeout: 10m
    ///                         spec:
    ///                           pruningEnabled: false
    ///               tags: {}
    ///               failureStrategies:
    ///                 - onFailure:
    ///                     errors:
    ///                       - AllErrors
    ///                     action:
    ///                       type: StageRollback
    /// 
    ///       EOT
    /// }
    /// 
    /// ##Unstable version of the Template
    /// resource "harness.platform.Template" "template_v2" {
    ///   identifier    = "temp"
    ///   org_id        = harness_platform_organization.test.id
    ///   name          = "temp"
    ///   comments      = "comments"
    ///   version       = "v2"
    ///   is_stable     = false
    ///   force_delete  = true
    ///   template_yaml = &lt;&lt;-EOT
    /// 			template:
    ///       name: "temp"
    ///       identifier: "temp"
    ///       versionLabel: v2
    ///       type: Pipeline
    ///       orgIdentifier: ${harness_platform_organization.test.id}
    ///       tags: {}
    ///       spec:
    ///         stages:
    ///           - stage:
    ///               name: dvvdvd
    ///               identifier: dvvdvd
    ///               description: ""
    ///               type: Deployment
    ///               spec:
    ///                 deploymentType: Kubernetes
    ///                 service:
    ///                   serviceRef: &lt;+input&gt;
    ///                   serviceInputs: &lt;+input&gt;
    ///                 environment:
    ///                   environmentRef: &lt;+input&gt;
    ///                   deployToAll: false
    ///                   environmentInputs: &lt;+input&gt;
    ///                   serviceOverrideInputs: &lt;+input&gt;
    ///                   infrastructureDefinitions: &lt;+input&gt;
    ///                 execution:
    ///                   steps:
    ///                     - step:
    ///                         name: Rollout Deployment
    ///                         identifier: rolloutDeployment
    ///                         type: K8sRollingDeploy
    ///                         timeout: 10m
    ///                         spec:
    ///                           skipDryRun: false
    ///                           pruningEnabled: false
    ///                   rollbackSteps:
    ///                     - step:
    ///                         name: Rollback Rollout Deployment
    ///                         identifier: rollbackRolloutDeployment
    ///                         type: K8sRollingRollback
    ///                         timeout: 10m
    ///                         spec:
    ///                           pruningEnabled: false
    ///               tags: {}
    ///               failureStrategies:
    ///                 - onFailure:
    ///                     errors:
    ///                       - AllErrors
    ///                     action:
    ///                       type: StageRollback
    ///       EOT
    /// }
    /// 
    /// ##Updating the Stable Version of the Template from v1 to v2.
    /// resource "harness.platform.Template" "template_v2" {
    ///   identifier    = "temp"
    ///   org_id        = harness_platform_organization.test.id
    ///   name          = "temp"
    ///   comments      = "comments"
    ///   version       = "v2"
    ///   is_stable     = true
    ///   force_delete  = true
    ///   template_yaml = &lt;&lt;-EOT
    /// 			template:
    ///       name: "temp"
    ///       identifier: "temp"
    ///       versionLabel: v2
    ///       type: Pipeline
    ///       orgIdentifier: ${harness_platform_organization.test.id}
    ///       tags: {}
    ///       spec:
    ///         stages:
    ///           - stage:
    ///               name: dvvdvd
    ///               identifier: dvvdvd
    ///               description: ""
    ///               type: Deployment
    ///               spec:
    ///                 deploymentType: Kubernetes
    ///                 service:
    ///                   serviceRef: &lt;+input&gt;
    ///                   serviceInputs: &lt;+input&gt;
    ///                 environment:
    ///                   environmentRef: &lt;+input&gt;
    ///                   deployToAll: false
    ///                   environmentInputs: &lt;+input&gt;
    ///                   serviceOverrideInputs: &lt;+input&gt;
    ///                   infrastructureDefinitions: &lt;+input&gt;
    ///                 execution:
    ///                   steps:
    ///                     - step:
    ///                         name: Rollout Deployment
    ///                         identifier: rolloutDeployment
    ///                         type: K8sRollingDeploy
    ///                         timeout: 10m
    ///                         spec:
    ///                           skipDryRun: false
    ///                           pruningEnabled: false
    ///                   rollbackSteps:
    ///                     - step:
    ///                         name: Rollback Rollout Deployment
    ///                         identifier: rollbackRolloutDeployment
    ///                         type: K8sRollingRollback
    ///                         timeout: 10m
    ///                         spec:
    ///                           pruningEnabled: false
    ///               tags: {}
    ///               failureStrategies:
    ///                 - onFailure:
    ///                     errors:
    ///                       - AllErrors
    ///                     action:
    ///                       type: StageRollback
    ///       EOT
    /// }
    /// 
    /// resource "harness.platform.Template" "template_v1" {
    ///   identifier    = "temp"
    ///   org_id        = harness_platform_organization.test.id
    ///   name          = "temp"
    ///   comments      = "comments"
    ///   version       = "v1"
    ///   is_stable     = false
    ///   force_delete  = true
    ///   template_yaml = &lt;&lt;-EOT
    /// 			template:
    ///       name: "temp"
    ///       identifier: "temp"
    ///       versionLabel: v1
    ///       type: Pipeline
    ///       orgIdentifier: ${harness_platform_organization.test.id}
    ///       tags: {}
    ///       spec:
    ///         stages:
    ///           - stage:
    ///               name: dvvdvd
    ///               identifier: dvvdvd
    ///               description: ""
    ///               type: Deployment
    ///               spec:
    ///                 deploymentType: Kubernetes
    ///                 service:
    ///                   serviceRef: &lt;+input&gt;
    ///                   serviceInputs: &lt;+input&gt;
    ///                 environment:
    ///                   environmentRef: &lt;+input&gt;
    ///                   deployToAll: false
    ///                   environmentInputs: &lt;+input&gt;
    ///                   serviceOverrideInputs: &lt;+input&gt;
    ///                   infrastructureDefinitions: &lt;+input&gt;
    ///                 execution:
    ///                   steps:
    ///                     - step:
    ///                         name: Rollout Deployment
    ///                         identifier: rolloutDeployment
    ///                         type: K8sRollingDeploy
    ///                         timeout: 10m
    ///                         spec:
    ///                           skipDryRun: false
    ///                           pruningEnabled: false
    ///                   rollbackSteps:
    ///                     - step:
    ///                         name: Rollback Rollout Deployment
    ///                         identifier: rollbackRolloutDeployment
    ///                         type: K8sRollingRollback
    ///                         timeout: 10m
    ///                         spec:
    ///                           pruningEnabled: false
    ///               tags: {}
    ///               failureStrategies:
    ///                 - onFailure:
    ///                     errors:
    ///                       - AllErrors
    ///                     action:
    ///                       type: StageRollback
    /// 
    ///       EOT
    /// 
    ///   depends_on = [time_sleep.wait_10_seconds]
    /// }
    /// 
    /// resource "time_sleep" "wait_10_seconds" {
    ///   depends_on       = [harness_platform_template.test2]
    ///   destroy_duration = "10s"
    /// }
    /// 
    /// ##Importing Account Level Templates
    /// resource "harness.platform.Template" "test" {
    ///   identifier      = "accounttemplate"
    ///   name            = "accounttemplate"
    ///   version         = "v2"
    ///   is_stable       = false
    ///   import_from_git = true
    ///   git_import_details {
    ///     branch_name   = "main"
    ///     file_path     = ".harness/accounttemplate.yaml"
    ///     connector_ref = "account.DoNotDeleteGithub"
    ///     repo_name     = "open-repo"
    ///   }
    ///   template_import_request {
    ///     template_name        = "accounttemplate"
    ///     template_version     = "v2"
    ///     template_description = ""
    ///   }
    /// }
    /// 
    /// ##Importing Org Level Templates
    /// resource "harness.platform.Template" "test" {
    ///   identifier      = "orgtemplate"
    ///   name            = "orgtemplate"
    ///   org_id          = "org"
    ///   version         = "v2"
    ///   is_stable       = false
    ///   import_from_git = true
    ///   git_import_details {
    ///     branch_name   = "main"
    ///     file_path     = ".harness/orgtemplate.yaml"
    ///     connector_ref = "account.DoNotDeleteGithub"
    ///     repo_name     = "open-repo"
    ///   }
    ///   template_import_request {
    ///     template_name        = "orgtemplate"
    ///     template_version     = "v2"
    ///     template_description = ""
    ///   }
    /// }
    /// 
    /// ##Importing Project Level Templates
    /// resource "harness.platform.Template" "test" {
    ///   identifier      = "projecttemplate"
    ///   name            = "projecttemplate"
    ///   org_id          = "org"
    ///   project_id      = "project"
    ///   version         = "v2"
    ///   is_stable       = false
    ///   import_from_git = true
    ///   git_import_details {
    ///     branch_name   = "main"
    ///     file_path     = ".harness/projecttemplate.yaml"
    ///     connector_ref = "account.DoNotDeleteGithub"
    ///     repo_name     = "open-repo"
    ///   }
    ///   template_import_request {
    ///     template_name        = "projecttemplate"
    ///     template_version     = "v2"
    ///     template_description = ""
    ///   }
    /// }
    /// 
    /// Import org level template
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/template:Template example &lt;ord_id&gt;/&lt;template_id&gt;
    /// ```
    /// 
    /// Import project level template
    /// 
    /// ```sh
    /// $ pulumi import harness:platform/template:Template example &lt;org_id&gt;/&lt;project_id&gt;/&lt;template_id&gt;
    /// ```
    /// </summary>
    [HarnessResourceType("harness:platform/template:Template")]
    public partial class Template : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specify comment with respect to changes.
        /// </summary>
        [Output("comments")]
        public Output<string?> Comments { get; private set; } = null!;

        /// <summary>
        /// Description of the entity. Description field is deprecated
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
        /// </summary>
        [Output("forceDelete")]
        public Output<string> ForceDelete { get; private set; } = null!;

        /// <summary>
        /// Contains parameters related to creating an Entity for Git Experience.
        /// </summary>
        [Output("gitDetails")]
        public Output<Outputs.TemplateGitDetails> GitDetails { get; private set; } = null!;

        /// <summary>
        /// Contains Git Information for importing entities from Git
        /// </summary>
        [Output("gitImportDetails")]
        public Output<Outputs.TemplateGitImportDetails?> GitImportDetails { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the resource
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Flag to set if importing from Git
        /// </summary>
        [Output("importFromGit")]
        public Output<bool?> ImportFromGit { get; private set; } = null!;

        /// <summary>
        /// True if given version for template to be set as stable.
        /// </summary>
        [Output("isStable")]
        public Output<bool> IsStable { get; private set; } = null!;

        /// <summary>
        /// Name of the Variable
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Organization Identifier for the Entity
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Project Identifier for the Entity
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Contains parameters for importing template.
        /// </summary>
        [Output("templateImportRequest")]
        public Output<Outputs.TemplateTemplateImportRequest?> TemplateImportRequest { get; private set; } = null!;

        /// <summary>
        /// Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
        /// </summary>
        [Output("templateYaml")]
        public Output<string> TemplateYaml { get; private set; } = null!;

        /// <summary>
        /// Version Label for Template.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Template resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Template(string name, TemplateArgs args, CustomResourceOptions? options = null)
            : base("harness:platform/template:Template", name, args ?? new TemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Template(string name, Input<string> id, TemplateState? state = null, CustomResourceOptions? options = null)
            : base("harness:platform/template:Template", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Template resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Template Get(string name, Input<string> id, TemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new Template(name, id, state, options);
        }
    }

    public sealed class TemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify comment with respect to changes.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// Description of the entity. Description field is deprecated
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
        /// </summary>
        [Input("forceDelete")]
        public Input<string>? ForceDelete { get; set; }

        /// <summary>
        /// Contains parameters related to creating an Entity for Git Experience.
        /// </summary>
        [Input("gitDetails")]
        public Input<Inputs.TemplateGitDetailsArgs>? GitDetails { get; set; }

        /// <summary>
        /// Contains Git Information for importing entities from Git
        /// </summary>
        [Input("gitImportDetails")]
        public Input<Inputs.TemplateGitImportDetailsArgs>? GitImportDetails { get; set; }

        /// <summary>
        /// Unique identifier of the resource
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Flag to set if importing from Git
        /// </summary>
        [Input("importFromGit")]
        public Input<bool>? ImportFromGit { get; set; }

        /// <summary>
        /// True if given version for template to be set as stable.
        /// </summary>
        [Input("isStable")]
        public Input<bool>? IsStable { get; set; }

        /// <summary>
        /// Name of the Variable
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization Identifier for the Entity
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project Identifier for the Entity
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Contains parameters for importing template.
        /// </summary>
        [Input("templateImportRequest")]
        public Input<Inputs.TemplateTemplateImportRequestArgs>? TemplateImportRequest { get; set; }

        /// <summary>
        /// Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
        /// </summary>
        [Input("templateYaml")]
        public Input<string>? TemplateYaml { get; set; }

        /// <summary>
        /// Version Label for Template.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public TemplateArgs()
        {
        }
        public static new TemplateArgs Empty => new TemplateArgs();
    }

    public sealed class TemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify comment with respect to changes.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// Description of the entity. Description field is deprecated
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable this flag for force deletion of template. It will delete the Harness entity even if your pipelines or other entities reference it
        /// </summary>
        [Input("forceDelete")]
        public Input<string>? ForceDelete { get; set; }

        /// <summary>
        /// Contains parameters related to creating an Entity for Git Experience.
        /// </summary>
        [Input("gitDetails")]
        public Input<Inputs.TemplateGitDetailsGetArgs>? GitDetails { get; set; }

        /// <summary>
        /// Contains Git Information for importing entities from Git
        /// </summary>
        [Input("gitImportDetails")]
        public Input<Inputs.TemplateGitImportDetailsGetArgs>? GitImportDetails { get; set; }

        /// <summary>
        /// Unique identifier of the resource
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Flag to set if importing from Git
        /// </summary>
        [Input("importFromGit")]
        public Input<bool>? ImportFromGit { get; set; }

        /// <summary>
        /// True if given version for template to be set as stable.
        /// </summary>
        [Input("isStable")]
        public Input<bool>? IsStable { get; set; }

        /// <summary>
        /// Name of the Variable
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Organization Identifier for the Entity
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Project Identifier for the Entity
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags to associate with the resource.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Contains parameters for importing template.
        /// </summary>
        [Input("templateImportRequest")]
        public Input<Inputs.TemplateTemplateImportRequestGetArgs>? TemplateImportRequest { get; set; }

        /// <summary>
        /// Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.
        /// </summary>
        [Input("templateYaml")]
        public Input<string>? TemplateYaml { get; set; }

        /// <summary>
        /// Version Label for Template.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public TemplateState()
        {
        }
        public static new TemplateState Empty => new TemplateState();
    }
}
