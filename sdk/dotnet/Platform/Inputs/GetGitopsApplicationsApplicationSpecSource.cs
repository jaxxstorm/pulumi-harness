// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform.Inputs
{

    public sealed class GetGitopsApplicationsApplicationSpecSourceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Helm chart name, and must be specified for the GitOps applications sourced from a helm repo.
        /// </summary>
        [Input("chart")]
        public string? Chart { get; set; }

        [Input("directories")]
        private List<Inputs.GetGitopsApplicationsApplicationSpecSourceDirectoryArgs>? _directories;

        /// <summary>
        /// Options for applications of type plain YAML or Jsonnet.
        /// </summary>
        public List<Inputs.GetGitopsApplicationsApplicationSpecSourceDirectoryArgs> Directories
        {
            get => _directories ?? (_directories = new List<Inputs.GetGitopsApplicationsApplicationSpecSourceDirectoryArgs>());
            set => _directories = value;
        }

        [Input("helms")]
        private List<Inputs.GetGitopsApplicationsApplicationSpecSourceHelmArgs>? _helms;

        /// <summary>
        /// Holds helm specific options.
        /// </summary>
        public List<Inputs.GetGitopsApplicationsApplicationSpecSourceHelmArgs> Helms
        {
            get => _helms ?? (_helms = new List<Inputs.GetGitopsApplicationsApplicationSpecSourceHelmArgs>());
            set => _helms = value;
        }

        [Input("ksonnets")]
        private List<Inputs.GetGitopsApplicationsApplicationSpecSourceKsonnetArgs>? _ksonnets;

        /// <summary>
        /// Ksonnet specific options.
        /// </summary>
        public List<Inputs.GetGitopsApplicationsApplicationSpecSourceKsonnetArgs> Ksonnets
        {
            get => _ksonnets ?? (_ksonnets = new List<Inputs.GetGitopsApplicationsApplicationSpecSourceKsonnetArgs>());
            set => _ksonnets = value;
        }

        [Input("kustomizes")]
        private List<Inputs.GetGitopsApplicationsApplicationSpecSourceKustomizeArgs>? _kustomizes;

        /// <summary>
        /// Options specific to a GitOps application source specific to Kustomize.
        /// </summary>
        public List<Inputs.GetGitopsApplicationsApplicationSpecSourceKustomizeArgs> Kustomizes
        {
            get => _kustomizes ?? (_kustomizes = new List<Inputs.GetGitopsApplicationsApplicationSpecSourceKustomizeArgs>());
            set => _kustomizes = value;
        }

        /// <summary>
        /// Directory path within the git repository, and is only valid for the GitOps applications sourced from git.
        /// </summary>
        [Input("path")]
        public string? Path { get; set; }

        [Input("plugins")]
        private List<Inputs.GetGitopsApplicationsApplicationSpecSourcePluginArgs>? _plugins;

        /// <summary>
        /// Options specific to config management plugins.
        /// </summary>
        public List<Inputs.GetGitopsApplicationsApplicationSpecSourcePluginArgs> Plugins
        {
            get => _plugins ?? (_plugins = new List<Inputs.GetGitopsApplicationsApplicationSpecSourcePluginArgs>());
            set => _plugins = value;
        }

        /// <summary>
        /// URL to the repository (git or helm) that contains the GitOps application manifests.
        /// </summary>
        [Input("repoUrl")]
        public string? RepoUrl { get; set; }

        /// <summary>
        /// Revision of the source to sync the GitOps application to. In case of git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag of the chart's version.
        /// </summary>
        [Input("targetRevision")]
        public string? TargetRevision { get; set; }

        public GetGitopsApplicationsApplicationSpecSourceArgs()
        {
        }
        public static new GetGitopsApplicationsApplicationSpecSourceArgs Empty => new GetGitopsApplicationsApplicationSpecSourceArgs();
    }
}
