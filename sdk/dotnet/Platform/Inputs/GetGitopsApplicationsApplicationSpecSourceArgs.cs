// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harness.Platform.Inputs
{

    public sealed class GetGitopsApplicationsApplicationSpecSourceInputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Helm chart name, and must be specified for the GitOps applications sourced from a helm repo.
        /// </summary>
        [Input("chart")]
        public Input<string>? Chart { get; set; }

        [Input("directories")]
        private InputList<Inputs.GetGitopsApplicationsApplicationSpecSourceDirectoryInputArgs>? _directories;

        /// <summary>
        /// Options for applications of type plain YAML or Jsonnet.
        /// </summary>
        public InputList<Inputs.GetGitopsApplicationsApplicationSpecSourceDirectoryInputArgs> Directories
        {
            get => _directories ?? (_directories = new InputList<Inputs.GetGitopsApplicationsApplicationSpecSourceDirectoryInputArgs>());
            set => _directories = value;
        }

        [Input("helms")]
        private InputList<Inputs.GetGitopsApplicationsApplicationSpecSourceHelmInputArgs>? _helms;

        /// <summary>
        /// Holds helm specific options.
        /// </summary>
        public InputList<Inputs.GetGitopsApplicationsApplicationSpecSourceHelmInputArgs> Helms
        {
            get => _helms ?? (_helms = new InputList<Inputs.GetGitopsApplicationsApplicationSpecSourceHelmInputArgs>());
            set => _helms = value;
        }

        [Input("ksonnets")]
        private InputList<Inputs.GetGitopsApplicationsApplicationSpecSourceKsonnetInputArgs>? _ksonnets;

        /// <summary>
        /// Ksonnet specific options.
        /// </summary>
        public InputList<Inputs.GetGitopsApplicationsApplicationSpecSourceKsonnetInputArgs> Ksonnets
        {
            get => _ksonnets ?? (_ksonnets = new InputList<Inputs.GetGitopsApplicationsApplicationSpecSourceKsonnetInputArgs>());
            set => _ksonnets = value;
        }

        [Input("kustomizes")]
        private InputList<Inputs.GetGitopsApplicationsApplicationSpecSourceKustomizeInputArgs>? _kustomizes;

        /// <summary>
        /// Options specific to a GitOps application source specific to Kustomize.
        /// </summary>
        public InputList<Inputs.GetGitopsApplicationsApplicationSpecSourceKustomizeInputArgs> Kustomizes
        {
            get => _kustomizes ?? (_kustomizes = new InputList<Inputs.GetGitopsApplicationsApplicationSpecSourceKustomizeInputArgs>());
            set => _kustomizes = value;
        }

        /// <summary>
        /// Directory path within the git repository, and is only valid for the GitOps applications sourced from git.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("plugins")]
        private InputList<Inputs.GetGitopsApplicationsApplicationSpecSourcePluginInputArgs>? _plugins;

        /// <summary>
        /// Options specific to config management plugins.
        /// </summary>
        public InputList<Inputs.GetGitopsApplicationsApplicationSpecSourcePluginInputArgs> Plugins
        {
            get => _plugins ?? (_plugins = new InputList<Inputs.GetGitopsApplicationsApplicationSpecSourcePluginInputArgs>());
            set => _plugins = value;
        }

        /// <summary>
        /// URL to the repository (git or helm) that contains the GitOps application manifests.
        /// </summary>
        [Input("repoUrl")]
        public Input<string>? RepoUrl { get; set; }

        /// <summary>
        /// Revision of the source to sync the GitOps application to. In case of git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag of the chart's version.
        /// </summary>
        [Input("targetRevision")]
        public Input<string>? TargetRevision { get; set; }

        public GetGitopsApplicationsApplicationSpecSourceInputArgs()
        {
        }
        public static new GetGitopsApplicationsApplicationSpecSourceInputArgs Empty => new GetGitopsApplicationsApplicationSpecSourceInputArgs();
    }
}
