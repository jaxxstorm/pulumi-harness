// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Resource for creating a Harness Gitops Repositories Certificates.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harness from "@pulumi/harness";
 *
 * const example = new harness.platform.GitOpsRepoCert("example", {
 *     requests: [{
 *         certificates: [{
 *             metadatas: [{}],
 *             items: [{
 *                 serverName: "serverName",
 *                 certType: "https",
 *                 certData: "yourcertdata",
 *             }],
 *         }],
 *         upsert: true,
 *     }],
 *     accountId: "account_id",
 *     agentId: "agent_id",
 * });
 * ```
 *
 * ## Import
 *
 * Import a Account level Gitops Repository Certificate
 *
 * ```sh
 * $ pulumi import harness:platform/gitOpsRepoCert:GitOpsRepoCert example <repocert_id>
 * ```
 */
export class GitOpsRepoCert extends pulumi.CustomResource {
    /**
     * Get an existing GitOpsRepoCert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GitOpsRepoCertState, opts?: pulumi.CustomResourceOptions): GitOpsRepoCert {
        return new GitOpsRepoCert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harness:platform/gitOpsRepoCert:GitOpsRepoCert';

    /**
     * Returns true if the given object is an instance of GitOpsRepoCert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GitOpsRepoCert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GitOpsRepoCert.__pulumiType;
    }

    /**
     * account identifier of the Repository Certificates.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * agent identifier of the Repository Certificates.
     */
    public readonly agentId!: pulumi.Output<string>;
    /**
     * organization identifier of the Repository Certificates.
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * project identifier of the Repository Certificates.
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Repository Certificates create/Update request.
     */
    public readonly requests!: pulumi.Output<outputs.platform.GitOpsRepoCertRequest[]>;

    /**
     * Create a GitOpsRepoCert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GitOpsRepoCertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GitOpsRepoCertArgs | GitOpsRepoCertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GitOpsRepoCertState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["agentId"] = state ? state.agentId : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["requests"] = state ? state.requests : undefined;
        } else {
            const args = argsOrState as GitOpsRepoCertArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.agentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentId'");
            }
            if ((!args || args.requests === undefined) && !opts.urn) {
                throw new Error("Missing required property 'requests'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["agentId"] = args ? args.agentId : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["requests"] = args ? args.requests : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GitOpsRepoCert.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GitOpsRepoCert resources.
 */
export interface GitOpsRepoCertState {
    /**
     * account identifier of the Repository Certificates.
     */
    accountId?: pulumi.Input<string>;
    /**
     * agent identifier of the Repository Certificates.
     */
    agentId?: pulumi.Input<string>;
    /**
     * organization identifier of the Repository Certificates.
     */
    orgId?: pulumi.Input<string>;
    /**
     * project identifier of the Repository Certificates.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Repository Certificates create/Update request.
     */
    requests?: pulumi.Input<pulumi.Input<inputs.platform.GitOpsRepoCertRequest>[]>;
}

/**
 * The set of arguments for constructing a GitOpsRepoCert resource.
 */
export interface GitOpsRepoCertArgs {
    /**
     * account identifier of the Repository Certificates.
     */
    accountId: pulumi.Input<string>;
    /**
     * agent identifier of the Repository Certificates.
     */
    agentId: pulumi.Input<string>;
    /**
     * organization identifier of the Repository Certificates.
     */
    orgId?: pulumi.Input<string>;
    /**
     * project identifier of the Repository Certificates.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Repository Certificates create/Update request.
     */
    requests: pulumi.Input<pulumi.Input<inputs.platform.GitOpsRepoCertRequest>[]>;
}
