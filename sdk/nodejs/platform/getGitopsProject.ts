// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 */
export function getGitopsProject(args: GetGitopsProjectArgs, opts?: pulumi.InvokeOptions): Promise<GetGitopsProjectResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("harness:platform/getGitopsProject:getGitopsProject", {
        "accountId": args.accountId,
        "agentId": args.agentId,
        "orgId": args.orgId,
        "projectId": args.projectId,
        "projects": args.projects,
        "queryName": args.queryName,
        "upsert": args.upsert,
    }, opts);
}

/**
 * A collection of arguments for invoking getGitopsProject.
 */
export interface GetGitopsProjectArgs {
    /**
     * Account identifier of the GitOps project.
     */
    accountId: string;
    /**
     * Agent identifier of the GitOps project.
     */
    agentId: string;
    /**
     * Org identifier of the GitOps project.
     */
    orgId?: string;
    /**
     * Project identifier of the GitOps repository.
     */
    projectId?: string;
    /**
     * App projects configuration details.
     */
    projects: inputs.platform.GetGitopsProjectProject[];
    /**
     * Identifier for the GitOps project.
     */
    queryName?: string;
    /**
     * Indicates if the GitOps repository should be updated if existing and inserted if not.
     */
    upsert?: boolean;
}

/**
 * A collection of values returned by getGitopsProject.
 */
export interface GetGitopsProjectResult {
    /**
     * Account identifier of the GitOps project.
     */
    readonly accountId: string;
    /**
     * Agent identifier of the GitOps project.
     */
    readonly agentId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Org identifier of the GitOps project.
     */
    readonly orgId?: string;
    /**
     * Project identifier of the GitOps repository.
     */
    readonly projectId?: string;
    /**
     * App projects configuration details.
     */
    readonly projects: outputs.platform.GetGitopsProjectProject[];
    /**
     * Identifier for the GitOps project.
     */
    readonly queryName?: string;
    /**
     * Indicates if the GitOps repository should be updated if existing and inserted if not.
     */
    readonly upsert?: boolean;
}
/**
 * ## Example Usage
 */
export function getGitopsProjectOutput(args: GetGitopsProjectOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGitopsProjectResult> {
    return pulumi.output(args).apply((a: any) => getGitopsProject(a, opts))
}

/**
 * A collection of arguments for invoking getGitopsProject.
 */
export interface GetGitopsProjectOutputArgs {
    /**
     * Account identifier of the GitOps project.
     */
    accountId: pulumi.Input<string>;
    /**
     * Agent identifier of the GitOps project.
     */
    agentId: pulumi.Input<string>;
    /**
     * Org identifier of the GitOps project.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Project identifier of the GitOps repository.
     */
    projectId?: pulumi.Input<string>;
    /**
     * App projects configuration details.
     */
    projects: pulumi.Input<pulumi.Input<inputs.platform.GetGitopsProjectProjectArgs>[]>;
    /**
     * Identifier for the GitOps project.
     */
    queryName?: pulumi.Input<string>;
    /**
     * Indicates if the GitOps repository should be updated if existing and inserted if not.
     */
    upsert?: pulumi.Input<boolean>;
}
