// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for creating a Harness Gitops Repositories Certificates.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-harness/sdk/go/harness/platform"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := platform.NewGitOpsRepoCert(ctx, "example", &platform.GitOpsRepoCertArgs{
//				Requests: platform.GitOpsRepoCertRequestArray{
//					&platform.GitOpsRepoCertRequestArgs{
//						Certificates: platform.GitOpsRepoCertRequestCertificateArray{
//							&platform.GitOpsRepoCertRequestCertificateArgs{
//								Metadatas: platform.GitOpsRepoCertRequestCertificateMetadataArray{
//									nil,
//								},
//								Items: platform.GitOpsRepoCertRequestCertificateItemArray{
//									&platform.GitOpsRepoCertRequestCertificateItemArgs{
//										ServerName: pulumi.String("serverName"),
//										CertType:   pulumi.String("https"),
//										CertData:   pulumi.String("yourcertdata"),
//									},
//								},
//							},
//						},
//						Upsert: pulumi.Bool(true),
//					},
//				},
//				AccountId: pulumi.String("account_id"),
//				AgentId:   pulumi.String("agent_id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import a Account level Gitops Repository Certificate
//
// ```sh
// $ pulumi import harness:platform/gitOpsRepoCert:GitOpsRepoCert example <repocert_id>
// ```
type GitOpsRepoCert struct {
	pulumi.CustomResourceState

	// account identifier of the Repository Certificates.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// agent identifier of the Repository Certificates.
	AgentId pulumi.StringOutput `pulumi:"agentId"`
	// organization identifier of the Repository Certificates.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// project identifier of the Repository Certificates.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Repository Certificates create/Update request.
	Requests GitOpsRepoCertRequestArrayOutput `pulumi:"requests"`
}

// NewGitOpsRepoCert registers a new resource with the given unique name, arguments, and options.
func NewGitOpsRepoCert(ctx *pulumi.Context,
	name string, args *GitOpsRepoCertArgs, opts ...pulumi.ResourceOption) (*GitOpsRepoCert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.AgentId == nil {
		return nil, errors.New("invalid value for required argument 'AgentId'")
	}
	if args.Requests == nil {
		return nil, errors.New("invalid value for required argument 'Requests'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitOpsRepoCert
	err := ctx.RegisterResource("harness:platform/gitOpsRepoCert:GitOpsRepoCert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitOpsRepoCert gets an existing GitOpsRepoCert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitOpsRepoCert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitOpsRepoCertState, opts ...pulumi.ResourceOption) (*GitOpsRepoCert, error) {
	var resource GitOpsRepoCert
	err := ctx.ReadResource("harness:platform/gitOpsRepoCert:GitOpsRepoCert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitOpsRepoCert resources.
type gitOpsRepoCertState struct {
	// account identifier of the Repository Certificates.
	AccountId *string `pulumi:"accountId"`
	// agent identifier of the Repository Certificates.
	AgentId *string `pulumi:"agentId"`
	// organization identifier of the Repository Certificates.
	OrgId *string `pulumi:"orgId"`
	// project identifier of the Repository Certificates.
	ProjectId *string `pulumi:"projectId"`
	// Repository Certificates create/Update request.
	Requests []GitOpsRepoCertRequest `pulumi:"requests"`
}

type GitOpsRepoCertState struct {
	// account identifier of the Repository Certificates.
	AccountId pulumi.StringPtrInput
	// agent identifier of the Repository Certificates.
	AgentId pulumi.StringPtrInput
	// organization identifier of the Repository Certificates.
	OrgId pulumi.StringPtrInput
	// project identifier of the Repository Certificates.
	ProjectId pulumi.StringPtrInput
	// Repository Certificates create/Update request.
	Requests GitOpsRepoCertRequestArrayInput
}

func (GitOpsRepoCertState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitOpsRepoCertState)(nil)).Elem()
}

type gitOpsRepoCertArgs struct {
	// account identifier of the Repository Certificates.
	AccountId string `pulumi:"accountId"`
	// agent identifier of the Repository Certificates.
	AgentId string `pulumi:"agentId"`
	// organization identifier of the Repository Certificates.
	OrgId *string `pulumi:"orgId"`
	// project identifier of the Repository Certificates.
	ProjectId *string `pulumi:"projectId"`
	// Repository Certificates create/Update request.
	Requests []GitOpsRepoCertRequest `pulumi:"requests"`
}

// The set of arguments for constructing a GitOpsRepoCert resource.
type GitOpsRepoCertArgs struct {
	// account identifier of the Repository Certificates.
	AccountId pulumi.StringInput
	// agent identifier of the Repository Certificates.
	AgentId pulumi.StringInput
	// organization identifier of the Repository Certificates.
	OrgId pulumi.StringPtrInput
	// project identifier of the Repository Certificates.
	ProjectId pulumi.StringPtrInput
	// Repository Certificates create/Update request.
	Requests GitOpsRepoCertRequestArrayInput
}

func (GitOpsRepoCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitOpsRepoCertArgs)(nil)).Elem()
}

type GitOpsRepoCertInput interface {
	pulumi.Input

	ToGitOpsRepoCertOutput() GitOpsRepoCertOutput
	ToGitOpsRepoCertOutputWithContext(ctx context.Context) GitOpsRepoCertOutput
}

func (*GitOpsRepoCert) ElementType() reflect.Type {
	return reflect.TypeOf((**GitOpsRepoCert)(nil)).Elem()
}

func (i *GitOpsRepoCert) ToGitOpsRepoCertOutput() GitOpsRepoCertOutput {
	return i.ToGitOpsRepoCertOutputWithContext(context.Background())
}

func (i *GitOpsRepoCert) ToGitOpsRepoCertOutputWithContext(ctx context.Context) GitOpsRepoCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsRepoCertOutput)
}

// GitOpsRepoCertArrayInput is an input type that accepts GitOpsRepoCertArray and GitOpsRepoCertArrayOutput values.
// You can construct a concrete instance of `GitOpsRepoCertArrayInput` via:
//
//	GitOpsRepoCertArray{ GitOpsRepoCertArgs{...} }
type GitOpsRepoCertArrayInput interface {
	pulumi.Input

	ToGitOpsRepoCertArrayOutput() GitOpsRepoCertArrayOutput
	ToGitOpsRepoCertArrayOutputWithContext(context.Context) GitOpsRepoCertArrayOutput
}

type GitOpsRepoCertArray []GitOpsRepoCertInput

func (GitOpsRepoCertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitOpsRepoCert)(nil)).Elem()
}

func (i GitOpsRepoCertArray) ToGitOpsRepoCertArrayOutput() GitOpsRepoCertArrayOutput {
	return i.ToGitOpsRepoCertArrayOutputWithContext(context.Background())
}

func (i GitOpsRepoCertArray) ToGitOpsRepoCertArrayOutputWithContext(ctx context.Context) GitOpsRepoCertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsRepoCertArrayOutput)
}

// GitOpsRepoCertMapInput is an input type that accepts GitOpsRepoCertMap and GitOpsRepoCertMapOutput values.
// You can construct a concrete instance of `GitOpsRepoCertMapInput` via:
//
//	GitOpsRepoCertMap{ "key": GitOpsRepoCertArgs{...} }
type GitOpsRepoCertMapInput interface {
	pulumi.Input

	ToGitOpsRepoCertMapOutput() GitOpsRepoCertMapOutput
	ToGitOpsRepoCertMapOutputWithContext(context.Context) GitOpsRepoCertMapOutput
}

type GitOpsRepoCertMap map[string]GitOpsRepoCertInput

func (GitOpsRepoCertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitOpsRepoCert)(nil)).Elem()
}

func (i GitOpsRepoCertMap) ToGitOpsRepoCertMapOutput() GitOpsRepoCertMapOutput {
	return i.ToGitOpsRepoCertMapOutputWithContext(context.Background())
}

func (i GitOpsRepoCertMap) ToGitOpsRepoCertMapOutputWithContext(ctx context.Context) GitOpsRepoCertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitOpsRepoCertMapOutput)
}

type GitOpsRepoCertOutput struct{ *pulumi.OutputState }

func (GitOpsRepoCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitOpsRepoCert)(nil)).Elem()
}

func (o GitOpsRepoCertOutput) ToGitOpsRepoCertOutput() GitOpsRepoCertOutput {
	return o
}

func (o GitOpsRepoCertOutput) ToGitOpsRepoCertOutputWithContext(ctx context.Context) GitOpsRepoCertOutput {
	return o
}

// account identifier of the Repository Certificates.
func (o GitOpsRepoCertOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsRepoCert) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// agent identifier of the Repository Certificates.
func (o GitOpsRepoCertOutput) AgentId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitOpsRepoCert) pulumi.StringOutput { return v.AgentId }).(pulumi.StringOutput)
}

// organization identifier of the Repository Certificates.
func (o GitOpsRepoCertOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsRepoCert) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// project identifier of the Repository Certificates.
func (o GitOpsRepoCertOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitOpsRepoCert) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Repository Certificates create/Update request.
func (o GitOpsRepoCertOutput) Requests() GitOpsRepoCertRequestArrayOutput {
	return o.ApplyT(func(v *GitOpsRepoCert) GitOpsRepoCertRequestArrayOutput { return v.Requests }).(GitOpsRepoCertRequestArrayOutput)
}

type GitOpsRepoCertArrayOutput struct{ *pulumi.OutputState }

func (GitOpsRepoCertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitOpsRepoCert)(nil)).Elem()
}

func (o GitOpsRepoCertArrayOutput) ToGitOpsRepoCertArrayOutput() GitOpsRepoCertArrayOutput {
	return o
}

func (o GitOpsRepoCertArrayOutput) ToGitOpsRepoCertArrayOutputWithContext(ctx context.Context) GitOpsRepoCertArrayOutput {
	return o
}

func (o GitOpsRepoCertArrayOutput) Index(i pulumi.IntInput) GitOpsRepoCertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitOpsRepoCert {
		return vs[0].([]*GitOpsRepoCert)[vs[1].(int)]
	}).(GitOpsRepoCertOutput)
}

type GitOpsRepoCertMapOutput struct{ *pulumi.OutputState }

func (GitOpsRepoCertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitOpsRepoCert)(nil)).Elem()
}

func (o GitOpsRepoCertMapOutput) ToGitOpsRepoCertMapOutput() GitOpsRepoCertMapOutput {
	return o
}

func (o GitOpsRepoCertMapOutput) ToGitOpsRepoCertMapOutputWithContext(ctx context.Context) GitOpsRepoCertMapOutput {
	return o
}

func (o GitOpsRepoCertMapOutput) MapIndex(k pulumi.StringInput) GitOpsRepoCertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitOpsRepoCert {
		return vs[0].(map[string]*GitOpsRepoCert)[vs[1].(string)]
	}).(GitOpsRepoCertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitOpsRepoCertInput)(nil)).Elem(), &GitOpsRepoCert{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitOpsRepoCertArrayInput)(nil)).Elem(), GitOpsRepoCertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitOpsRepoCertMapInput)(nil)).Elem(), GitOpsRepoCertMap{})
	pulumi.RegisterOutputType(GitOpsRepoCertOutput{})
	pulumi.RegisterOutputType(GitOpsRepoCertArrayOutput{})
	pulumi.RegisterOutputType(GitOpsRepoCertMapOutput{})
}
