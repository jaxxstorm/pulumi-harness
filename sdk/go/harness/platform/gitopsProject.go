// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// # Import an Account level Gitops Repository
//
// ```sh
// $ pulumi import harness:platform/gitopsProject:GitopsProject example <agent_id>/<query_name>
// ```
//
// # Import an Org level Gitops Repository
//
// ```sh
// $ pulumi import harness:platform/gitopsProject:GitopsProject example <organization_id>/<agent_id>/<query_name
// ```
//
// # Import a Project level Gitops Repository
//
// ```sh
// $ pulumi import harness:platform/gitopsProject:GitopsProject example <organization_id>/<project_id>/<agent_id>/<query_name>
// ```
type GitopsProject struct {
	pulumi.CustomResourceState

	// Account identifier of the GitOps project.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Agent identifier of the GitOps project.
	AgentId pulumi.StringOutput `pulumi:"agentId"`
	// Org identifier of the GitOps project.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Project identifier of the GitOps repository.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// App projects configuration details.
	Projects GitopsProjectProjectArrayOutput `pulumi:"projects"`
	// Identifier for the GitOps project.
	QueryName pulumi.StringPtrOutput `pulumi:"queryName"`
	// Indicates if the GitOps repository should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrOutput `pulumi:"upsert"`
}

// NewGitopsProject registers a new resource with the given unique name, arguments, and options.
func NewGitopsProject(ctx *pulumi.Context,
	name string, args *GitopsProjectArgs, opts ...pulumi.ResourceOption) (*GitopsProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.AgentId == nil {
		return nil, errors.New("invalid value for required argument 'AgentId'")
	}
	if args.Projects == nil {
		return nil, errors.New("invalid value for required argument 'Projects'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GitopsProject
	err := ctx.RegisterResource("harness:platform/gitopsProject:GitopsProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitopsProject gets an existing GitopsProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitopsProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitopsProjectState, opts ...pulumi.ResourceOption) (*GitopsProject, error) {
	var resource GitopsProject
	err := ctx.ReadResource("harness:platform/gitopsProject:GitopsProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitopsProject resources.
type gitopsProjectState struct {
	// Account identifier of the GitOps project.
	AccountId *string `pulumi:"accountId"`
	// Agent identifier of the GitOps project.
	AgentId *string `pulumi:"agentId"`
	// Org identifier of the GitOps project.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the GitOps repository.
	ProjectId *string `pulumi:"projectId"`
	// App projects configuration details.
	Projects []GitopsProjectProject `pulumi:"projects"`
	// Identifier for the GitOps project.
	QueryName *string `pulumi:"queryName"`
	// Indicates if the GitOps repository should be updated if existing and inserted if not.
	Upsert *bool `pulumi:"upsert"`
}

type GitopsProjectState struct {
	// Account identifier of the GitOps project.
	AccountId pulumi.StringPtrInput
	// Agent identifier of the GitOps project.
	AgentId pulumi.StringPtrInput
	// Org identifier of the GitOps project.
	OrgId pulumi.StringPtrInput
	// Project identifier of the GitOps repository.
	ProjectId pulumi.StringPtrInput
	// App projects configuration details.
	Projects GitopsProjectProjectArrayInput
	// Identifier for the GitOps project.
	QueryName pulumi.StringPtrInput
	// Indicates if the GitOps repository should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrInput
}

func (GitopsProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitopsProjectState)(nil)).Elem()
}

type gitopsProjectArgs struct {
	// Account identifier of the GitOps project.
	AccountId string `pulumi:"accountId"`
	// Agent identifier of the GitOps project.
	AgentId string `pulumi:"agentId"`
	// Org identifier of the GitOps project.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the GitOps repository.
	ProjectId *string `pulumi:"projectId"`
	// App projects configuration details.
	Projects []GitopsProjectProject `pulumi:"projects"`
	// Identifier for the GitOps project.
	QueryName *string `pulumi:"queryName"`
	// Indicates if the GitOps repository should be updated if existing and inserted if not.
	Upsert *bool `pulumi:"upsert"`
}

// The set of arguments for constructing a GitopsProject resource.
type GitopsProjectArgs struct {
	// Account identifier of the GitOps project.
	AccountId pulumi.StringInput
	// Agent identifier of the GitOps project.
	AgentId pulumi.StringInput
	// Org identifier of the GitOps project.
	OrgId pulumi.StringPtrInput
	// Project identifier of the GitOps repository.
	ProjectId pulumi.StringPtrInput
	// App projects configuration details.
	Projects GitopsProjectProjectArrayInput
	// Identifier for the GitOps project.
	QueryName pulumi.StringPtrInput
	// Indicates if the GitOps repository should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrInput
}

func (GitopsProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitopsProjectArgs)(nil)).Elem()
}

type GitopsProjectInput interface {
	pulumi.Input

	ToGitopsProjectOutput() GitopsProjectOutput
	ToGitopsProjectOutputWithContext(ctx context.Context) GitopsProjectOutput
}

func (*GitopsProject) ElementType() reflect.Type {
	return reflect.TypeOf((**GitopsProject)(nil)).Elem()
}

func (i *GitopsProject) ToGitopsProjectOutput() GitopsProjectOutput {
	return i.ToGitopsProjectOutputWithContext(context.Background())
}

func (i *GitopsProject) ToGitopsProjectOutputWithContext(ctx context.Context) GitopsProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsProjectOutput)
}

// GitopsProjectArrayInput is an input type that accepts GitopsProjectArray and GitopsProjectArrayOutput values.
// You can construct a concrete instance of `GitopsProjectArrayInput` via:
//
//	GitopsProjectArray{ GitopsProjectArgs{...} }
type GitopsProjectArrayInput interface {
	pulumi.Input

	ToGitopsProjectArrayOutput() GitopsProjectArrayOutput
	ToGitopsProjectArrayOutputWithContext(context.Context) GitopsProjectArrayOutput
}

type GitopsProjectArray []GitopsProjectInput

func (GitopsProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitopsProject)(nil)).Elem()
}

func (i GitopsProjectArray) ToGitopsProjectArrayOutput() GitopsProjectArrayOutput {
	return i.ToGitopsProjectArrayOutputWithContext(context.Background())
}

func (i GitopsProjectArray) ToGitopsProjectArrayOutputWithContext(ctx context.Context) GitopsProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsProjectArrayOutput)
}

// GitopsProjectMapInput is an input type that accepts GitopsProjectMap and GitopsProjectMapOutput values.
// You can construct a concrete instance of `GitopsProjectMapInput` via:
//
//	GitopsProjectMap{ "key": GitopsProjectArgs{...} }
type GitopsProjectMapInput interface {
	pulumi.Input

	ToGitopsProjectMapOutput() GitopsProjectMapOutput
	ToGitopsProjectMapOutputWithContext(context.Context) GitopsProjectMapOutput
}

type GitopsProjectMap map[string]GitopsProjectInput

func (GitopsProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitopsProject)(nil)).Elem()
}

func (i GitopsProjectMap) ToGitopsProjectMapOutput() GitopsProjectMapOutput {
	return i.ToGitopsProjectMapOutputWithContext(context.Background())
}

func (i GitopsProjectMap) ToGitopsProjectMapOutputWithContext(ctx context.Context) GitopsProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitopsProjectMapOutput)
}

type GitopsProjectOutput struct{ *pulumi.OutputState }

func (GitopsProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitopsProject)(nil)).Elem()
}

func (o GitopsProjectOutput) ToGitopsProjectOutput() GitopsProjectOutput {
	return o
}

func (o GitopsProjectOutput) ToGitopsProjectOutputWithContext(ctx context.Context) GitopsProjectOutput {
	return o
}

// Account identifier of the GitOps project.
func (o GitopsProjectOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsProject) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Agent identifier of the GitOps project.
func (o GitopsProjectOutput) AgentId() pulumi.StringOutput {
	return o.ApplyT(func(v *GitopsProject) pulumi.StringOutput { return v.AgentId }).(pulumi.StringOutput)
}

// Org identifier of the GitOps project.
func (o GitopsProjectOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitopsProject) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Project identifier of the GitOps repository.
func (o GitopsProjectOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitopsProject) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// App projects configuration details.
func (o GitopsProjectOutput) Projects() GitopsProjectProjectArrayOutput {
	return o.ApplyT(func(v *GitopsProject) GitopsProjectProjectArrayOutput { return v.Projects }).(GitopsProjectProjectArrayOutput)
}

// Identifier for the GitOps project.
func (o GitopsProjectOutput) QueryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitopsProject) pulumi.StringPtrOutput { return v.QueryName }).(pulumi.StringPtrOutput)
}

// Indicates if the GitOps repository should be updated if existing and inserted if not.
func (o GitopsProjectOutput) Upsert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitopsProject) pulumi.BoolPtrOutput { return v.Upsert }).(pulumi.BoolPtrOutput)
}

type GitopsProjectArrayOutput struct{ *pulumi.OutputState }

func (GitopsProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitopsProject)(nil)).Elem()
}

func (o GitopsProjectArrayOutput) ToGitopsProjectArrayOutput() GitopsProjectArrayOutput {
	return o
}

func (o GitopsProjectArrayOutput) ToGitopsProjectArrayOutputWithContext(ctx context.Context) GitopsProjectArrayOutput {
	return o
}

func (o GitopsProjectArrayOutput) Index(i pulumi.IntInput) GitopsProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitopsProject {
		return vs[0].([]*GitopsProject)[vs[1].(int)]
	}).(GitopsProjectOutput)
}

type GitopsProjectMapOutput struct{ *pulumi.OutputState }

func (GitopsProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitopsProject)(nil)).Elem()
}

func (o GitopsProjectMapOutput) ToGitopsProjectMapOutput() GitopsProjectMapOutput {
	return o
}

func (o GitopsProjectMapOutput) ToGitopsProjectMapOutputWithContext(ctx context.Context) GitopsProjectMapOutput {
	return o
}

func (o GitopsProjectMapOutput) MapIndex(k pulumi.StringInput) GitopsProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitopsProject {
		return vs[0].(map[string]*GitopsProject)[vs[1].(string)]
	}).(GitopsProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsProjectInput)(nil)).Elem(), &GitopsProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsProjectArrayInput)(nil)).Elem(), GitopsProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitopsProjectMapInput)(nil)).Elem(), GitopsProjectMap{})
	pulumi.RegisterOutputType(GitopsProjectOutput{})
	pulumi.RegisterOutputType(GitopsProjectArrayOutput{})
	pulumi.RegisterOutputType(GitopsProjectMapOutput{})
}
