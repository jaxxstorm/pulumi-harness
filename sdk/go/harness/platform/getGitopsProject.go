// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package platform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-harness/sdk/go/harness/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
func LookupGitopsProject(ctx *pulumi.Context, args *LookupGitopsProjectArgs, opts ...pulumi.InvokeOption) (*LookupGitopsProjectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGitopsProjectResult
	err := ctx.Invoke("harness:platform/getGitopsProject:getGitopsProject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGitopsProject.
type LookupGitopsProjectArgs struct {
	// Account identifier of the GitOps project.
	AccountId string `pulumi:"accountId"`
	// Agent identifier of the GitOps project.
	AgentId string `pulumi:"agentId"`
	// Org identifier of the GitOps project.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the GitOps repository.
	ProjectId *string `pulumi:"projectId"`
	// App projects configuration details.
	Projects []GetGitopsProjectProject `pulumi:"projects"`
	// Identifier for the GitOps project.
	QueryName *string `pulumi:"queryName"`
	// Indicates if the GitOps repository should be updated if existing and inserted if not.
	Upsert *bool `pulumi:"upsert"`
}

// A collection of values returned by getGitopsProject.
type LookupGitopsProjectResult struct {
	// Account identifier of the GitOps project.
	AccountId string `pulumi:"accountId"`
	// Agent identifier of the GitOps project.
	AgentId string `pulumi:"agentId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Org identifier of the GitOps project.
	OrgId *string `pulumi:"orgId"`
	// Project identifier of the GitOps repository.
	ProjectId *string `pulumi:"projectId"`
	// App projects configuration details.
	Projects []GetGitopsProjectProject `pulumi:"projects"`
	// Identifier for the GitOps project.
	QueryName *string `pulumi:"queryName"`
	// Indicates if the GitOps repository should be updated if existing and inserted if not.
	Upsert *bool `pulumi:"upsert"`
}

func LookupGitopsProjectOutput(ctx *pulumi.Context, args LookupGitopsProjectOutputArgs, opts ...pulumi.InvokeOption) LookupGitopsProjectResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGitopsProjectResult, error) {
			args := v.(LookupGitopsProjectArgs)
			r, err := LookupGitopsProject(ctx, &args, opts...)
			var s LookupGitopsProjectResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGitopsProjectResultOutput)
}

// A collection of arguments for invoking getGitopsProject.
type LookupGitopsProjectOutputArgs struct {
	// Account identifier of the GitOps project.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Agent identifier of the GitOps project.
	AgentId pulumi.StringInput `pulumi:"agentId"`
	// Org identifier of the GitOps project.
	OrgId pulumi.StringPtrInput `pulumi:"orgId"`
	// Project identifier of the GitOps repository.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// App projects configuration details.
	Projects GetGitopsProjectProjectArrayInput `pulumi:"projects"`
	// Identifier for the GitOps project.
	QueryName pulumi.StringPtrInput `pulumi:"queryName"`
	// Indicates if the GitOps repository should be updated if existing and inserted if not.
	Upsert pulumi.BoolPtrInput `pulumi:"upsert"`
}

func (LookupGitopsProjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitopsProjectArgs)(nil)).Elem()
}

// A collection of values returned by getGitopsProject.
type LookupGitopsProjectResultOutput struct{ *pulumi.OutputState }

func (LookupGitopsProjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitopsProjectResult)(nil)).Elem()
}

func (o LookupGitopsProjectResultOutput) ToLookupGitopsProjectResultOutput() LookupGitopsProjectResultOutput {
	return o
}

func (o LookupGitopsProjectResultOutput) ToLookupGitopsProjectResultOutputWithContext(ctx context.Context) LookupGitopsProjectResultOutput {
	return o
}

// Account identifier of the GitOps project.
func (o LookupGitopsProjectResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitopsProjectResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Agent identifier of the GitOps project.
func (o LookupGitopsProjectResultOutput) AgentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitopsProjectResult) string { return v.AgentId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGitopsProjectResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitopsProjectResult) string { return v.Id }).(pulumi.StringOutput)
}

// Org identifier of the GitOps project.
func (o LookupGitopsProjectResultOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitopsProjectResult) *string { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Project identifier of the GitOps repository.
func (o LookupGitopsProjectResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitopsProjectResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// App projects configuration details.
func (o LookupGitopsProjectResultOutput) Projects() GetGitopsProjectProjectArrayOutput {
	return o.ApplyT(func(v LookupGitopsProjectResult) []GetGitopsProjectProject { return v.Projects }).(GetGitopsProjectProjectArrayOutput)
}

// Identifier for the GitOps project.
func (o LookupGitopsProjectResultOutput) QueryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGitopsProjectResult) *string { return v.QueryName }).(pulumi.StringPtrOutput)
}

// Indicates if the GitOps repository should be updated if existing and inserted if not.
func (o LookupGitopsProjectResultOutput) Upsert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupGitopsProjectResult) *bool { return v.Upsert }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGitopsProjectResultOutput{})
}
