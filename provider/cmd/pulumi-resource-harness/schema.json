{
    "name": "harness",
    "displayName": "Harness",
    "description": "A Pulumi package for creating and managing Harness  resources.",
    "keywords": [
        "pulumi",
        "harness"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`harness` Terraform Provider](https://github.com/harness/terraform-provider-harness).",
    "repository": "https://github.com/pulumi/pulumi-harness",
    "logoUrl": "https://raw.githubusercontent.com/pulumi/pulumi-harness/master/assets/logo.svg",
    "pluginDownloadURL": "github://api.github.com/pulumi",
    "publisher": "Pulumi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumi",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-harness/sdk/go/harness",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageName": "@pulumi/harness",
            "packageDescription": "A Pulumi package for creating and managing Harness  resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/harness/terraform-provider-harness)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-harness` repo](https://github.com/pulumi/pulumi-harness/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-harness` repo](https://github.com/harness/terraform-provider-harness/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "packageName": "pulumi_harness",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/harness/terraform-provider-harness)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-harness` repo](https://github.com/pulumi/pulumi-harness/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-harness` repo](https://github.com/harness/terraform-provider-harness/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "accountId": {
                "type": "string",
                "description": "The Harness account id. This can also be set using the `HARNESS_ACCOUNT_ID` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_ACCOUNT_ID"
                    ]
                }
            },
            "apiKey": {
                "type": "string",
                "description": "The Harness API key. This can also be set using the `HARNESS_API_KEY` environment variable. For more information to\ncreate an API key in FirstGen, see https://docs.harness.io/article/smloyragsm-api-keys#create_an_api_key.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_API_KEY"
                    ]
                }
            },
            "endpoint": {
                "type": "string",
                "description": "The URL of the Harness API endpoint. The default is `https://app.harness.io/gateway`. This can also be set using the\n`HARNESS_ENDPOINT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_ENDPOINT"
                    ]
                }
            },
            "platformApiKey": {
                "type": "string",
                "description": "The API key for the Harness next gen platform. This can also be set using the `HARNESS_PLATFORM_API_KEY` environment\nvariable. For more information to create an API key in NextGen, see\nhttps://docs.harness.io/article/tdoad7xrh9-add-and-manage-api-keys.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_PLATFORM_API_KEY"
                    ]
                }
            }
        },
        "defaults": [
            "accountId",
            "endpoint"
        ]
    },
    "types": {
        "harness:cloudprovider/AwsAssumeCrossAccountRole:AwsAssumeCrossAccountRole": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "This is an IAM role in the target deployment AWS account.\n"
                }
            },
            "type": "object",
            "required": [
                "roleArn"
            ]
        },
        "harness:cloudprovider/AwsUsageScope:AwsUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:cloudprovider/DatacenterUsageScope:DatacenterUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:cloudprovider/GcpUsageScope:GcpUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:cloudprovider/KubernetesAuthentication:KubernetesAuthentication": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Delegate selectors to inherit the GCP credentials from.\n"
                },
                "oidc": {
                    "$ref": "#/types/harness:cloudprovider/KubernetesAuthenticationOidc:KubernetesAuthenticationOidc",
                    "description": "Service account configuration for connecting to the Kubernetes cluster\n"
                },
                "serviceAccount": {
                    "$ref": "#/types/harness:cloudprovider/KubernetesAuthenticationServiceAccount:KubernetesAuthenticationServiceAccount",
                    "description": "Username and password for authentication to the cluster\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:cloudprovider/KubernetesAuthenticationUsernamePassword:KubernetesAuthenticationUsernamePassword",
                    "description": "Username and password for authentication to the cluster\n"
                }
            },
            "type": "object"
        },
        "harness:cloudprovider/KubernetesAuthenticationOidc:KubernetesAuthenticationOidc": {
            "properties": {
                "clientIdSecretName": {
                    "type": "string",
                    "description": "Name of the Harness secret containing the client ID for the cluster.\n"
                },
                "clientSecretSecretName": {
                    "type": "string",
                    "description": "Name of the Harness secret containing the client secret for the cluster.\n"
                },
                "identityProviderUrl": {
                    "type": "string",
                    "description": "URL of the identity provider to use.\n"
                },
                "masterUrl": {
                    "type": "string",
                    "description": "URL of the Kubernetes master to connect to.\n"
                },
                "passwordSecretName": {
                    "type": "string",
                    "description": "Name of the Harness secret containing the password for the cluster.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Scopes to request from the identity provider.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for authentication to the cluster. This can be the username itself or the ID of a harness secret.\n"
                }
            },
            "type": "object",
            "required": [
                "clientIdSecretName",
                "identityProviderUrl",
                "masterUrl",
                "passwordSecretName",
                "username"
            ]
        },
        "harness:cloudprovider/KubernetesAuthenticationServiceAccount:KubernetesAuthenticationServiceAccount": {
            "properties": {
                "caCertificateSecretName": {
                    "type": "string",
                    "description": "Name of the Harness secret containing the CA certificate for the cluster.\n"
                },
                "masterUrl": {
                    "type": "string",
                    "description": "URL of the Kubernetes master to connect to.\n"
                },
                "serviceAccountTokenSecretName": {
                    "type": "string",
                    "description": "Name of the Harness secret containing the service account token for the cluster.\n"
                }
            },
            "type": "object",
            "required": [
                "masterUrl",
                "serviceAccountTokenSecretName"
            ]
        },
        "harness:cloudprovider/KubernetesAuthenticationUsernamePassword:KubernetesAuthenticationUsernamePassword": {
            "properties": {
                "masterUrl": {
                    "type": "string",
                    "description": "URL of the Kubernetes master to connect to.\n"
                },
                "passwordSecretName": {
                    "type": "string",
                    "description": "Name of the Harness secret containing the password for the cluster.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for authentication to the cluster\n"
                },
                "usernameSecretName": {
                    "type": "string",
                    "description": "Name of the Harness secret containing the username for authentication to the cluster\n"
                }
            },
            "type": "object",
            "required": [
                "masterUrl",
                "passwordSecretName"
            ]
        },
        "harness:cloudprovider/KubernetesUsageScope:KubernetesUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:index/EncryptedTextUsageScope:EncryptedTextUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:index/EnvironmentVariableOverride:EnvironmentVariableOverride": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the variable\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "The name of the service\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the service variable. Valid values are `TEXT` and `ENCRYPTED_TEXT`\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the service variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:index/GitConnectorCommitDetails:GitConnectorCommitDetails": {
            "properties": {
                "authorEmailId": {
                    "type": "string",
                    "description": "The email id of the author\n"
                },
                "authorName": {
                    "type": "string",
                    "description": "The name of the author\n"
                },
                "message": {
                    "type": "string",
                    "description": "Commit message\n"
                }
            },
            "type": "object"
        },
        "harness:index/GitConnectorUsageScope:GitConnectorUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:index/InfrastructureDefinitionAwsAmi:InfrastructureDefinitionAwsAmi": {
            "properties": {
                "amiDeploymentType": {
                    "type": "string",
                    "description": "The ami deployment type to use. Valid options are AWS_ASG, SPOTINST\n"
                },
                "asgIdentifiesWorkload": {
                    "type": "boolean",
                    "description": "Flag to indicate whether the autoscaling group identifies the workload.\n"
                },
                "autoscalingGroupName": {
                    "type": "string",
                    "description": "The name of the autoscaling group.\n"
                },
                "classicLoadbalancers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The classic load balancers to use.\n"
                },
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "hostnameConvention": {
                    "type": "string",
                    "description": "The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to deploy to.\n"
                },
                "spotinstCloudProviderName": {
                    "type": "string",
                    "description": "The name of the SpotInst cloud provider to connect with.\n"
                },
                "spotinstConfigJson": {
                    "type": "string",
                    "description": "The SpotInst configuration to use.\n"
                },
                "stageClassicLoadbalancers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The staging classic load balancers to use.\n"
                },
                "stageTargetGroupArns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The staging classic load balancers to use.\n"
                },
                "targetGroupArns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ARN's of the target groups.\n"
                },
                "useTrafficShift": {
                    "type": "boolean",
                    "description": "Flag to enable traffic shifting.\n"
                }
            },
            "type": "object",
            "required": [
                "amiDeploymentType",
                "cloudProviderName",
                "region"
            ]
        },
        "harness:index/InfrastructureDefinitionAwsEcs:InfrastructureDefinitionAwsEcs": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Flag to assign a public IP address.\n"
                },
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the ECS cluster to use.\n"
                },
                "executionRole": {
                    "type": "string",
                    "description": "The ARN of the role to use for execution.\n"
                },
                "launchType": {
                    "type": "string",
                    "description": "The type of launch configuration to use. Valid options are FARGATE\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to deploy to.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group ids to apply to the ecs service.\n"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The subnet ids to apply to the ecs service.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC ids to use when selecting the instances.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "clusterName",
                "launchType",
                "region"
            ]
        },
        "harness:index/InfrastructureDefinitionAwsLambda:InfrastructureDefinitionAwsLambda": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "iamRole": {
                    "type": "string",
                    "description": "The IAM role to use.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to deploy to.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group ids to apply to the ecs service.\n"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The subnet ids to apply to the ecs service.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC ids to use when selecting the instances.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "region"
            ]
        },
        "harness:index/InfrastructureDefinitionAwsSsh:InfrastructureDefinitionAwsSsh": {
            "properties": {
                "autoscalingGroupName": {
                    "type": "string",
                    "description": "The name of the autoscaling group.\n"
                },
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "desiredCapacity": {
                    "type": "integer",
                    "description": "The desired capacity of the auto scaling group.\n"
                },
                "hostConnectionAttrsName": {
                    "type": "string",
                    "description": "The name of the host connection attributes to use.\n"
                },
                "hostConnectionType": {
                    "type": "string",
                    "description": "The type of host connection to use. Valid options are PRIVATE*DNS, PUBLIC*DNS, PRIVATE*IP, PUBLIC*IP\n"
                },
                "hostnameConvention": {
                    "type": "string",
                    "description": "The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}\n"
                },
                "loadbalancerName": {
                    "type": "string",
                    "description": "The name of the load balancer to use.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to deploy to.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAwsSshTag:InfrastructureDefinitionAwsSshTag"
                    },
                    "description": "The tags to use when selecting the instances.\n"
                },
                "vpcIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The VPC ids to use when selecting the instances.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "hostConnectionType",
                "region"
            ]
        },
        "harness:index/InfrastructureDefinitionAwsSshTag:InfrastructureDefinitionAwsSshTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the tag.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the tag.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "harness:index/InfrastructureDefinitionAwsWinrm:InfrastructureDefinitionAwsWinrm": {
            "properties": {
                "autoscalingGroupName": {
                    "type": "string",
                    "description": "The name of the autoscaling group.\n"
                },
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "desiredCapacity": {
                    "type": "integer",
                    "description": "The desired capacity of the autoscaling group.\n"
                },
                "hostConnectionAttrsName": {
                    "type": "string",
                    "description": "The name of the host connection attributes to use.\n"
                },
                "hostConnectionType": {
                    "type": "string",
                    "description": "The type of host connection to use. Valid options are PRIVATE*DNS, PUBLIC*DNS, PRIVATE*IP, PUBLIC*IP\n"
                },
                "hostnameConvention": {
                    "type": "string",
                    "description": "The naming convention to use for the hostname. Defaults to ${host.ec2Instance.privateDnsName.split('.')[0]}\n"
                },
                "loadbalancerName": {
                    "type": "string",
                    "description": "The name of the load balancer to use.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to deploy to.\n"
                }
            },
            "type": "object",
            "required": [
                "autoscalingGroupName",
                "cloudProviderName",
                "hostConnectionAttrsName",
                "hostConnectionType",
                "region"
            ]
        },
        "harness:index/InfrastructureDefinitionAzureVmss:InfrastructureDefinitionAzureVmss": {
            "properties": {
                "authType": {
                    "type": "string",
                    "description": "The type of authentication to use. Valid options are SSH*PUBLIC*KEY.\n"
                },
                "baseName": {
                    "type": "string",
                    "description": "Base name.\n"
                },
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The type of deployment. Valid options are NATIVE_VMSS\n"
                },
                "hostConnectionAttrsName": {
                    "type": "string",
                    "description": "The name of the host connection attributes to use.\n"
                },
                "resourceGroupName": {
                    "type": "string",
                    "description": "The name of the resource group.\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "The unique id of the azure subscription.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to connect with.\n"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "baseName",
                "cloudProviderName",
                "deploymentType",
                "resourceGroupName",
                "subscriptionId",
                "username"
            ]
        },
        "harness:index/InfrastructureDefinitionAzureWebapp:InfrastructureDefinitionAzureWebapp": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The name of the resource group.\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "The unique id of the azure subscription.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "resourceGroup",
                "subscriptionId"
            ]
        },
        "harness:index/InfrastructureDefinitionCustom:InfrastructureDefinitionCustom": {
            "properties": {
                "deploymentTypeTemplateVersion": {
                    "type": "string",
                    "description": "The template version\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionCustomVariable:InfrastructureDefinitionCustomVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "type": "object",
            "required": [
                "deploymentTypeTemplateVersion"
            ]
        },
        "harness:index/InfrastructureDefinitionCustomVariable:InfrastructureDefinitionCustomVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "harness:index/InfrastructureDefinitionDatacenterSsh:InfrastructureDefinitionDatacenterSsh": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "hostConnectionAttributesName": {
                    "type": "string",
                    "description": "The name of the SSH connection attributes to use.\n"
                },
                "hostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of hosts to deploy to.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "hostConnectionAttributesName",
                "hostnames"
            ]
        },
        "harness:index/InfrastructureDefinitionDatacenterWinrm:InfrastructureDefinitionDatacenterWinrm": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "hostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of hosts to deploy to.\n"
                },
                "winrmConnectionAttributesName": {
                    "type": "string",
                    "description": "The name of the WinRM connection attributes to use.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "hostnames",
                "winrmConnectionAttributesName"
            ]
        },
        "harness:index/InfrastructureDefinitionKubernetes:InfrastructureDefinitionKubernetes": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace in Kubernetes to deploy to.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "The naming convention of the release. When using Helm Native the default is ${infra.kubernetes.infraId}. For standard Kubernetes manifests the default is release-${infra.kubernetes.infraId}\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "namespace",
                "releaseName"
            ]
        },
        "harness:index/InfrastructureDefinitionKubernetesGcp:InfrastructureDefinitionKubernetesGcp": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the cluster being deployed to.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace in Kubernetes to deploy to.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "The naming convention of the release.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "clusterName",
                "namespace",
                "releaseName"
            ]
        },
        "harness:index/InfrastructureDefinitionTanzu:InfrastructureDefinitionTanzu": {
            "properties": {
                "cloudProviderName": {
                    "type": "string",
                    "description": "The name of the cloud provider to connect with.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The PCF organization to use.\n"
                },
                "space": {
                    "type": "string",
                    "description": "The PCF space to deploy to.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProviderName",
                "organization",
                "space"
            ]
        },
        "harness:index/PlatformCcmFiltersFilterProperties:PlatformCcmFiltersFilterProperties": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "description": "Type of CCM filters.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "type": "object",
            "required": [
                "filterType"
            ]
        },
        "harness:index/SshCredentialKerberosAuthentication:SshCredentialKerberosAuthentication": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "Port to use for Kerberos authentication\n",
                    "willReplaceOnChanges": true
                },
                "principal": {
                    "type": "string",
                    "description": "Name of the principal for authentication\n",
                    "willReplaceOnChanges": true
                },
                "realm": {
                    "type": "string",
                    "description": "Realm associated with the Kerberos authentication\n",
                    "willReplaceOnChanges": true
                },
                "tgtGenerationMethod": {
                    "$ref": "#/types/harness:index/SshCredentialKerberosAuthenticationTgtGenerationMethod:SshCredentialKerberosAuthenticationTgtGenerationMethod",
                    "description": "TGT generation method\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "port",
                "principal",
                "realm"
            ]
        },
        "harness:index/SshCredentialKerberosAuthenticationTgtGenerationMethod:SshCredentialKerberosAuthenticationTgtGenerationMethod": {
            "properties": {
                "kerberosPasswordId": {
                    "type": "string",
                    "description": "The id of the encrypted text secret\n",
                    "willReplaceOnChanges": true
                },
                "keyTabFilePath": {
                    "type": "string",
                    "description": "The path to the key tab file\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "harness:index/SshCredentialSshAuthentication:SshCredentialSshAuthentication": {
            "properties": {
                "inlineSsh": {
                    "$ref": "#/types/harness:index/SshCredentialSshAuthenticationInlineSsh:SshCredentialSshAuthenticationInlineSsh",
                    "description": "Inline SSH authentication configuration. Only ond of `passphrase_secret_id` or `ssh_key_file_id` should be used\n",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to connect to\n"
                },
                "serverPassword": {
                    "$ref": "#/types/harness:index/SshCredentialSshAuthenticationServerPassword:SshCredentialSshAuthenticationServerPassword",
                    "description": "Server password authentication configuration\n",
                    "willReplaceOnChanges": true
                },
                "sshKeyFile": {
                    "$ref": "#/types/harness:index/SshCredentialSshAuthenticationSshKeyFile:SshCredentialSshAuthenticationSshKeyFile",
                    "description": "Use ssh key file for authentication\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "The username to use when connecting to ssh\n"
                }
            },
            "type": "object",
            "required": [
                "port",
                "username"
            ]
        },
        "harness:index/SshCredentialSshAuthenticationInlineSsh:SshCredentialSshAuthenticationInlineSsh": {
            "properties": {
                "passphraseSecretId": {
                    "type": "string",
                    "description": "The id of the encrypted secret to use\n"
                },
                "sshKeyFileId": {
                    "type": "string",
                    "description": "The id of the secret containing the SSH key\n"
                }
            },
            "type": "object",
            "required": [
                "sshKeyFileId"
            ]
        },
        "harness:index/SshCredentialSshAuthenticationServerPassword:SshCredentialSshAuthenticationServerPassword": {
            "properties": {
                "passwordSecretId": {
                    "type": "string",
                    "description": "The id of the encrypted secret\n"
                }
            },
            "type": "object",
            "required": [
                "passwordSecretId"
            ]
        },
        "harness:index/SshCredentialSshAuthenticationSshKeyFile:SshCredentialSshAuthenticationSshKeyFile": {
            "properties": {
                "passphraseSecretId": {
                    "type": "string",
                    "description": "The id of the secret containing the password to use for the ssh key\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to the key file on the delegate\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "harness:index/SshCredentialUsageScope:SshCredentialUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:index/UserGroupLdapSettings:UserGroupLdapSettings": {
            "properties": {
                "groupDn": {
                    "type": "string",
                    "description": "The group DN of the LDAP user group.\n"
                },
                "groupName": {
                    "type": "string",
                    "description": "The group name of the LDAP user group.\n"
                },
                "ssoProviderId": {
                    "type": "string",
                    "description": "The ID of the SSO provider.\n"
                }
            },
            "type": "object"
        },
        "harness:index/UserGroupNotificationSettings:UserGroupNotificationSettings": {
            "properties": {
                "groupEmailAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The email addresses of the user group.\n"
                },
                "microsoftTeamsWebhookUrl": {
                    "type": "string",
                    "description": "The Microsoft Teams webhook URL of the user group.\n"
                },
                "sendMailToNewMembers": {
                    "type": "boolean",
                    "description": "Indicates whether an email is sent when a new user is added to the group.\n"
                },
                "sendNotificationsToMembers": {
                    "type": "boolean",
                    "description": "Enable this setting to have notifications sent to the members of this group.\n"
                },
                "slackChannel": {
                    "type": "string",
                    "description": "The Slack channel to send notifications to.\n"
                },
                "slackWebhookUrl": {
                    "type": "string",
                    "description": "The Slack webhook URL to send notifications to.\n"
                }
            },
            "type": "object"
        },
        "harness:index/UserGroupPermissions:UserGroupPermissions": {
            "properties": {
                "accountPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS\n"
                },
                "appPermissions": {
                    "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissions:UserGroupPermissionsAppPermissions",
                    "description": "Application specific permissions\n"
                }
            },
            "type": "object"
        },
        "harness:index/UserGroupPermissionsAppPermissions:UserGroupPermissionsAppPermissions": {
            "properties": {
                "alls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsAll:UserGroupPermissionsAppPermissionsAll"
                    },
                    "description": "The permission to perform actions against all resources.\n"
                },
                "deployments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsDeployment:UserGroupPermissionsAppPermissionsDeployment"
                    },
                    "description": "Permission configuration to perform actions against deployments.\n"
                },
                "environments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsEnvironment:UserGroupPermissionsAppPermissionsEnvironment"
                    },
                    "description": "Permission configuration to perform actions against workflows.\n"
                },
                "pipelines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsPipeline:UserGroupPermissionsAppPermissionsPipeline"
                    },
                    "description": "Permission configuration to perform actions against pipelines.\n"
                },
                "provisioners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsProvisioner:UserGroupPermissionsAppPermissionsProvisioner"
                    },
                    "description": "Permission configuration to perform actions against provisioners.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsService:UserGroupPermissionsAppPermissionsService"
                    },
                    "description": "Permission configuration to perform actions against services.\n"
                },
                "templates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsTemplate:UserGroupPermissionsAppPermissionsTemplate"
                    },
                    "description": "Permission configuration to perform actions against templates.\n"
                },
                "workflows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissionsWorkflow:UserGroupPermissionsAppPermissionsWorkflow"
                    },
                    "description": "Permission configuration to perform actions against workflows.\n"
                }
            },
            "type": "object"
        },
        "harness:index/UserGroupPermissionsAppPermissionsAll:UserGroupPermissionsAppPermissionsAll": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE, EXECUTE*WORKFLOW, EXECUTE*PIPELINE, ROLLBACK_WORKFLOW\n"
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The application IDs to which the permission applies. Leave empty to apply to all applications.\n"
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsDeployment:UserGroupPermissionsAppPermissionsDeployment": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The actions allowed to be performed. Valid options are READ, EXECUTE*WORKFLOW, EXECUTE*PIPELINE, ROLLBACK*WORKFLOW, ABORT*WORKFLOW\n"
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The application IDs to which the permission applies. Leave empty to apply to all applications.\n"
                },
                "envIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environment IDs to which the permission applies. Leave empty to apply to all environments.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The filters to apply to the action. Valid options are: NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsEnvironment:UserGroupPermissionsAppPermissionsEnvironment": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE\n"
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The application IDs to which the permission applies. Leave empty to apply to all applications.\n"
                },
                "envIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environment IDs to which the permission applies. Leave empty to apply to all environments.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The filters to apply to the action. Valid options are: NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsPipeline:UserGroupPermissionsAppPermissionsPipeline": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The actions allowed to be performed. Valid options are [CREATE READ UPDATE DELETE]\n"
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The application IDs to which the permission applies. Leave empty to apply to all applications.\n"
                },
                "envIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environment IDs to which the permission applies. Leave empty to apply to all environments.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The filters to apply to the action. Valid options are: NON*PRODUCTION*PIPELINES, PRODUCTION_PIPELINES.\n"
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsProvisioner:UserGroupPermissionsAppPermissionsProvisioner": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE\n"
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The application IDs to which the permission applies. Leave empty to apply to all applications.\n"
                },
                "provisionerIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The provisioner IDs to which the permission applies. Leave empty to apply to all provisioners.\n"
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsService:UserGroupPermissionsAppPermissionsService": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE\n"
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The application IDs to which the permission applies. Leave empty to apply to all applications.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The service IDs to which the permission applies. Leave empty to apply to all services.\n"
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsTemplate:UserGroupPermissionsAppPermissionsTemplate": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE\n"
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The application IDs to which the permission applies. Leave empty to apply to all applications.\n"
                },
                "templateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The template IDs to which the permission applies. Leave empty to apply to all environments.\n"
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupPermissionsAppPermissionsWorkflow:UserGroupPermissionsAppPermissionsWorkflow": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The actions allowed to be performed. Valid options are CREATE, READ, UPDATE, DELETE\n"
                },
                "appIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The application IDs to which the permission applies. Leave empty to apply to all applications.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The filters to apply to the action. Valid options are: NON*PRODUCTION*WORKFLOWS, PRODUCTION*WORKFLOWS, WORKFLOW*TEMPLATES.\n"
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "harness:index/UserGroupSamlSettings:UserGroupSamlSettings": {
            "properties": {
                "groupName": {
                    "type": "string",
                    "description": "The group name of the SAML user group.\n"
                },
                "ssoProviderId": {
                    "type": "string",
                    "description": "The ID of the SSO provider.\n"
                }
            },
            "type": "object"
        },
        "harness:index/getEncryptedTextUsageScope:getEncryptedTextUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:index/getEnvironmentVariableOverride:getEnvironmentVariableOverride": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the variable\n"
                },
                "serviceName": {
                    "type": "string",
                    "description": "The name of the service\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the service variable. Valid values are `TEXT` and `ENCRYPTED_TEXT`\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the service variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "serviceName",
                "type",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:index/getGitConnectorCommitDetail:getGitConnectorCommitDetail": {
            "properties": {
                "authorEmailId": {
                    "type": "string",
                    "description": "The email id of the author.\n"
                },
                "authorName": {
                    "type": "string",
                    "description": "The name of the author.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Commit message.\n"
                }
            },
            "type": "object",
            "required": [
                "authorEmailId",
                "authorName",
                "message"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:index/getSecretManagerUsageScope:getSecretManagerUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:index/getSshCredentialUsageScope:getSshCredentialUsageScope": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Id of the application to scope to. If empty then this scope applies to all applications.\n"
                },
                "environmentFilterType": {
                    "type": "string",
                    "description": "Type of environment filter applied. Cannot be used with `environment_id`. Valid options are NON*PRODUCTION*ENVIRONMENTS, PRODUCTION_ENVIRONMENTS.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the id of the specific environment to scope to. Cannot be used with `environment_filter_type`.\n"
                }
            },
            "type": "object"
        },
        "harness:index/getTriggerCondition:getTriggerCondition": {
            "properties": {
                "onWebhooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/getTriggerConditionOnWebhook:getTriggerConditionOnWebhook"
                    },
                    "description": "On webhook.\n"
                },
                "triggerConditionType": {
                    "type": "string",
                    "description": "Trigger condition.\n"
                }
            },
            "type": "object",
            "required": [
                "onWebhooks",
                "triggerConditionType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:index/getTriggerConditionOnWebhook:getTriggerConditionOnWebhook": {
            "properties": {
                "webhookDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/getTriggerConditionOnWebhookWebhookDetail:getTriggerConditionOnWebhookWebhookDetail"
                    },
                    "description": "Webhook details.\n"
                }
            },
            "type": "object",
            "required": [
                "webhookDetails"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:index/getTriggerConditionOnWebhookWebhookDetail:getTriggerConditionOnWebhookWebhookDetail": {
            "properties": {
                "header": {
                    "type": "string",
                    "description": "Header.\n"
                },
                "method": {
                    "type": "string",
                    "description": "Method.\n"
                },
                "payload": {
                    "type": "string",
                    "description": "Payload.\n"
                },
                "webhookToken": {
                    "type": "string",
                    "description": "Webhook token.\n"
                },
                "webhookUrl": {
                    "type": "string",
                    "description": "Webhook URL.\n"
                }
            },
            "type": "object",
            "required": [
                "header",
                "method",
                "payload",
                "webhookToken",
                "webhookUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/AppDynamicsConnectorApiToken:AppDynamicsConnectorApiToken": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The client id used for connecting to App Dynamics.\n"
                },
                "clientSecretRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the App Dynamics client secret. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecretRef"
            ]
        },
        "harness:platform/AppDynamicsConnectorUsernamePassword:AppDynamicsConnectorUsernamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username"
            ]
        },
        "harness:platform/ArtifactoryConnectorCredentials:ArtifactoryConnectorCredentials": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/AwsCCConnectorCrossAccountAccess:AwsCCConnectorCrossAccountAccess": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "The external id of the role to use for cross-account access. This is a random unique value to provide additional secure authentication.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The ARN of the role to use for cross-account access.\n"
                }
            },
            "type": "object",
            "required": [
                "externalId",
                "roleArn"
            ]
        },
        "harness:platform/AwsConnectorCrossAccountAccess:AwsConnectorCrossAccountAccess": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the role that you want to assume. This is an IAM role in the target AWS account.\n"
                }
            },
            "type": "object",
            "required": [
                "roleArn"
            ]
        },
        "harness:platform/AwsConnectorEqualJitterBackoffStrategy:AwsConnectorEqualJitterBackoffStrategy": {
            "properties": {
                "baseDelay": {
                    "type": "integer",
                    "description": "Base delay.\n"
                },
                "maxBackoffTime": {
                    "type": "integer",
                    "description": "Max BackOff Time.\n"
                },
                "retryCount": {
                    "type": "integer",
                    "description": "Retry Count.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/AwsConnectorFixedDelayBackoffStrategy:AwsConnectorFixedDelayBackoffStrategy": {
            "properties": {
                "fixedBackoff": {
                    "type": "integer",
                    "description": "Fixed Backoff.\n"
                },
                "retryCount": {
                    "type": "integer",
                    "description": "Retry Count.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/AwsConnectorFullJitterBackoffStrategy:AwsConnectorFullJitterBackoffStrategy": {
            "properties": {
                "baseDelay": {
                    "type": "integer",
                    "description": "Base delay.\n"
                },
                "maxBackoffTime": {
                    "type": "integer",
                    "description": "Max BackOff Time.\n"
                },
                "retryCount": {
                    "type": "integer",
                    "description": "Retry Count.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/AwsConnectorInheritFromDelegate:AwsConnectorInheritFromDelegate": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The delegates to inherit the credentials from.\n"
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ]
        },
        "harness:platform/AwsConnectorIrsa:AwsConnectorIrsa": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The delegates to inherit the credentials from.\n"
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ]
        },
        "harness:platform/AwsConnectorManual:AwsConnectorManual": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "AWS access key.\n"
                },
                "accessKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the aws access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect only use delegates with these tags.\n"
                },
                "secretKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the aws secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "secretKeyRef"
            ]
        },
        "harness:platform/AwsKmsConnectorCredentials:AwsKmsConnectorCredentials": {
            "properties": {
                "assumeRole": {
                    "$ref": "#/types/harness:platform/AwsKmsConnectorCredentialsAssumeRole:AwsKmsConnectorCredentialsAssumeRole",
                    "description": "Connect using STS assume role.\n"
                },
                "inheritFromDelegate": {
                    "type": "boolean",
                    "description": "Inherit the credentials from from the delegate.\n"
                },
                "manual": {
                    "$ref": "#/types/harness:platform/AwsKmsConnectorCredentialsManual:AwsKmsConnectorCredentialsManual",
                    "description": "Specify the AWS key and secret used for authenticating.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/AwsKmsConnectorCredentialsAssumeRole:AwsKmsConnectorCredentialsAssumeRole": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "description": "The duration, in seconds, of the role session. The value can range from 900 seconds (15 minutes) to 3600 seconds (1 hour). By default, the value is set to 3600 seconds. An expiration can also be specified in the client request body. The minimum value is 1 hour.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The ARN of the role to assume.\n"
                }
            },
            "type": "object",
            "required": [
                "duration",
                "roleArn"
            ]
        },
        "harness:platform/AwsKmsConnectorCredentialsManual:AwsKmsConnectorCredentialsManual": {
            "properties": {
                "accessKeyRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the AWS access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "secretKeyRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the AWS secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "accessKeyRef",
                "secretKeyRef"
            ]
        },
        "harness:platform/AwsSecretManagerConnectorCredentials:AwsSecretManagerConnectorCredentials": {
            "properties": {
                "assumeRole": {
                    "$ref": "#/types/harness:platform/AwsSecretManagerConnectorCredentialsAssumeRole:AwsSecretManagerConnectorCredentialsAssumeRole",
                    "description": "Connect using STS assume role.\n"
                },
                "inheritFromDelegate": {
                    "type": "boolean",
                    "description": "Inherit the credentials from from the delegate.\n"
                },
                "manual": {
                    "$ref": "#/types/harness:platform/AwsSecretManagerConnectorCredentialsManual:AwsSecretManagerConnectorCredentialsManual",
                    "description": "Specify the AWS key and secret used for authenticating.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/AwsSecretManagerConnectorCredentialsAssumeRole:AwsSecretManagerConnectorCredentialsAssumeRole": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "description": "The duration, in seconds, of the role session. The value can range from 900 seconds (15 minutes) to 3600 seconds (1 hour). By default, the value is set to 3600 seconds. An expiration can also be specified in the client request body. The minimum value is 1 hour.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The ARN of the role to assume.\n"
                }
            },
            "type": "object",
            "required": [
                "duration",
                "roleArn"
            ]
        },
        "harness:platform/AwsSecretManagerConnectorCredentialsManual:AwsSecretManagerConnectorCredentialsManual": {
            "properties": {
                "accessKeyRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the AWS access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "secretKeyRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the AWS secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "accessKeyRef",
                "secretKeyRef"
            ]
        },
        "harness:platform/AzureCloudCostConnectorBillingExportSpec:AzureCloudCostConnectorBillingExportSpec": {
            "properties": {
                "containerName": {
                    "type": "string",
                    "description": "Name of the container.\n"
                },
                "directoryName": {
                    "type": "string",
                    "description": "Name of the directory.\n"
                },
                "reportName": {
                    "type": "string",
                    "description": "Name of the report.\n"
                },
                "storageAccountName": {
                    "type": "string",
                    "description": "Name of the storage account.\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Subsription Id.\n"
                }
            },
            "type": "object",
            "required": [
                "containerName",
                "directoryName",
                "reportName",
                "storageAccountName",
                "subscriptionId"
            ]
        },
        "harness:platform/AzureCloudProviderConnectorCredentials:AzureCloudProviderConnectorCredentials": {
            "properties": {
                "azureInheritFromDelegateDetails": {
                    "$ref": "#/types/harness:platform/AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetails:AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetails",
                    "description": "Authenticate to Azure Cloud Provider using details inheriting from delegate.\n"
                },
                "azureManualDetails": {
                    "$ref": "#/types/harness:platform/AzureCloudProviderConnectorCredentialsAzureManualDetails:AzureCloudProviderConnectorCredentialsAzureManualDetails",
                    "description": "Authenticate to Azure Cloud Provider using manual details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type can either be InheritFromDelegate or ManualConfig.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "harness:platform/AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetails:AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetails": {
            "properties": {
                "auth": {
                    "$ref": "#/types/harness:platform/AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuth:AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuth",
                    "description": "Auth to authenticate to Azure Cloud Provider using details inheriting from delegate.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuth:AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuth": {
            "properties": {
                "azureMsiAuthUa": {
                    "$ref": "#/types/harness:platform/AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUa:AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUa",
                    "description": "Azure UserAssigned MSI auth details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type can either be SystemAssignedManagedIdentity or UserAssignedManagedIdentity.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "harness:platform/AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUa:AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUa": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "Client Id of the ManagedIdentity resource.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/AzureCloudProviderConnectorCredentialsAzureManualDetails:AzureCloudProviderConnectorCredentialsAzureManualDetails": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Application ID of the Azure App.\n"
                },
                "auth": {
                    "$ref": "#/types/harness:platform/AzureCloudProviderConnectorCredentialsAzureManualDetailsAuth:AzureCloudProviderConnectorCredentialsAzureManualDetailsAuth",
                    "description": "Contains Azure auth details.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The Azure Active Directory (AAD) directory ID where you created your application.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/AzureCloudProviderConnectorCredentialsAzureManualDetailsAuth:AzureCloudProviderConnectorCredentialsAzureManualDetailsAuth": {
            "properties": {
                "azureClientKeyCert": {
                    "$ref": "#/types/harness:platform/AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientKeyCert:AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientKeyCert",
                    "description": "Azure client key certificate details.\n"
                },
                "azureClientSecretKey": {
                    "$ref": "#/types/harness:platform/AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientSecretKey:AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientSecretKey",
                    "description": "Azure Client Secret Key details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type can either be Certificate or Secret.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientKeyCert:AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientKeyCert": {
            "properties": {
                "certificateRef": {
                    "type": "string",
                    "description": "Reference of the secret for the certificate. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientSecretKey:AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientSecretKey": {
            "properties": {
                "secretRef": {
                    "type": "string",
                    "description": "Reference of the secret for the secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/BitbucketConnectorApiAuthentication:BitbucketConnectorApiAuthentication": {
            "properties": {
                "tokenRef": {
                    "type": "string",
                    "description": "Personal access token for interacting with the BitBucket api. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username used for connecting to the api.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the username. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "tokenRef"
            ]
        },
        "harness:platform/BitbucketConnectorCredentials:BitbucketConnectorCredentials": {
            "properties": {
                "http": {
                    "$ref": "#/types/harness:platform/BitbucketConnectorCredentialsHttp:BitbucketConnectorCredentialsHttp",
                    "description": "Authenticate using Username and password over http(s) for the connection.\n"
                },
                "ssh": {
                    "$ref": "#/types/harness:platform/BitbucketConnectorCredentialsSsh:BitbucketConnectorCredentialsSsh",
                    "description": "Authenticate using SSH for the connection.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/BitbucketConnectorCredentialsHttp:BitbucketConnectorCredentialsHttp": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/BitbucketConnectorCredentialsSsh:BitbucketConnectorCredentialsSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the ssh key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ]
        },
        "harness:platform/DockerConnectorCredentials:DockerConnectorCredentials": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the password to use for the docker registry. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use for the docker registry.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the username to use for the docker registry. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/ElasticsearchConnectorApiToken:ElasticsearchConnectorApiToken": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The client id used for connecting to ElasticSearch.\n"
                },
                "clientSecretRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the ElasticSearch client secret. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecretRef"
            ]
        },
        "harness:platform/ElasticsearchConnectorNoAuthentication:ElasticsearchConnectorNoAuthentication": {
            "type": "object"
        },
        "harness:platform/ElasticsearchConnectorUsernamePassword:ElasticsearchConnectorUsernamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username"
            ]
        },
        "harness:platform/EnvironmentClustersMappingCluster:EnvironmentClustersMappingCluster": {
            "properties": {
                "identifier": {
                    "type": "string",
                    "description": "account Identifier of the account\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the cluster\n"
                },
                "scope": {
                    "type": "string",
                    "description": "scope at which the cluster exists in harness gitops, project vs org vs account\n"
                }
            },
            "type": "object"
        },
        "harness:platform/FeatureFlagGitDetails:FeatureFlagGitDetails": {
            "properties": {
                "commitMsg": {
                    "type": "string",
                    "description": "The commit message to use as part of a gitsync operation\n"
                }
            },
            "type": "object",
            "required": [
                "commitMsg"
            ]
        },
        "harness:platform/FeatureFlagVariation:FeatureFlagVariation": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the variation\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The identifier of the variation\n"
                },
                "name": {
                    "type": "string",
                    "description": "The user friendly name of the variation\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variation\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "identifier",
                "name",
                "value"
            ]
        },
        "harness:platform/FiltersFilterProperties:FiltersFilterProperties": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "description": "Corresponding Entity of the filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "type": "object",
            "required": [
                "filterType"
            ]
        },
        "harness:platform/GcpCloudCostConnectorBillingExportSpec:GcpCloudCostConnectorBillingExportSpec": {
            "properties": {
                "dataSetId": {
                    "type": "string",
                    "description": "Data Set Id.\n"
                },
                "tableId": {
                    "type": "string",
                    "description": "Table Id.\n"
                }
            },
            "type": "object",
            "required": [
                "dataSetId",
                "tableId"
            ]
        },
        "harness:platform/GcpConnectorInheritFromDelegate:GcpConnectorInheritFromDelegate": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The delegates to inherit the credentials from.\n"
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ]
        },
        "harness:platform/GcpConnectorManual:GcpConnectorManual": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The delegates to connect with.\n"
                },
                "secretKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors",
                "secretKeyRef"
            ]
        },
        "harness:platform/GitConnectorCredentials:GitConnectorCredentials": {
            "properties": {
                "http": {
                    "$ref": "#/types/harness:platform/GitConnectorCredentialsHttp:GitConnectorCredentialsHttp",
                    "description": "Authenticate using Username and password over http(s) for the connection.\n"
                },
                "ssh": {
                    "$ref": "#/types/harness:platform/GitConnectorCredentialsSsh:GitConnectorCredentialsSsh",
                    "description": "Authenticate using SSH for the connection.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitConnectorCredentialsHttp:GitConnectorCredentialsHttp": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/GitConnectorCredentialsSsh:GitConnectorCredentialsSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the ssh key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ]
        },
        "harness:platform/GitOpsAgentMetadata:GitOpsAgentMetadata": {
            "properties": {
                "highAvailability": {
                    "type": "boolean",
                    "description": "Indicates if the deployment should be deployed using the deploy-ha.yaml\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The k8s namespace that this agent resides in.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplication:GitOpsApplicationsApplication": {
            "properties": {
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationMetadata:GitOpsApplicationsApplicationMetadata"
                    },
                    "description": "Metadata corresponding to the resources. This includes all the objects a user must create.\n"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpec:GitOpsApplicationsApplicationSpec"
                    },
                    "description": "Specifications of the GitOps application. This includes the repository URL, application definition, source, destination and sync policy.\n"
                }
            },
            "type": "object",
            "required": [
                "metadatas"
            ]
        },
        "harness:platform/GitOpsApplicationsApplicationMetadata:GitOpsApplicationsApplicationMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations are unstructured key value pairs corresponding to a resource. External tools set these to store and retrieve arbitrary metadata.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "Name of the cluster corresponding to the object. API server ignores this if set in any create or update request.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Before the object is removed from the register, it must be empty. Each element serves as a unique identifier for the component that is accountable for removing that entry from the list. Entries in this list can only be removed if the object's deletionTimestamp is not null. The processing and removal of finalizers can happen in any sequence. No order is enforced as it may block the finalizers. Finalizers is a shared field that can be reordered by any actor with authority. If the finalizer list is processed in order, this could result in a scenario where the component in charge of the list's first finalizer is waiting for a signal (generated by a field value, an external system, or another) produced by a component in charge of the list's later finalizer.\n"
                },
                "generateName": {
                    "type": "string",
                    "description": "An optional prefix that the server will only apply if the Name field is empty to create a unique name. The name returned to the client will differ from the name passed if this field is used. A unique suffix will be added to this value as well. The supplied value must adhere to the same validation guidelines as the Name field and may be reduced by the suffix length necessary to ensure that it is unique on the server. The server will NOT return a 409 if this field is supplied and the created name already exists; instead, it will either return 201 Created or 500 with Reason ServerTimeout, indicating that a unique name could not be found in the allotted time and the client should try again later.\n"
                },
                "generation": {
                    "type": "string",
                    "description": "A sequence number representing a specific generation of the desired state. This is a read-only value populated by the system.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Name cannot be updated.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the GitOps application. An empty namespace is equivalent to the \"default\" namespace.\n"
                },
                "ownerReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationMetadataOwnerReference:GitOpsApplicationsApplicationMetadataOwnerReference"
                    },
                    "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "annotations",
                        "finalizers",
                        "generation",
                        "labels",
                        "namespace",
                        "uid"
                    ]
                }
            }
        },
        "harness:platform/GitOpsApplicationsApplicationMetadataOwnerReference:GitOpsApplicationsApplicationMetadataOwnerReference": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "API version of the referent.\n"
                },
                "blockOwnerDeletion": {
                    "type": "boolean",
                    "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.\n"
                },
                "controller": {
                    "type": "boolean",
                    "description": "Indicates if the reference points to the managing controller.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Kind of the referent.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "UID of the referent.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplicationSpec:GitOpsApplicationsApplicationSpec": {
            "properties": {
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpecDestination:GitOpsApplicationsApplicationSpecDestination"
                    },
                    "description": "Information about the GitOps application's destination.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpecSource:GitOpsApplicationsApplicationSpecSource"
                    },
                    "description": "Contains all information about the source of a GitOps application.\n"
                },
                "syncPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpecSyncPolicy:GitOpsApplicationsApplicationSpecSyncPolicy"
                    },
                    "description": "Controls when a sync will be performed in response to updates in git.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplicationSpecDestination:GitOpsApplicationsApplicationSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the kubernetes control plane API.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace of the GitOps application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server of the destination of the GitOps application.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplicationSpecSource:GitOpsApplicationsApplicationSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name, and must be specified for the GitOps applications sourced from a helm repo.\n"
                },
                "directories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpecSourceDirectory:GitOpsApplicationsApplicationSpecSourceDirectory"
                    },
                    "description": "Options for applications of type plain YAML or Jsonnet.\n"
                },
                "helms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpecSourceHelm:GitOpsApplicationsApplicationSpecSourceHelm"
                    },
                    "description": "Holds helm specific options.\n"
                },
                "ksonnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpecSourceKsonnet:GitOpsApplicationsApplicationSpecSourceKsonnet"
                    },
                    "description": "Ksonnet specific options.\n"
                },
                "kustomizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpecSourceKustomize:GitOpsApplicationsApplicationSpecSourceKustomize"
                    },
                    "description": "Options specific to a GitOps application source specific to Kustomize.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the git repository, and is only valid for the GitOps applications sourced from git.\n"
                },
                "plugins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpecSourcePlugin:GitOpsApplicationsApplicationSpecSourcePlugin"
                    },
                    "description": "Options specific to config management plugins.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (git or helm) that contains the GitOps application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the GitOps application to. In case of git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag of the chart's version.\n"
                }
            },
            "type": "object",
            "required": [
                "path",
                "repoUrl",
                "targetRevision"
            ]
        },
        "harness:platform/GitOpsApplicationsApplicationSpecSourceDirectory:GitOpsApplicationsApplicationSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation.\n"
                },
                "jsonnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpecSourceDirectoryJsonnet:GitOpsApplicationsApplicationSpecSourceDirectoryJsonnet"
                    },
                    "description": "Options specific to applications of type Jsonnet.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Indicates to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplicationSpecSourceDirectoryJsonnet:GitOpsApplicationsApplicationSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetExtVar:GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of jsonnet external variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetTla:GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of jsonnet top-level arguments(TLAS).\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetExtVar:GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Code of the external variables of jsonnet application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the external variables of jsonnet application.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the external variables of jsonnet application.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetTla:GitOpsApplicationsApplicationSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Code of the TLAS of the jsonnet application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the TLAS of the jsonnet application.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the TLAS of the jsonnet application.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplicationSpecSourceHelm:GitOpsApplicationsApplicationSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpecSourceHelmFileParameter:GitOpsApplicationsApplicationSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters to the helm template.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpecSourceHelmParameter:GitOpsApplicationsApplicationSpecSourceHelmParameter"
                    },
                    "description": "List of helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "Indicates if to pass credentials to all domains (helm's --pass-credentials)\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name to use. If omitted it will use the GitOps application name.\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to helm template, typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Helm version to use for templating (either \"2\" or \"3\")\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplicationSpecSourceHelmFileParameter:GitOpsApplicationsApplicationSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values of the helm parameter.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplicationSpecSourceHelmParameter:GitOpsApplicationsApplicationSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Indicates if helm should interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplicationSpecSourceKsonnet:GitOpsApplicationsApplicationSpecSourceKsonnet": {
            "properties": {
                "environment": {
                    "type": "string",
                    "description": "Ksonnet application environment name.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpecSourceKsonnetParameter:GitOpsApplicationsApplicationSpecSourceKsonnetParameter"
                    },
                    "description": "List of ksonnet component parameter override values.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplicationSpecSourceKsonnetParameter:GitOpsApplicationsApplicationSpecSourceKsonnetParameter": {
            "properties": {
                "component": {
                    "type": "string",
                    "description": "Component of the parameter of the ksonnet application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the parameter of the ksonnet application.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the parameter of the ksonnet application.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplicationSpecSourceKustomize:GitOpsApplicationsApplicationSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "forceCommonAnnotations": {
                    "type": "boolean",
                    "description": "Indicates if to force applying common annotations to resources for kustomize apps.\n"
                },
                "forceCommonLabels": {
                    "type": "boolean",
                    "description": "Indicates if to force apply common labels to resources for kustomize apps.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix prepended to resources for kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for kustomize apps.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplicationSpecSourcePlugin:GitOpsApplicationsApplicationSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpecSourcePluginEnv:GitOpsApplicationsApplicationSpecSourcePluginEnv"
                    },
                    "description": "Entry in the GitOps application's environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplicationSpecSourcePluginEnv:GitOpsApplicationsApplicationSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable, usually expressed in uppercase.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplicationSpecSyncPolicy:GitOpsApplicationsApplicationSpecSyncPolicy": {
            "properties": {
                "automateds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpecSyncPolicyAutomated:GitOpsApplicationsApplicationSpecSyncPolicyAutomated"
                    },
                    "description": "Controls the behavior of an automated sync.\n"
                },
                "retries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpecSyncPolicyRetry:GitOpsApplicationsApplicationSpecSyncPolicyRetry"
                    },
                    "description": "Contains information about the strategy to apply when a sync failed.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Options allow you to specify whole app sync-options.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplicationSpecSyncPolicyAutomated:GitOpsApplicationsApplicationSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Indicates to allows apps to have zero live resources (default: false).\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Indicates whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false).\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Indicates whether to revert resources back to their desired state upon modification in the cluster (default: false).\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplicationSpecSyncPolicyRetry:GitOpsApplicationsApplicationSpecSyncPolicyRetry": {
            "properties": {
                "backoffs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplicationSpecSyncPolicyRetryBackoff:GitOpsApplicationsApplicationSpecSyncPolicyRetryBackoff"
                    },
                    "description": "Backoff strategy to use on subsequent retries for failing syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsApplicationsApplicationSpecSyncPolicyRetryBackoff:GitOpsApplicationsApplicationSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\").\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed of the backoff strategy.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterQuery:GitOpsClusterQuery": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterQueryId:GitOpsClusterQueryId"
                    },
                    "description": "Cluster server URL or the cluster name.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps cluster.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server of the GitOps cluster.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterQueryId:GitOpsClusterQueryId": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Type of the specified GitOps cluster identifier ( 'server' - default, 'name' ).\n"
                },
                "value": {
                    "type": "string",
                    "description": "Cluster server URL or the cluster name.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterRequest:GitOpsClusterRequest": {
            "properties": {
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestCluster:GitOpsClusterRequestCluster"
                    },
                    "description": "GitOps cluster details.\n"
                },
                "ids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestId:GitOpsClusterRequestId"
                    },
                    "description": "Cluster server URL or the cluster name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags associated with the clusters\n"
                },
                "updateMasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestUpdateMask:GitOpsClusterRequestUpdateMask"
                    },
                    "description": "Update mask of the GitOps cluster.\n"
                },
                "updatedFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Fields which are updated.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "Indicates if the GitOps cluster should be updated if existing and inserted if not.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "updatedFields"
                    ]
                }
            }
        },
        "harness:platform/GitOpsClusterRequestCluster:GitOpsClusterRequestCluster": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for cluster secret metadata.\n"
                },
                "clusterResources": {
                    "type": "boolean",
                    "description": "Indicates if cluster level resources should be managed. This setting is used only if cluster is connected in a namespaced mode.\n"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestClusterConfig:GitOpsClusterRequestClusterConfig"
                    },
                    "description": "GitOps cluster config.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestClusterInfo:GitOpsClusterRequestClusterInfo"
                    },
                    "description": "Information about cluster cache and state.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for cluster secret metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cluster. If omitted, will use the server address.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of namespaces which are accessible in that cluster. Cluster level resources will be ignored if namespace list is not empty.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity.\n"
                },
                "refreshRequestedAts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestClusterRefreshRequestedAt:GitOpsClusterRequestClusterRefreshRequestedAt"
                    },
                    "description": "Time when cluster cache refresh has been requested.\n"
                },
                "server": {
                    "type": "string",
                    "description": "API server URL of the kubernetes cluster.\n"
                },
                "shard": {
                    "type": "string",
                    "description": "Shard number. Calculated on the fly by the application controller if not specified.\n"
                }
            },
            "type": "object",
            "required": [
                "configs",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configs",
                        "infos",
                        "namespaces",
                        "project",
                        "server"
                    ]
                }
            }
        },
        "harness:platform/GitOpsClusterRequestClusterConfig:GitOpsClusterRequestClusterConfig": {
            "properties": {
                "awsAuthConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestClusterConfigAwsAuthConfig:GitOpsClusterRequestClusterConfigAwsAuthConfig"
                    },
                    "description": "IAM authentication configuration for AWS.\n"
                },
                "bearerToken": {
                    "type": "string",
                    "description": "Bearer authentication token the cluster.\n"
                },
                "clusterConnectionType": {
                    "type": "string",
                    "description": "Identifies the authentication method used to connect to the cluster.\n"
                },
                "execProviderConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestClusterConfigExecProviderConfig:GitOpsClusterRequestClusterConfigExecProviderConfig"
                    },
                    "description": "Configuration for an exec provider.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password of the server of the cluster.\n"
                },
                "tlsClientConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestClusterConfigTlsClientConfig:GitOpsClusterRequestClusterConfigTlsClientConfig"
                    },
                    "description": "Settings to enable transport layer security.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username of the server of the cluster.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterRequestClusterConfigAwsAuthConfig:GitOpsClusterRequestClusterConfigAwsAuthConfig": {
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "AWS cluster name.\n"
                },
                "roleARN": {
                    "type": "string",
                    "description": "Optional role ARN. If set then used for AWS IAM Authenticator.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterRequestClusterConfigExecProviderConfig:GitOpsClusterRequestClusterConfigExecProviderConfig": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Preferred input version of the ExecInfo.\n"
                },
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Arguments to pass to the command when executing it.\n"
                },
                "command": {
                    "type": "string",
                    "description": "Command to execute.\n"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional environment variables to expose to the process.\n"
                },
                "installHint": {
                    "type": "string",
                    "description": "Message displayed when the executable is not found.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "args"
                    ]
                }
            }
        },
        "harness:platform/GitOpsClusterRequestClusterConfigTlsClientConfig:GitOpsClusterRequestClusterConfigTlsClientConfig": {
            "properties": {
                "caData": {
                    "type": "string",
                    "description": "CA data holds PEM-encoded bytes (typically read from a root certificates bundle).\n"
                },
                "certData": {
                    "type": "string",
                    "description": "Certificate data holds PEM-encoded bytes (typically read from a client certificate file).\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Indicates if the TLS connection to the cluster should be insecure.\n"
                },
                "keyData": {
                    "type": "string",
                    "description": "Key data holds PEM-encoded bytes (typically read from a client certificate key file).\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "Server name for SNI in the client to check server certificates against.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterRequestClusterInfo:GitOpsClusterRequestClusterInfo": {
            "properties": {
                "apiVersions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of API versions supported by the cluster.\n"
                },
                "applicationsCount": {
                    "type": "string",
                    "description": "Number of applications managed by Argo CD on the cluster.\n"
                },
                "cacheInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestClusterInfoCacheInfo:GitOpsClusterRequestClusterInfoCacheInfo"
                    },
                    "description": "Information about the cluster cache.\n"
                },
                "connectionStates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestClusterInfoConnectionState:GitOpsClusterRequestClusterInfoConnectionState"
                    },
                    "description": "Information about the connection to the cluster.\n"
                },
                "serverVersion": {
                    "type": "string",
                    "description": "Kubernetes version of the cluster.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiVersions",
                        "cacheInfos",
                        "connectionStates",
                        "serverVersion"
                    ]
                }
            }
        },
        "harness:platform/GitOpsClusterRequestClusterInfoCacheInfo:GitOpsClusterRequestClusterInfoCacheInfo": {
            "properties": {
                "apisCount": {
                    "type": "string",
                    "description": "Number of observed kubernetes API count.\n"
                },
                "lastCacheSyncTime": {
                    "type": "string",
                    "description": "Time of most recent cache synchronization.\n"
                },
                "resourcesCount": {
                    "type": "string",
                    "description": "Number of observed kubernetes resources.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterRequestClusterInfoConnectionState:GitOpsClusterRequestClusterInfoConnectionState": {
            "properties": {
                "attemptedAts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequestClusterInfoConnectionStateAttemptedAt:GitOpsClusterRequestClusterInfoConnectionStateAttemptedAt"
                    },
                    "description": "Time when cluster cache refresh has been requested.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Information about the connection status.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Current status indicator of the connection.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "attemptedAts",
                        "message",
                        "status"
                    ]
                }
            }
        },
        "harness:platform/GitOpsClusterRequestClusterInfoConnectionStateAttemptedAt:GitOpsClusterRequestClusterInfoConnectionStateAttemptedAt": {
            "properties": {
                "nanos": {
                    "type": "integer",
                    "description": "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.\n"
                },
                "seconds": {
                    "type": "string",
                    "description": "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterRequestClusterRefreshRequestedAt:GitOpsClusterRequestClusterRefreshRequestedAt": {
            "properties": {
                "nanos": {
                    "type": "integer",
                    "description": "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.\n"
                },
                "seconds": {
                    "type": "string",
                    "description": "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterRequestId:GitOpsClusterRequestId": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Type of the specified cluster identifier ( 'server' - default, 'name' ).\n"
                },
                "value": {
                    "type": "string",
                    "description": "Cluster server URL or the cluster name.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsClusterRequestUpdateMask:GitOpsClusterRequestUpdateMask": {
            "properties": {
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of field mask paths.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsGnupgRequest:GitOpsGnupgRequest": {
            "properties": {
                "publickeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsGnupgRequestPublickey:GitOpsGnupgRequestPublickey"
                    },
                    "description": "Public key details.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "Indicates if the GnuPG Key should be inserted if not present or updated if present.\n"
                }
            },
            "type": "object",
            "required": [
                "upsert"
            ]
        },
        "harness:platform/GitOpsGnupgRequestPublickey:GitOpsGnupgRequestPublickey": {
            "properties": {
                "fingerprint": {
                    "type": "string",
                    "description": "Fingerprint is the fingerprint of the key\n"
                },
                "keyData": {
                    "type": "string",
                    "description": "KeyData holds the raw key data, in base64 encoded format\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "KeyID specifies the key ID, in hexadecimal string format.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owner holds the owner identification, e.g. a name and e-mail address\n"
                },
                "subType": {
                    "type": "string",
                    "description": "SubType holds the key's sub type\n"
                },
                "trust": {
                    "type": "string",
                    "description": "Trust holds the level of trust assigned to this key\n"
                }
            },
            "type": "object",
            "required": [
                "keyData"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fingerprint",
                        "keyData",
                        "keyId",
                        "owner",
                        "subType",
                        "trust"
                    ]
                }
            }
        },
        "harness:platform/GitOpsRepoCertRequest:GitOpsRepoCertRequest": {
            "properties": {
                "certificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsRepoCertRequestCertificate:GitOpsRepoCertRequestCertificate"
                    },
                    "description": "certificates details.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "if the Repository Certificates should be upserted.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "certificates"
                    ]
                }
            }
        },
        "harness:platform/GitOpsRepoCertRequestCertificate:GitOpsRepoCertRequestCertificate": {
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsRepoCertRequestCertificateItem:GitOpsRepoCertRequestCertificateItem"
                    },
                    "description": "List of certificates to be processed.\n"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsRepoCertRequestCertificateMetadata:GitOpsRepoCertRequestCertificateMetadata"
                    },
                    "description": "metadata details\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsRepoCertRequestCertificateItem:GitOpsRepoCertRequestCertificateItem": {
            "properties": {
                "certData": {
                    "type": "string",
                    "description": "CertData contains the actual certificate data, dependent on the certificate type.\n"
                },
                "certInfo": {
                    "type": "string",
                    "description": "CertInfo will hold additional certificate info, depdendent on the certificate type .\n"
                },
                "certSubType": {
                    "type": "string",
                    "description": "CertSubType specifies the sub type of the cert, i.e. ssh-rsa.\n"
                },
                "certType": {
                    "type": "string",
                    "description": "CertType specifies the type of the certificate - currently one of https or ssh.\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "ServerName specifies the DNS name of the server this certificate is intended.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsRepoCertRequestCertificateMetadata:GitOpsRepoCertRequestCertificateMetadata": {
            "properties": {
                "continue": {
                    "type": "string",
                    "description": "continue may be set if the user set a limit on the number of items returned.\n"
                },
                "remainingItemCount": {
                    "type": "string",
                    "description": "subsequent items in the list.\n"
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "dentifies the server's internal version.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "selfLink is a URL representing this object.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsRepoCredCred:GitOpsRepoCredCred": {
            "properties": {
                "enableOci": {
                    "type": "boolean",
                    "description": "Specifies whether helm-oci support should be enabled for this repo.\n"
                },
                "githubAppEnterpriseBaseUrl": {
                    "type": "string",
                    "description": "Specifies the GitHub API URL for GitHub app authentication.\n"
                },
                "githubAppId": {
                    "type": "string",
                    "description": "Specifies the Github App ID of the app used to access the repo for GitHub app authentication.\n"
                },
                "githubAppInstallationId": {
                    "type": "string",
                    "description": "Specifies the ID of the installed GitHub App for GitHub app authentication.\n"
                },
                "githubAppPrivateKey": {
                    "type": "string",
                    "description": "github*app*private_key specifies the private key PEM data for authentication via GitHub app.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for authenticating at the repo server.\n"
                },
                "sshPrivateKey": {
                    "type": "string",
                    "description": "Contains the private key data for authenticating at the repo server using SSH (only Git repos).\n"
                },
                "tlsClientCertData": {
                    "type": "string",
                    "description": "Specifies the TLS client cert data for authenticating at the repo server.\n"
                },
                "tlsClientCertKey": {
                    "type": "string",
                    "description": "Specifies the TLS client cert key for authenticating at the repo server.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type specifies the type of the repoCreds.Can be either 'git' or 'helm. 'git' is assumed if empty or absent\n"
                },
                "url": {
                    "type": "string",
                    "description": "url representing this object.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for authenticating at the repo server.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitOpsRepositoryRepo:GitOpsRepositoryRepo": {
            "properties": {
                "connectionType": {
                    "type": "string",
                    "description": "Identifies the authentication method used to connect to the repository.\n"
                },
                "enableLfs": {
                    "type": "boolean",
                    "description": "Indicates if git-lfs support must be enabled for this repo. This is valid only for Git repositories.\n"
                },
                "enableOci": {
                    "type": "boolean",
                    "description": "Indicates if helm-oci support must be enabled for this repo.\n"
                },
                "githubAppEnterpriseBaseUrl": {
                    "type": "string",
                    "description": "Base URL of GitHub Enterprise installation. If left empty, this defaults to https://api.github.com.\n"
                },
                "githubAppId": {
                    "type": "string",
                    "description": "Id of the GitHub app used to access the repo.\n"
                },
                "githubAppInstallationId": {
                    "type": "string",
                    "description": "Installation id of the GitHub app used to access the repo.\n"
                },
                "githubAppPrivateKey": {
                    "type": "string",
                    "description": "GitHub app private key PEM data.\n"
                },
                "inheritedCreds": {
                    "type": "boolean",
                    "description": "Indicates if the credentials were inherited from a credential set.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Indicates if the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.\n"
                },
                "insecureIgnoreHostKey": {
                    "type": "boolean",
                    "description": "Indicates if InsecureIgnoreHostKey should be used. Insecure is favored used only for git repos.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name to be used for this repo. Only used with Helm repos.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password or PAT used for authenticating at the remote repository.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Reference between project and repository that allow you automatically to be added as item inside SourceRepos project entity.\n"
                },
                "proxy": {
                    "type": "string",
                    "description": "The HTTP/HTTPS proxy used to access the repo.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "URL to the remote repository.\n"
                },
                "sshPrivateKey": {
                    "type": "string",
                    "description": "PEM data for authenticating at the repo server. Only used with Git repos.\n"
                },
                "tlsClientCertData": {
                    "type": "string",
                    "description": "Certificate in PEM format for authenticating at the repo server.\n"
                },
                "tlsClientCertKey": {
                    "type": "string",
                    "description": "Private key in PEM format for authenticating at the repo server.\n"
                },
                "type_": {
                    "type": "string",
                    "description": "Type specifies the type of the repo. Can be either \"git\" or \"helm. \"git\" is assumed if empty or absent.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username used for authenticating at the remote repository.\n"
                }
            },
            "type": "object",
            "required": [
                "connectionType",
                "repo"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "connectionType",
                        "project",
                        "repo",
                        "type_"
                    ]
                }
            }
        },
        "harness:platform/GitOpsRepositoryUpdateMask:GitOpsRepositoryUpdateMask": {
            "properties": {
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of field mask paths.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GithubConnectorApiAuthentication:GithubConnectorApiAuthentication": {
            "properties": {
                "githubApp": {
                    "$ref": "#/types/harness:platform/GithubConnectorApiAuthenticationGithubApp:GithubConnectorApiAuthenticationGithubApp",
                    "description": "Configuration for using the github app for interacting with the github api.\n"
                },
                "tokenRef": {
                    "type": "string",
                    "description": "Personal access token for interacting with the github api. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GithubConnectorApiAuthenticationGithubApp:GithubConnectorApiAuthenticationGithubApp": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Enter the GitHub App ID from the GitHub App General tab.\n"
                },
                "applicationIdRef": {
                    "type": "string",
                    "description": "Reference to the secret containing application id To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "installationId": {
                    "type": "string",
                    "description": "Enter the Installation ID located in the URL of the installed GitHub App.\n"
                },
                "installationIdRef": {
                    "type": "string",
                    "description": "Reference to the secret containing installation id. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "privateKeyRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the private key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "privateKeyRef"
            ]
        },
        "harness:platform/GithubConnectorCredentials:GithubConnectorCredentials": {
            "properties": {
                "http": {
                    "$ref": "#/types/harness:platform/GithubConnectorCredentialsHttp:GithubConnectorCredentialsHttp",
                    "description": "Authenticate using Username and password over http(s) for the connection.\n"
                },
                "ssh": {
                    "$ref": "#/types/harness:platform/GithubConnectorCredentialsSsh:GithubConnectorCredentialsSsh",
                    "description": "Authenticate using SSH for the connection.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GithubConnectorCredentialsHttp:GithubConnectorCredentialsHttp": {
            "properties": {
                "tokenRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the personal access to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "tokenRef"
            ]
        },
        "harness:platform/GithubConnectorCredentialsSsh:GithubConnectorCredentialsSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the ssh key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ]
        },
        "harness:platform/GitlabConnectorApiAuthentication:GitlabConnectorApiAuthentication": {
            "properties": {
                "tokenRef": {
                    "type": "string",
                    "description": "Personal access token for interacting with the gitlab api. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "tokenRef"
            ]
        },
        "harness:platform/GitlabConnectorCredentials:GitlabConnectorCredentials": {
            "properties": {
                "http": {
                    "$ref": "#/types/harness:platform/GitlabConnectorCredentialsHttp:GitlabConnectorCredentialsHttp",
                    "description": "Authenticate using Username and password over http(s) for the connection.\n"
                },
                "ssh": {
                    "$ref": "#/types/harness:platform/GitlabConnectorCredentialsSsh:GitlabConnectorCredentialsSsh",
                    "description": "Authenticate using SSH for the connection.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitlabConnectorCredentialsHttp:GitlabConnectorCredentialsHttp": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "tokenRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the personal access to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/GitlabConnectorCredentialsSsh:GitlabConnectorCredentialsSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the ssh key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ]
        },
        "harness:platform/HelmConnectorCredentials:HelmConnectorCredentials": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/InputSetGitDetails:InputSetGitDetails": {
            "properties": {
                "baseBranch": {
                    "type": "string",
                    "description": "Name of the default branch (this checks out a new branch titled by branch_name).\n"
                },
                "branchName": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message used for the merge commit.\n"
                },
                "connectorRef": {
                    "type": "string",
                    "description": "Identifier of the Harness Connector used for CRUD operations on the Entity. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "File path of the Entity in the repository.\n"
                },
                "lastCommitId": {
                    "type": "string",
                    "description": "Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.\n"
                },
                "lastObjectId": {
                    "type": "string",
                    "description": "Last object identifier (for Github). To be provided only when updating Pipeline.\n"
                },
                "parentEntityConnectorRef": {
                    "type": "string",
                    "description": "Connector reference for Parent Entity (Pipeline). To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "parentEntityRepoName": {
                    "type": "string",
                    "description": "Repository name for Parent Entity (Pipeline).\n"
                },
                "repoName": {
                    "type": "string",
                    "description": "Name of the repository.\n"
                },
                "storeType": {
                    "type": "string",
                    "description": "Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseBranch",
                        "lastCommitId",
                        "lastObjectId",
                        "parentEntityConnectorRef",
                        "parentEntityRepoName"
                    ]
                }
            }
        },
        "harness:platform/JenkinsConnectorAuth:JenkinsConnectorAuth": {
            "properties": {
                "jenkinsBearerToken": {
                    "$ref": "#/types/harness:platform/JenkinsConnectorAuthJenkinsBearerToken:JenkinsConnectorAuthJenkinsBearerToken",
                    "description": "Authenticate to App Dynamics using bearer token.\n"
                },
                "jenkinsUserNamePassword": {
                    "$ref": "#/types/harness:platform/JenkinsConnectorAuthJenkinsUserNamePassword:JenkinsConnectorAuthJenkinsUserNamePassword",
                    "description": "Authenticate to App Dynamics using user name and password.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Can be one of UsernamePassword, Anonymous, Bearer Token(HTTP Header)\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "harness:platform/JenkinsConnectorAuthJenkinsBearerToken:JenkinsConnectorAuthJenkinsBearerToken": {
            "properties": {
                "tokenRef": {
                    "type": "string",
                    "description": "Reference of the token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "tokenRef"
            ]
        },
        "harness:platform/JenkinsConnectorAuthJenkinsUserNamePassword:JenkinsConnectorAuthJenkinsUserNamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Username reference to use for authentication.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/JiraConnectorAuth:JiraConnectorAuth": {
            "properties": {
                "authType": {
                    "type": "string",
                    "description": "Authentication types for Jira connector\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:platform/JiraConnectorAuthUsernamePassword:JiraConnectorAuthUsernamePassword",
                    "description": "Authenticate using username password.\n"
                }
            },
            "type": "object",
            "required": [
                "authType"
            ]
        },
        "harness:platform/JiraConnectorAuthUsernamePassword:JiraConnectorAuthUsernamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/KubernetesConnectorClientKeyCert:KubernetesConnectorClientKeyCert": {
            "properties": {
                "caCertRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the CA certificate for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "clientCertRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client certificate for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "clientKeyAlgorithm": {
                    "type": "string",
                    "description": "The algorithm used to generate the client key for the connector. Valid values are RSA, EC\n"
                },
                "clientKeyPassphraseRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client key passphrase for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "clientKeyRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client key for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "masterUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes cluster.\n"
                }
            },
            "type": "object",
            "required": [
                "clientCertRef",
                "clientKeyAlgorithm",
                "clientKeyRef",
                "masterUrl"
            ]
        },
        "harness:platform/KubernetesConnectorInheritFromDelegate:KubernetesConnectorInheritFromDelegate": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Selectors to use for the delegate.\n"
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ]
        },
        "harness:platform/KubernetesConnectorOpenidConnect:KubernetesConnectorOpenidConnect": {
            "properties": {
                "clientIdRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client ID for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "issuerUrl": {
                    "type": "string",
                    "description": "The URL of the OpenID Connect issuer.\n"
                },
                "masterUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes cluster.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the password for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Scopes to request for the connector.\n"
                },
                "secretRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client secret for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for the connector.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the username for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "clientIdRef",
                "issuerUrl",
                "masterUrl",
                "passwordRef"
            ]
        },
        "harness:platform/KubernetesConnectorServiceAccount:KubernetesConnectorServiceAccount": {
            "properties": {
                "masterUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes cluster.\n"
                },
                "serviceAccountTokenRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the service account token for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "masterUrl",
                "serviceAccountTokenRef"
            ]
        },
        "harness:platform/KubernetesConnectorUsernamePassword:KubernetesConnectorUsernamePassword": {
            "properties": {
                "masterUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes cluster.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the password for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for the connector.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the username for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "masterUrl",
                "passwordRef"
            ]
        },
        "harness:platform/ManualFreezeCurrentOrUpcomingWindow:ManualFreezeCurrentOrUpcomingWindow": {
            "properties": {
                "endTime": {
                    "type": "integer",
                    "description": "End time of the freeze\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Start time of the freeze\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endTime",
                        "startTime"
                    ]
                }
            }
        },
        "harness:platform/ManualFreezeFreezeWindow:ManualFreezeFreezeWindow": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration of the freeze\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "End time of the freeze\n"
                },
                "recurrences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ManualFreezeFreezeWindowRecurrence:ManualFreezeFreezeWindowRecurrence"
                    },
                    "description": "Recurrence of the freeze window\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "Start time of the freeze\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Timezone\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "duration",
                        "endTime",
                        "recurrences",
                        "startTime",
                        "timeZone"
                    ]
                }
            }
        },
        "harness:platform/ManualFreezeFreezeWindowRecurrence:ManualFreezeFreezeWindowRecurrence": {
            "properties": {
                "recurrenceSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ManualFreezeFreezeWindowRecurrenceRecurrenceSpec:ManualFreezeFreezeWindowRecurrenceRecurrenceSpec"
                    },
                    "description": "Used to filter resources on their attributes\n"
                },
                "type": {
                    "type": "string",
                    "description": "Recurrence type(Daily, Weekly, Monthly, Yearly)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "recurrenceSpecs",
                        "type"
                    ]
                }
            }
        },
        "harness:platform/ManualFreezeFreezeWindowRecurrenceRecurrenceSpec:ManualFreezeFreezeWindowRecurrenceRecurrenceSpec": {
            "properties": {
                "until": {
                    "type": "string",
                    "description": "Recurrence until timestamp\n"
                },
                "value": {
                    "type": "integer",
                    "description": "Value of n, for n months recurrence\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "until",
                        "value"
                    ]
                }
            }
        },
        "harness:platform/MonitoredServiceRequest:MonitoredServiceRequest": {
            "properties": {
                "changeSources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/MonitoredServiceRequestChangeSource:MonitoredServiceRequestChangeSource"
                    },
                    "description": "Set of change sources for the monitored service.\n"
                },
                "dependencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/MonitoredServiceRequestDependency:MonitoredServiceRequestDependency"
                    },
                    "description": "Dependencies of the monitored service.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the monitored service.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the monitored service.\n"
                },
                "environmentRef": {
                    "type": "string",
                    "description": "Environment in which the service is deployed.\n"
                },
                "environmentRefLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Environment reference list for the monitored service.\n"
                },
                "healthSources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/MonitoredServiceRequestHealthSource:MonitoredServiceRequestHealthSource"
                    },
                    "description": "Set of health sources for the monitored service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the monitored service.\n"
                },
                "notificationRuleRefs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/MonitoredServiceRequestNotificationRuleRef:MonitoredServiceRequestNotificationRuleRef"
                    },
                    "description": "Notification rule references for the monitored service.\n"
                },
                "serviceRef": {
                    "type": "string",
                    "description": "Service reference for the monitored service.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for the monitored service. comma-separated key value string pairs.\n"
                },
                "templateRef": {
                    "type": "string",
                    "description": "Template reference for the monitored service.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the monitored service.\n"
                },
                "versionLabel": {
                    "type": "string",
                    "description": "Template version label for the monitored service.\n"
                }
            },
            "type": "object",
            "required": [
                "environmentRef",
                "name",
                "serviceRef",
                "type"
            ]
        },
        "harness:platform/MonitoredServiceRequestChangeSource:MonitoredServiceRequestChangeSource": {
            "properties": {
                "category": {
                    "type": "string",
                    "description": "Category of the change source.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable the change source.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the change source.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the change source.\n"
                },
                "spec": {
                    "type": "string",
                    "description": "Specification of the change source. Depends on the type of the change source.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the change source.\n"
                }
            },
            "type": "object",
            "required": [
                "category",
                "identifier",
                "name",
                "type"
            ]
        },
        "harness:platform/MonitoredServiceRequestDependency:MonitoredServiceRequestDependency": {
            "properties": {
                "dependencyMetadata": {
                    "type": "string",
                    "description": "Dependency metadata for the monitored service.\n"
                },
                "monitoredServiceIdentifier": {
                    "type": "string",
                    "description": "Monitored service identifier of the dependency.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the service dependency.\n"
                }
            },
            "type": "object",
            "required": [
                "monitoredServiceIdentifier",
                "type"
            ]
        },
        "harness:platform/MonitoredServiceRequestHealthSource:MonitoredServiceRequestHealthSource": {
            "properties": {
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the health source.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the health source.\n"
                },
                "spec": {
                    "type": "string",
                    "description": "Specification of the health source. Depends on the type of the health source.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the health source.\n"
                }
            },
            "type": "object",
            "required": [
                "identifier",
                "name",
                "spec",
                "type"
            ]
        },
        "harness:platform/MonitoredServiceRequestNotificationRuleRef:MonitoredServiceRequestNotificationRuleRef": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable notification rule reference for the monitored service.\n"
                },
                "notificationRuleRef": {
                    "type": "string",
                    "description": "Notification rule reference for the monitored service.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "notificationRuleRef"
            ]
        },
        "harness:platform/NexusConnectorCredentials:NexusConnectorCredentials": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/OciHelmConnectorCredentials:OciHelmConnectorCredentials": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/PipelineFiltersFilterProperties:PipelineFiltersFilterProperties": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "description": "Corresponding Entity of the filters. Currently supported types are {Connector, DelegateProfile, Delegate, PipelineSetup, PipelineExecution, Deployment, Audit, Template, EnvironmentGroup, FileStore, CCMRecommendation, Anomaly, Environment}.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "type": "object",
            "required": [
                "filterType"
            ]
        },
        "harness:platform/PipelineGitDetails:PipelineGitDetails": {
            "properties": {
                "baseBranch": {
                    "type": "string",
                    "description": "Name of the default branch (this checks out a new branch titled by branch_name).\n"
                },
                "branchName": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message used for the merge commit.\n"
                },
                "connectorRef": {
                    "type": "string",
                    "description": "Identifier of the Harness Connector used for CRUD operations on the Entity. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "File path of the Entity in the repository.\n"
                },
                "lastCommitId": {
                    "type": "string",
                    "description": "Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.\n"
                },
                "lastObjectId": {
                    "type": "string",
                    "description": "Last object identifier (for Github). To be provided only when updating Pipeline.\n"
                },
                "repoName": {
                    "type": "string",
                    "description": "Name of the repository.\n"
                },
                "storeType": {
                    "type": "string",
                    "description": "Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseBranch",
                        "lastCommitId",
                        "lastObjectId"
                    ]
                }
            }
        },
        "harness:platform/PolicySetPolicy:PolicySetPolicy": {
            "properties": {
                "identifier": {
                    "type": "string",
                    "description": "Account Identifier of the account\n"
                },
                "severity": {
                    "type": "string",
                    "description": "Policy failure response - 'warning' for continuation, 'error' for exit\n"
                }
            },
            "type": "object",
            "required": [
                "identifier",
                "severity"
            ]
        },
        "harness:platform/PrometheusConnectorHeader:PrometheusConnectorHeader": {
            "properties": {
                "encryptedValueRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the encrypted value. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value.\n"
                },
                "valueEncrypted": {
                    "type": "boolean",
                    "description": "Encrypted value.\n"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "harness:platform/ResourceGroupIncludedScope:ResourceGroupIncludedScope": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier of the account\n"
                },
                "filter": {
                    "type": "string",
                    "description": "Can be one of these 2 EXCLUDING*CHILD*SCOPES or INCLUDING*CHILD*SCOPES\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier\n"
                }
            },
            "type": "object",
            "required": [
                "filter"
            ]
        },
        "harness:platform/ResourceGroupResourceFilter:ResourceGroupResourceFilter": {
            "properties": {
                "includeAllResources": {
                    "type": "boolean",
                    "description": "Include all resource or not\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ResourceGroupResourceFilterResource:ResourceGroupResourceFilterResource"
                    },
                    "description": "Resources for a resource group\n"
                }
            },
            "type": "object"
        },
        "harness:platform/ResourceGroupResourceFilterResource:ResourceGroupResourceFilterResource": {
            "properties": {
                "attributeFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ResourceGroupResourceFilterResourceAttributeFilter:ResourceGroupResourceFilterResourceAttributeFilter"
                    },
                    "description": "Used to filter resources on their attributes\n"
                },
                "identifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the identifiers\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": "Type of the resource\n"
                }
            },
            "type": "object",
            "required": [
                "resourceType"
            ]
        },
        "harness:platform/ResourceGroupResourceFilterResourceAttributeFilter:ResourceGroupResourceFilterResourceAttributeFilter": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Name of the attribute. Valid values are `category` or `type`.\n"
                },
                "attributeValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value of the attributes.Valid values for `category` are [ARTIFACTORY,CLOUD*COST,CLOUD*PROVIDER,CODE*REPO,MONITORING,SECRET*MANAGER,TICKETING] and for `type` are [Production,PreProduction]\n"
                }
            },
            "type": "object"
        },
        "harness:platform/RoleAssignmentsPrincipal:RoleAssignmentsPrincipal": {
            "properties": {
                "identifier": {
                    "type": "string",
                    "description": "Identifier.\n"
                },
                "scopeLevel": {
                    "type": "string",
                    "description": "Scope level.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "scopeLevel",
                        "type"
                    ]
                }
            }
        },
        "harness:platform/SecretSshkeyKerberos:SecretSshkeyKerberos": {
            "properties": {
                "principal": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "realm": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication.\n"
                },
                "tgtGenerationMethod": {
                    "type": "string",
                    "description": "Method to generate tgt\n"
                },
                "tgtKeyTabFilePathSpec": {
                    "$ref": "#/types/harness:platform/SecretSshkeyKerberosTgtKeyTabFilePathSpec:SecretSshkeyKerberosTgtKeyTabFilePathSpec",
                    "description": "Authenticate to App Dynamics using username and password.\n"
                },
                "tgtPasswordSpec": {
                    "$ref": "#/types/harness:platform/SecretSshkeyKerberosTgtPasswordSpec:SecretSshkeyKerberosTgtPasswordSpec",
                    "description": "Authenticate to App Dynamics using username and password.\n"
                }
            },
            "type": "object",
            "required": [
                "principal",
                "realm"
            ]
        },
        "harness:platform/SecretSshkeyKerberosTgtKeyTabFilePathSpec:SecretSshkeyKerberosTgtKeyTabFilePathSpec": {
            "properties": {
                "keyPath": {
                    "type": "string",
                    "description": "key path\n"
                }
            },
            "type": "object"
        },
        "harness:platform/SecretSshkeyKerberosTgtPasswordSpec:SecretSshkeyKerberosTgtPasswordSpec": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "password. To reference a password at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a password at the account scope, prefix 'account` to the expression: account.{identifier}\n"
                }
            },
            "type": "object"
        },
        "harness:platform/SecretSshkeySsh:SecretSshkeySsh": {
            "properties": {
                "credentialType": {
                    "type": "string",
                    "description": "This specifies SSH credential type as Password, KeyPath or KeyReference\n"
                },
                "sshPasswordCredential": {
                    "$ref": "#/types/harness:platform/SecretSshkeySshSshPasswordCredential:SecretSshkeySshSshPasswordCredential",
                    "description": "SSH credential of type keyReference\n"
                },
                "sshkeyPathCredential": {
                    "$ref": "#/types/harness:platform/SecretSshkeySshSshkeyPathCredential:SecretSshkeySshSshkeyPathCredential",
                    "description": "SSH credential of type keyPath\n"
                },
                "sshkeyReferenceCredential": {
                    "$ref": "#/types/harness:platform/SecretSshkeySshSshkeyReferenceCredential:SecretSshkeySshSshkeyReferenceCredential",
                    "description": "SSH credential of type keyReference\n"
                }
            },
            "type": "object",
            "required": [
                "credentialType"
            ]
        },
        "harness:platform/SecretSshkeySshSshPasswordCredential:SecretSshkeySshSshPasswordCredential": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "SSH Password. To reference a password at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a password at the account scope, prefix 'account` to the expression: account.{identifier}\n"
                },
                "userName": {
                    "type": "string",
                    "description": "SSH Username.\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "userName"
            ]
        },
        "harness:platform/SecretSshkeySshSshkeyPathCredential:SecretSshkeySshSshkeyPathCredential": {
            "properties": {
                "encryptedPassphrase": {
                    "type": "string",
                    "description": "Encrypted Passphrase . To reference a encryptedPassphrase at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a encryptedPassPhrase at the account scope, prefix 'account` to the expression: account.{identifier}\n"
                },
                "keyPath": {
                    "type": "string",
                    "description": "Path of the key file.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "SSH Username.\n"
                }
            },
            "type": "object",
            "required": [
                "keyPath",
                "userName"
            ]
        },
        "harness:platform/SecretSshkeySshSshkeyReferenceCredential:SecretSshkeySshSshkeyReferenceCredential": {
            "properties": {
                "encryptedPassphrase": {
                    "type": "string",
                    "description": "Encrypted Passphrase. To reference a encryptedPassphrase at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a encryptedPassPhrase at the account scope, prefix 'account` to the expression: account.{identifier}\n"
                },
                "key": {
                    "type": "string",
                    "description": "SSH key. To reference a key at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a key at the account scope, prefix 'account` to the expression: account.{identifier}\n"
                },
                "userName": {
                    "type": "string",
                    "description": "SSH Username.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "userName"
            ]
        },
        "harness:platform/ServiceNowConnectorAuth:ServiceNowConnectorAuth": {
            "properties": {
                "adfs": {
                    "$ref": "#/types/harness:platform/ServiceNowConnectorAuthAdfs:ServiceNowConnectorAuthAdfs",
                    "description": "Authenticate using adfs client credentials with certificate.\n"
                },
                "authType": {
                    "type": "string",
                    "description": "Authentication types for Jira connector\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:platform/ServiceNowConnectorAuthUsernamePassword:ServiceNowConnectorAuthUsernamePassword",
                    "description": "Authenticate using username password.\n"
                }
            },
            "type": "object",
            "required": [
                "authType"
            ]
        },
        "harness:platform/ServiceNowConnectorAuthAdfs:ServiceNowConnectorAuthAdfs": {
            "properties": {
                "adfsUrl": {
                    "type": "string",
                    "description": "asdf URL.\n"
                },
                "certificateRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the certificate to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "clientIdRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the clientIdRef to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "privateKeyRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the privateKeyRef to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "resourceIdRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the resourceIdRef to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "adfsUrl",
                "certificateRef",
                "clientIdRef",
                "privateKeyRef",
                "resourceIdRef"
            ]
        },
        "harness:platform/ServiceNowConnectorAuthUsernamePassword:ServiceNowConnectorAuthUsernamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef"
            ]
        },
        "harness:platform/SloRequest:SloRequest": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description for the SLO.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the SLO.\n"
                },
                "notificationRuleRefs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/SloRequestNotificationRuleRef:SloRequestNotificationRuleRef"
                    },
                    "description": "Notification rule references for the SLO.\n"
                },
                "sloTarget": {
                    "$ref": "#/types/harness:platform/SloRequestSloTarget:SloRequestSloTarget",
                    "description": "SLO Target specification.\n"
                },
                "spec": {
                    "type": "string",
                    "description": "Specification of the SLO.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for the SLO. comma-separated key value string pairs.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the SLO.\n"
                },
                "userJourneyRefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User journey reference list for the SLO.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "sloTarget",
                "spec",
                "type",
                "userJourneyRefs"
            ]
        },
        "harness:platform/SloRequestNotificationRuleRef:SloRequestNotificationRuleRef": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable or disable notification rule reference for the SLO.\n"
                },
                "notificationRuleRef": {
                    "type": "string",
                    "description": "Notification rule reference for the SLO.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "notificationRuleRef"
            ]
        },
        "harness:platform/SloRequestSloTarget:SloRequestSloTarget": {
            "properties": {
                "sloTargetPercentage": {
                    "type": "number",
                    "description": "Target percentage for the SLO.\n"
                },
                "spec": {
                    "type": "string",
                    "description": "Specification of the SLO Target.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the SLO target.\n"
                }
            },
            "type": "object",
            "required": [
                "sloTargetPercentage",
                "spec",
                "type"
            ]
        },
        "harness:platform/SpotConnectorPermanentToken:SpotConnectorPermanentToken": {
            "properties": {
                "apiTokenRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the permanent api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect only using delegates with these tags.\n"
                },
                "executeOnDelegate": {
                    "type": "boolean",
                    "description": "Execute on delegate or not.\n"
                },
                "spotAccountId": {
                    "type": "string",
                    "description": "Spot account id.\n"
                },
                "spotAccountIdRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the spot account id. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "apiTokenRef"
            ]
        },
        "harness:platform/TasConnectorCredentials:TasConnectorCredentials": {
            "properties": {
                "tasManualDetails": {
                    "$ref": "#/types/harness:platform/TasConnectorCredentialsTasManualDetails:TasConnectorCredentialsTasManualDetails",
                    "description": "Authenticate to Tas using manual details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type can be ManualConfig.\n"
                }
            },
            "type": "object",
            "required": [
                "tasManualDetails",
                "type"
            ]
        },
        "harness:platform/TasConnectorCredentialsTasManualDetails:TasConnectorCredentialsTasManualDetails": {
            "properties": {
                "endpointUrl": {
                    "type": "string",
                    "description": "URL of the Tas server.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference of the secret for the password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "endpointUrl",
                "passwordRef"
            ]
        },
        "harness:platform/TemplateFiltersFilterProperties:TemplateFiltersFilterProperties": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "description": "Corresponding Entity of the filters. Currently supported types are {TemplateSetup, TemplateExecution, Template}.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "type": "object",
            "required": [
                "filterType"
            ]
        },
        "harness:platform/TemplateGitDetails:TemplateGitDetails": {
            "properties": {
                "baseBranch": {
                    "type": "string",
                    "description": "Name of the default branch (this checks out a new branch titled by branch_name).\n"
                },
                "branchName": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message used for the merge commit.\n"
                },
                "connectorRef": {
                    "type": "string",
                    "description": "Identifier of the Harness Connector used for CRUD operations on the Entity. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "File path of the Entity in the repository.\n"
                },
                "lastCommitId": {
                    "type": "string",
                    "description": "Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.\n"
                },
                "lastObjectId": {
                    "type": "string",
                    "description": "Last object identifier (for Github). To be provided only when updating Pipeline.\n"
                },
                "repoName": {
                    "type": "string",
                    "description": "Name of the repository.\n"
                },
                "storeType": {
                    "type": "string",
                    "description": "Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseBranch",
                        "branchName",
                        "commitMessage",
                        "connectorRef",
                        "filePath",
                        "lastCommitId",
                        "lastObjectId",
                        "repoName",
                        "storeType"
                    ]
                }
            }
        },
        "harness:platform/TerraformCloudConnectorCredentials:TerraformCloudConnectorCredentials": {
            "properties": {
                "apiToken": {
                    "$ref": "#/types/harness:platform/TerraformCloudConnectorCredentialsApiToken:TerraformCloudConnectorCredentialsApiToken",
                    "description": "API token credentials to use for authentication.\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken"
            ]
        },
        "harness:platform/TerraformCloudConnectorCredentialsApiToken:TerraformCloudConnectorCredentialsApiToken": {
            "properties": {
                "apiTokenRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the API token to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "apiTokenRef"
            ]
        },
        "harness:platform/UserRoleBinding:UserRoleBinding": {
            "properties": {
                "managedRole": {
                    "type": "boolean",
                    "description": "Managed Role of the user.\n"
                },
                "resourceGroupIdentifier": {
                    "type": "string",
                    "description": "Resource Group Identifier of the user.\n"
                },
                "resourceGroupName": {
                    "type": "string",
                    "description": "Resource Group Name of the user.\n"
                },
                "roleIdentifier": {
                    "type": "string",
                    "description": "Role Identifier of the user.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "Role Name Identifier of the user.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/UsergroupNotificationConfig:UsergroupNotificationConfig": {
            "properties": {
                "groupEmail": {
                    "type": "string",
                    "description": "Group email.\n"
                },
                "microsoftTeamsWebhookUrl": {
                    "type": "string",
                    "description": "Url of Microsoft teams webhook.\n"
                },
                "pagerDutyKey": {
                    "type": "string",
                    "description": "Pager duty key.\n"
                },
                "sendEmailToAllUsers": {
                    "type": "boolean",
                    "description": "Send email to all the group members.\n"
                },
                "slackWebhookUrl": {
                    "type": "string",
                    "description": "Url of slack webhook.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Can be one of EMAIL, SLACK, PAGERDUTY, MSTEAMS.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "sendEmailToAllUsers"
                    ]
                }
            }
        },
        "harness:platform/VariablesSpec:VariablesSpec": {
            "properties": {
                "fixedValue": {
                    "type": "string",
                    "description": "FixedValue of the variable\n"
                },
                "valueType": {
                    "type": "string",
                    "description": "Type of Value of the Variable. For now only FIXED is supported\n"
                }
            },
            "type": "object",
            "required": [
                "fixedValue",
                "valueType"
            ]
        },
        "harness:platform/getAppDynamicsConnectorApiToken:getAppDynamicsConnectorApiToken": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The client id used for connecting to App Dynamics.\n"
                },
                "clientSecretRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the App Dynamics client secret. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecretRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAppDynamicsConnectorUsernamePassword:getAppDynamicsConnectorUsernamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getArtifactoryConnectorCredential:getArtifactoryConnectorCredential": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsCCConnectorCrossAccountAccess:getAwsCCConnectorCrossAccountAccess": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "The external id of the role to use for cross-account access. This is a random unique value to provide additional secure authentication.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The ARN of the role to use for cross-account access.\n"
                }
            },
            "type": "object",
            "required": [
                "externalId",
                "roleArn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsConnectorCrossAccountAccess:getAwsConnectorCrossAccountAccess": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the role that you want to assume. This is an IAM role in the target AWS account.\n"
                }
            },
            "type": "object",
            "required": [
                "externalId",
                "roleArn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsConnectorEqualJitterBackoffStrategy:getAwsConnectorEqualJitterBackoffStrategy": {
            "properties": {
                "baseDelay": {
                    "type": "integer",
                    "description": "Base delay.\n"
                },
                "maxBackoffTime": {
                    "type": "integer",
                    "description": "Max BackOff Time.\n"
                },
                "retryCount": {
                    "type": "integer",
                    "description": "Retry Count.\n"
                }
            },
            "type": "object",
            "required": [
                "baseDelay",
                "maxBackoffTime",
                "retryCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsConnectorFixedDelayBackoffStrategy:getAwsConnectorFixedDelayBackoffStrategy": {
            "properties": {
                "fixedBackoff": {
                    "type": "integer",
                    "description": "Fixed Backoff.\n"
                },
                "retryCount": {
                    "type": "integer",
                    "description": "Retry Count.\n"
                }
            },
            "type": "object",
            "required": [
                "fixedBackoff",
                "retryCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsConnectorFullJitterBackoffStrategy:getAwsConnectorFullJitterBackoffStrategy": {
            "properties": {
                "baseDelay": {
                    "type": "integer",
                    "description": "Base delay.\n"
                },
                "maxBackoffTime": {
                    "type": "integer",
                    "description": "Max BackOff Time.\n"
                },
                "retryCount": {
                    "type": "integer",
                    "description": "Retry Count.\n"
                }
            },
            "type": "object",
            "required": [
                "baseDelay",
                "maxBackoffTime",
                "retryCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsConnectorInheritFromDelegate:getAwsConnectorInheritFromDelegate": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The delegates to inherit the credentials from.\n"
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsConnectorIrsa:getAwsConnectorIrsa": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The delegates to inherit the credentials from.\n"
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsConnectorManual:getAwsConnectorManual": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "AWS access key.\n"
                },
                "accessKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the aws access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect only use delegates with these tags.\n"
                },
                "secretKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the aws secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "accessKeyRef",
                "delegateSelectors",
                "secretKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsKmsConnectorCredential:getAwsKmsConnectorCredential": {
            "properties": {
                "assumeRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAwsKmsConnectorCredentialAssumeRole:getAwsKmsConnectorCredentialAssumeRole"
                    },
                    "description": "Connect using STS assume role.\n"
                },
                "inheritFromDelegate": {
                    "type": "boolean",
                    "description": "Inherit the credentials from from the delegate.\n"
                },
                "manuals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAwsKmsConnectorCredentialManual:getAwsKmsConnectorCredentialManual"
                    },
                    "description": "Specify the AWS key and secret used for authenticating.\n"
                }
            },
            "type": "object",
            "required": [
                "assumeRoles",
                "inheritFromDelegate",
                "manuals"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsKmsConnectorCredentialAssumeRole:getAwsKmsConnectorCredentialAssumeRole": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "description": "The duration, in seconds, of the role session. The value can range from 900 seconds (15 minutes) to 3600 seconds (1 hour). By default, the value is set to 3600 seconds. An expiration can also be specified in the client request body. The minimum value is 1 hour.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The ARN of the role to assume.\n"
                }
            },
            "type": "object",
            "required": [
                "duration",
                "externalId",
                "roleArn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsKmsConnectorCredentialManual:getAwsKmsConnectorCredentialManual": {
            "properties": {
                "accessKeyRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the AWS access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "secretKeyRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the AWS secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "accessKeyRef",
                "secretKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsSecretManagerConnectorCredential:getAwsSecretManagerConnectorCredential": {
            "properties": {
                "assumeRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAwsSecretManagerConnectorCredentialAssumeRole:getAwsSecretManagerConnectorCredentialAssumeRole"
                    },
                    "description": "Connect using STS assume role.\n"
                },
                "inheritFromDelegate": {
                    "type": "boolean",
                    "description": "Inherit the credentials from from the delegate.\n"
                },
                "manuals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAwsSecretManagerConnectorCredentialManual:getAwsSecretManagerConnectorCredentialManual"
                    },
                    "description": "Specify the AWS key and secret used for authenticating.\n"
                }
            },
            "type": "object",
            "required": [
                "assumeRoles",
                "inheritFromDelegate",
                "manuals"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsSecretManagerConnectorCredentialAssumeRole:getAwsSecretManagerConnectorCredentialAssumeRole": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "description": "The duration, in seconds, of the role session. The value can range from 900 seconds (15 minutes) to 3600 seconds (1 hour). By default, the value is set to 3600 seconds. An expiration can also be specified in the client request body. The minimum value is 1 hour.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "If the administrator of the account to which the role belongs provided you with an external ID, then enter that value.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The ARN of the role to assume.\n"
                }
            },
            "type": "object",
            "required": [
                "duration",
                "externalId",
                "roleArn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAwsSecretManagerConnectorCredentialManual:getAwsSecretManagerConnectorCredentialManual": {
            "properties": {
                "accessKeyRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the AWS access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "secretKeyRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the AWS secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "accessKeyRef",
                "secretKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAzureCloudCostConnectorBillingExportSpec:getAzureCloudCostConnectorBillingExportSpec": {
            "properties": {
                "containerName": {
                    "type": "string",
                    "description": "Name of the container.\n"
                },
                "directoryName": {
                    "type": "string",
                    "description": "Name of the directory.\n"
                },
                "reportName": {
                    "type": "string",
                    "description": "Name of the report.\n"
                },
                "storageAccountName": {
                    "type": "string",
                    "description": "Name of the storage account.\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Subsription Id.\n"
                }
            },
            "type": "object",
            "required": [
                "containerName",
                "directoryName",
                "reportName",
                "storageAccountName",
                "subscriptionId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAzureCloudProviderConnectorCredential:getAzureCloudProviderConnectorCredential": {
            "properties": {
                "azureInheritFromDelegateDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAzureCloudProviderConnectorCredentialAzureInheritFromDelegateDetail:getAzureCloudProviderConnectorCredentialAzureInheritFromDelegateDetail"
                    },
                    "description": "Authenticate to Azure Cloud Provider using details inheriting from delegate.\n"
                },
                "azureManualDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAzureCloudProviderConnectorCredentialAzureManualDetail:getAzureCloudProviderConnectorCredentialAzureManualDetail"
                    },
                    "description": "Authenticate to Azure Cloud Provider using manual details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type can either be InheritFromDelegate or ManualConfig.\n"
                }
            },
            "type": "object",
            "required": [
                "azureInheritFromDelegateDetails",
                "azureManualDetails",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAzureCloudProviderConnectorCredentialAzureInheritFromDelegateDetail:getAzureCloudProviderConnectorCredentialAzureInheritFromDelegateDetail": {
            "properties": {
                "auths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAzureCloudProviderConnectorCredentialAzureInheritFromDelegateDetailAuth:getAzureCloudProviderConnectorCredentialAzureInheritFromDelegateDetailAuth"
                    },
                    "description": "Auth to authenticate to Azure Cloud Provider using details inheriting from delegate.\n"
                }
            },
            "type": "object",
            "required": [
                "auths"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAzureCloudProviderConnectorCredentialAzureInheritFromDelegateDetailAuth:getAzureCloudProviderConnectorCredentialAzureInheritFromDelegateDetailAuth": {
            "properties": {
                "azureMsiAuthUas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAzureCloudProviderConnectorCredentialAzureInheritFromDelegateDetailAuthAzureMsiAuthUa:getAzureCloudProviderConnectorCredentialAzureInheritFromDelegateDetailAuthAzureMsiAuthUa"
                    },
                    "description": "Azure UserAssigned MSI auth details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type can either be SystemAssignedManagedIdentity or UserAssignedManagedIdentity.\n"
                }
            },
            "type": "object",
            "required": [
                "azureMsiAuthUas",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAzureCloudProviderConnectorCredentialAzureInheritFromDelegateDetailAuthAzureMsiAuthUa:getAzureCloudProviderConnectorCredentialAzureInheritFromDelegateDetailAuthAzureMsiAuthUa": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "Client Id of the ManagedIdentity resource.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAzureCloudProviderConnectorCredentialAzureManualDetail:getAzureCloudProviderConnectorCredentialAzureManualDetail": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Application ID of the Azure App.\n"
                },
                "auths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAzureCloudProviderConnectorCredentialAzureManualDetailAuth:getAzureCloudProviderConnectorCredentialAzureManualDetailAuth"
                    },
                    "description": "Contains Azure auth details.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The Azure Active Directory (AAD) directory ID where you created your application.\n"
                }
            },
            "type": "object",
            "required": [
                "applicationId",
                "auths",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAzureCloudProviderConnectorCredentialAzureManualDetailAuth:getAzureCloudProviderConnectorCredentialAzureManualDetailAuth": {
            "properties": {
                "azureClientKeyCerts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAzureCloudProviderConnectorCredentialAzureManualDetailAuthAzureClientKeyCert:getAzureCloudProviderConnectorCredentialAzureManualDetailAuthAzureClientKeyCert"
                    },
                    "description": "Azure client key certificate details.\n"
                },
                "azureClientSecretKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getAzureCloudProviderConnectorCredentialAzureManualDetailAuthAzureClientSecretKey:getAzureCloudProviderConnectorCredentialAzureManualDetailAuthAzureClientSecretKey"
                    },
                    "description": "Azure Client Secret Key details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type can either be Certificate or Secret.\n"
                }
            },
            "type": "object",
            "required": [
                "azureClientKeyCerts",
                "azureClientSecretKeys",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAzureCloudProviderConnectorCredentialAzureManualDetailAuthAzureClientKeyCert:getAzureCloudProviderConnectorCredentialAzureManualDetailAuthAzureClientKeyCert": {
            "properties": {
                "certificateRef": {
                    "type": "string",
                    "description": "Reference of the secret for the certificate.\n"
                }
            },
            "type": "object",
            "required": [
                "certificateRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getAzureCloudProviderConnectorCredentialAzureManualDetailAuthAzureClientSecretKey:getAzureCloudProviderConnectorCredentialAzureManualDetailAuthAzureClientSecretKey": {
            "properties": {
                "secretRef": {
                    "type": "string",
                    "description": "Reference of the secret for the secret key.\n"
                }
            },
            "type": "object",
            "required": [
                "secretRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getBitbucketConnectorApiAuthentication:getBitbucketConnectorApiAuthentication": {
            "properties": {
                "tokenRef": {
                    "type": "string",
                    "description": "Personal access token for interacting with the BitBucket api. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username used for connecting to the api.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the username. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "tokenRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getBitbucketConnectorCredential:getBitbucketConnectorCredential": {
            "properties": {
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getBitbucketConnectorCredentialHttp:getBitbucketConnectorCredentialHttp"
                    },
                    "description": "Authenticate using Username and password over http(s) for the connection.\n"
                },
                "sshes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getBitbucketConnectorCredentialSsh:getBitbucketConnectorCredentialSsh"
                    },
                    "description": "Authenticate using SSH for the connection.\n"
                }
            },
            "type": "object",
            "required": [
                "https",
                "sshes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getBitbucketConnectorCredentialHttp:getBitbucketConnectorCredentialHttp": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getBitbucketConnectorCredentialSsh:getBitbucketConnectorCredentialSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the ssh key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getCcmFiltersFilterProperty:getCcmFiltersFilterProperty": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "description": "Corresponding Entity of the filters.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getDockerConnectorCredential:getDockerConnectorCredential": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the password to use for the docker registry. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use for the docker registry.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the username to use for the docker registry. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getElasticsearchConnectorApiToken:getElasticsearchConnectorApiToken": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The client id used for connecting to ElasticSearch.\n"
                },
                "clientSecretRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the ElasticSearch client secret. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecretRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getElasticsearchConnectorUsernamePassword:getElasticsearchConnectorUsernamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getFiltersFilterProperty:getFiltersFilterProperty": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "description": "Corresponding Entity of the filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGcpCloudCostConnectorBillingExportSpec:getGcpCloudCostConnectorBillingExportSpec": {
            "properties": {
                "dataSetId": {
                    "type": "string",
                    "description": "Data Set Id.\n"
                },
                "tableId": {
                    "type": "string",
                    "description": "Table Id.\n"
                }
            },
            "type": "object",
            "required": [
                "dataSetId",
                "tableId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGcpConnectorInheritFromDelegate:getGcpConnectorInheritFromDelegate": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The delegates to inherit the credentials from.\n"
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGcpConnectorManual:getGcpConnectorManual": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The delegates to connect with.\n"
                },
                "secretKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the secret key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors",
                "secretKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitConnectorCredential:getGitConnectorCredential": {
            "properties": {
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitConnectorCredentialHttp:getGitConnectorCredentialHttp"
                    },
                    "description": "Authenticate using Username and password over http(s) for the connection.\n"
                },
                "sshes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitConnectorCredentialSsh:getGitConnectorCredentialSsh"
                    },
                    "description": "Authenticate using SSH for the connection.\n"
                }
            },
            "type": "object",
            "required": [
                "https",
                "sshes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitConnectorCredentialHttp:getGitConnectorCredentialHttp": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitConnectorCredentialSsh:getGitConnectorCredentialSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the ssh key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGithubConnectorApiAuthentication:getGithubConnectorApiAuthentication": {
            "properties": {
                "githubApps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGithubConnectorApiAuthenticationGithubApp:getGithubConnectorApiAuthenticationGithubApp"
                    },
                    "description": "Configuration for using the github app for interacting with the github api.\n"
                },
                "tokenRef": {
                    "type": "string",
                    "description": "Personal access token for interacting with the github api. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "githubApps",
                "tokenRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGithubConnectorApiAuthenticationGithubApp:getGithubConnectorApiAuthenticationGithubApp": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Enter the GitHub App ID from the GitHub App General tab.\n"
                },
                "applicationIdRef": {
                    "type": "string",
                    "description": "Reference to the secret containing application id To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "installationId": {
                    "type": "string",
                    "description": "Enter the Installation ID located in the URL of the installed GitHub App.\n"
                },
                "installationIdRef": {
                    "type": "string",
                    "description": "Reference to the secret containing installation id. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "privateKeyRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the private key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "applicationId",
                "applicationIdRef",
                "installationId",
                "installationIdRef",
                "privateKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGithubConnectorCredential:getGithubConnectorCredential": {
            "properties": {
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGithubConnectorCredentialHttp:getGithubConnectorCredentialHttp"
                    },
                    "description": "Authenticate using Username and password over http(s) for the connection.\n"
                },
                "sshes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGithubConnectorCredentialSsh:getGithubConnectorCredentialSsh"
                    },
                    "description": "Authenticate using SSH for the connection.\n"
                }
            },
            "type": "object",
            "required": [
                "https",
                "sshes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGithubConnectorCredentialHttp:getGithubConnectorCredentialHttp": {
            "properties": {
                "tokenRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the personal access to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "tokenRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGithubConnectorCredentialSsh:getGithubConnectorCredentialSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the ssh key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitlabConnectorApiAuthentication:getGitlabConnectorApiAuthentication": {
            "properties": {
                "tokenRef": {
                    "type": "string",
                    "description": "Personal access token for interacting with the gitlab api. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "tokenRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitlabConnectorCredential:getGitlabConnectorCredential": {
            "properties": {
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitlabConnectorCredentialHttp:getGitlabConnectorCredentialHttp"
                    },
                    "description": "Authenticate using Username and password over http(s) for the connection.\n"
                },
                "sshes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitlabConnectorCredentialSsh:getGitlabConnectorCredentialSsh"
                    },
                    "description": "Authenticate using SSH for the connection.\n"
                }
            },
            "type": "object",
            "required": [
                "https",
                "sshes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitlabConnectorCredentialHttp:getGitlabConnectorCredentialHttp": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "tokenRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the personal access to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "tokenRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitlabConnectorCredentialSsh:getGitlabConnectorCredentialSsh": {
            "properties": {
                "sshKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the ssh key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "sshKeyRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitopsAgentMetadata:getGitopsAgentMetadata": {
            "properties": {
                "highAvailability": {
                    "type": "boolean",
                    "description": "Indicates if the deployment should be deployed using the deploy-ha.yaml\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The k8s namespace that this agent resides in.\n"
                }
            },
            "type": "object",
            "required": [
                "highAvailability",
                "namespace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitopsApplicationsApplication:getGitopsApplicationsApplication": {
            "properties": {
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationMetadata:getGitopsApplicationsApplicationMetadata"
                    },
                    "description": "Metadata corresponding to the resources. This includes all the objects a user must create.\n"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpec:getGitopsApplicationsApplicationSpec"
                    },
                    "description": "Specifications of the GitOps application. This includes the repository URL, application definition, source, destination and sync policy.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationMetadata:getGitopsApplicationsApplicationMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations are unstructured key value pairs corresponding to a resource. External tools set these to store and retrieve arbitrary metadata.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "Name of the cluster corresponding to the object. API server ignores this if set in any create or update request.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Before the object is removed from the register, it must be empty. Each element serves as a unique identifier for the component that is accountable for removing that entry from the list. Entries in this list can only be removed if the object's deletionTimestamp is not null. The processing and removal of finalizers can happen in any sequence. No order is enforced as it may block the finalizers. Finalizers is a shared field that can be reordered by any actor with authority. If the finalizer list is processed in order, this could result in a scenario where the component in charge of the list's first finalizer is waiting for a signal (generated by a field value, an external system, or another) produced by a component in charge of the list's later finalizer.\n"
                },
                "generateName": {
                    "type": "string",
                    "description": "An optional prefix that the server will only apply if the Name field is empty to create a unique name. The name returned to the client will differ from the name passed if this field is used. A unique suffix will be added to this value as well. The supplied value must adhere to the same validation guidelines as the Name field and may be reduced by the suffix length necessary to ensure that it is unique on the server. The server will NOT return a 409 if this field is supplied and the created name already exists; instead, it will either return 201 Created or 500 with Reason ServerTimeout, indicating that a unique name could not be found in the allotted time and the client should try again later.\n"
                },
                "generation": {
                    "type": "string",
                    "description": "A sequence number representing a specific generation of the desired state. This is a read-only value populated by the system.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Name cannot be updated.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the GitOps application. An empty namespace is equivalent to the \"default\" namespace.\n"
                },
                "ownerReferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationMetadataOwnerReference:getGitopsApplicationsApplicationMetadataOwnerReference"
                    },
                    "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n"
                }
            },
            "type": "object",
            "required": [
                "annotations",
                "finalizers",
                "generation",
                "labels",
                "namespace",
                "uid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitopsApplicationsApplicationMetadataOwnerReference:getGitopsApplicationsApplicationMetadataOwnerReference": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "API version of the referent.\n"
                },
                "blockOwnerDeletion": {
                    "type": "boolean",
                    "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.\n"
                },
                "controller": {
                    "type": "boolean",
                    "description": "Indicates if the reference points to the managing controller.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Kind of the referent.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the referent.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "UID of the referent.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpec:getGitopsApplicationsApplicationSpec": {
            "properties": {
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecDestination:getGitopsApplicationsApplicationSpecDestination"
                    },
                    "description": "Information about the GitOps application's destination.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSource:getGitopsApplicationsApplicationSpecSource"
                    },
                    "description": "Contains all information about the source of a GitOps application.\n"
                },
                "syncPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSyncPolicy:getGitopsApplicationsApplicationSpecSyncPolicy"
                    },
                    "description": "Controls when a sync will be performed in response to updates in git.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecDestination:getGitopsApplicationsApplicationSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the kubernetes control plane API.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace of the GitOps application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server of the destination of the GitOps application.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSource:getGitopsApplicationsApplicationSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name, and must be specified for the GitOps applications sourced from a helm repo.\n"
                },
                "directories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceDirectory:getGitopsApplicationsApplicationSpecSourceDirectory"
                    },
                    "description": "Options for applications of type plain YAML or Jsonnet.\n"
                },
                "helms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceHelm:getGitopsApplicationsApplicationSpecSourceHelm"
                    },
                    "description": "Holds helm specific options.\n"
                },
                "ksonnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceKsonnet:getGitopsApplicationsApplicationSpecSourceKsonnet"
                    },
                    "description": "Ksonnet specific options.\n"
                },
                "kustomizes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceKustomize:getGitopsApplicationsApplicationSpecSourceKustomize"
                    },
                    "description": "Options specific to a GitOps application source specific to Kustomize.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the git repository, and is only valid for the GitOps applications sourced from git.\n"
                },
                "plugins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourcePlugin:getGitopsApplicationsApplicationSpecSourcePlugin"
                    },
                    "description": "Options specific to config management plugins.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (git or helm) that contains the GitOps application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the GitOps application to. In case of git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag of the chart's version.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceDirectory:getGitopsApplicationsApplicationSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation.\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation.\n"
                },
                "jsonnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceDirectoryJsonnet:getGitopsApplicationsApplicationSpecSourceDirectoryJsonnet"
                    },
                    "description": "Options specific to applications of type Jsonnet.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Indicates to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceDirectoryJsonnet:getGitopsApplicationsApplicationSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceDirectoryJsonnetExtVar:getGitopsApplicationsApplicationSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of jsonnet external variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceDirectoryJsonnetTla:getGitopsApplicationsApplicationSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of jsonnet top-level arguments(TLAS).\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceDirectoryJsonnetExtVar:getGitopsApplicationsApplicationSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Code of the external variables of jsonnet application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the external variables of jsonnet application.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the external variables of jsonnet application.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceDirectoryJsonnetTla:getGitopsApplicationsApplicationSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Code of the TLAS of the jsonnet application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the TLAS of the jsonnet application.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the TLAS of the jsonnet application.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceHelm:getGitopsApplicationsApplicationSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceHelmFileParameter:getGitopsApplicationsApplicationSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters to the helm template.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceHelmParameter:getGitopsApplicationsApplicationSpecSourceHelmParameter"
                    },
                    "description": "List of helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "Indicates if to pass credentials to all domains (helm's --pass-credentials)\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name to use. If omitted it will use the GitOps application name.\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to helm template, typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Helm version to use for templating (either \"2\" or \"3\")\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceHelmFileParameter:getGitopsApplicationsApplicationSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values of the helm parameter.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceHelmParameter:getGitopsApplicationsApplicationSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Indicates if helm should interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the helm parameter.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceKsonnet:getGitopsApplicationsApplicationSpecSourceKsonnet": {
            "properties": {
                "environment": {
                    "type": "string",
                    "description": "Ksonnet application environment name.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourceKsonnetParameter:getGitopsApplicationsApplicationSpecSourceKsonnetParameter"
                    },
                    "description": "List of ksonnet component parameter override values.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceKsonnetParameter:getGitopsApplicationsApplicationSpecSourceKsonnetParameter": {
            "properties": {
                "component": {
                    "type": "string",
                    "description": "Component of the parameter of the ksonnet application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the parameter of the ksonnet application.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the parameter of the ksonnet application.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourceKustomize:getGitopsApplicationsApplicationSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "forceCommonAnnotations": {
                    "type": "boolean",
                    "description": "Indicates if to force applying common annotations to resources for kustomize apps.\n"
                },
                "forceCommonLabels": {
                    "type": "boolean",
                    "description": "Indicates if to force apply common labels to resources for kustomize apps.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix prepended to resources for kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for kustomize apps.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourcePlugin:getGitopsApplicationsApplicationSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSourcePluginEnv:getGitopsApplicationsApplicationSpecSourcePluginEnv"
                    },
                    "description": "Entry in the GitOps application's environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSourcePluginEnv:getGitopsApplicationsApplicationSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable, usually expressed in uppercase.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSyncPolicy:getGitopsApplicationsApplicationSpecSyncPolicy": {
            "properties": {
                "automateds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSyncPolicyAutomated:getGitopsApplicationsApplicationSpecSyncPolicyAutomated"
                    },
                    "description": "Controls the behavior of an automated sync.\n"
                },
                "retries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSyncPolicyRetry:getGitopsApplicationsApplicationSpecSyncPolicyRetry"
                    },
                    "description": "Contains information about the strategy to apply when a sync failed.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Options allow you to specify whole app sync-options.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSyncPolicyAutomated:getGitopsApplicationsApplicationSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Indicates to allows apps to have zero live resources (default: false).\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Indicates whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false).\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Indicates whether to revert resources back to their desired state upon modification in the cluster (default: false).\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSyncPolicyRetry:getGitopsApplicationsApplicationSpecSyncPolicyRetry": {
            "properties": {
                "backoffs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsApplicationsApplicationSpecSyncPolicyRetryBackoff:getGitopsApplicationsApplicationSpecSyncPolicyRetryBackoff"
                    },
                    "description": "Backoff strategy to use on subsequent retries for failing syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsApplicationsApplicationSpecSyncPolicyRetryBackoff:getGitopsApplicationsApplicationSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Amount to back off. Default unit is seconds, but could also be a duration (e.g. \"2m\", \"1h\").\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed of the backoff strategy.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterQuery:getGitopsClusterQuery": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterQueryId:getGitopsClusterQueryId"
                    },
                    "description": "Cluster server URL or the cluster name.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps cluster.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server of the GitOps cluster.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterQueryId:getGitopsClusterQueryId": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Type of the specified GitOps cluster identifier ( 'server' - default, 'name' ).\n"
                },
                "value": {
                    "type": "string",
                    "description": "Cluster server URL or the cluster name.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterRequest:getGitopsClusterRequest": {
            "properties": {
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestCluster:getGitopsClusterRequestCluster"
                    },
                    "description": "GitOps cluster details.\n"
                },
                "ids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestId:getGitopsClusterRequestId"
                    },
                    "description": "Cluster server URL or the cluster name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags associated with the clusters\n"
                },
                "updateMasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestUpdateMask:getGitopsClusterRequestUpdateMask"
                    },
                    "description": "Update mask of the GitOps cluster.\n"
                },
                "updatedFields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Fields which are updated.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "Indicates if the GitOps cluster should be updated if existing and inserted if not.\n"
                }
            },
            "type": "object",
            "required": [
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitopsClusterRequestCluster:getGitopsClusterRequestCluster": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for cluster secret metadata.\n"
                },
                "clusterResources": {
                    "type": "boolean",
                    "description": "Indicates if cluster level resources should be managed. This setting is used only if cluster is connected in a namespaced mode.\n"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestClusterConfig:getGitopsClusterRequestClusterConfig"
                    },
                    "description": "GitOps cluster config.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestClusterInfo:getGitopsClusterRequestClusterInfo"
                    },
                    "description": "Information about cluster cache and state.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for cluster secret metadata.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cluster. If omitted, will use the server address.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of namespaces which are accessible in that cluster. Cluster level resources will be ignored if namespace list is not empty.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity.\n"
                },
                "refreshRequestedAts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestClusterRefreshRequestedAt:getGitopsClusterRequestClusterRefreshRequestedAt"
                    },
                    "description": "Time when cluster cache refresh has been requested.\n"
                },
                "server": {
                    "type": "string",
                    "description": "API server URL of the kubernetes cluster.\n"
                },
                "shard": {
                    "type": "string",
                    "description": "Shard number. Calculated on the fly by the application controller if not specified.\n"
                }
            },
            "type": "object",
            "required": [
                "infos"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitopsClusterRequestClusterConfig:getGitopsClusterRequestClusterConfig": {
            "properties": {
                "awsAuthConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestClusterConfigAwsAuthConfig:getGitopsClusterRequestClusterConfigAwsAuthConfig"
                    },
                    "description": "IAM authentication configuration for AWS.\n"
                },
                "bearerToken": {
                    "type": "string",
                    "description": "Bearer authentication token the cluster.\n"
                },
                "clusterConnectionType": {
                    "type": "string",
                    "description": "Identifies the authentication method used to connect to the cluster.\n"
                },
                "execProviderConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestClusterConfigExecProviderConfig:getGitopsClusterRequestClusterConfigExecProviderConfig"
                    },
                    "description": "Configuration for an exec provider.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password of the server of the cluster.\n"
                },
                "tlsClientConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestClusterConfigTlsClientConfig:getGitopsClusterRequestClusterConfigTlsClientConfig"
                    },
                    "description": "Settings to enable transport layer security.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username of the server of the cluster.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterRequestClusterConfigAwsAuthConfig:getGitopsClusterRequestClusterConfigAwsAuthConfig": {
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "AWS cluster name.\n"
                },
                "roleARN": {
                    "type": "string",
                    "description": "Optional role ARN. If set then used for AWS IAM Authenticator.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterRequestClusterConfigExecProviderConfig:getGitopsClusterRequestClusterConfigExecProviderConfig": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Preferred input version of the ExecInfo.\n"
                },
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Arguments to pass to the command when executing it.\n"
                },
                "command": {
                    "type": "string",
                    "description": "Command to execute.\n"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional environment variables to expose to the process.\n"
                },
                "installHint": {
                    "type": "string",
                    "description": "Message displayed when the executable is not found.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterRequestClusterConfigTlsClientConfig:getGitopsClusterRequestClusterConfigTlsClientConfig": {
            "properties": {
                "caData": {
                    "type": "string",
                    "description": "CA data holds PEM-encoded bytes (typically read from a root certificates bundle).\n"
                },
                "certData": {
                    "type": "string",
                    "description": "Certificate data holds PEM-encoded bytes (typically read from a client certificate file).\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Indicates if the TLS connection to the cluster should be insecure.\n"
                },
                "keyData": {
                    "type": "string",
                    "description": "Key data holds PEM-encoded bytes (typically read from a client certificate key file).\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "Server name for SNI in the client to check server certificates against.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterRequestClusterInfo:getGitopsClusterRequestClusterInfo": {
            "properties": {
                "apiVersions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of API versions supported by the cluster.\n"
                },
                "applicationsCount": {
                    "type": "string",
                    "description": "Number of applications managed by Argo CD on the cluster.\n"
                },
                "cacheInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestClusterInfoCacheInfo:getGitopsClusterRequestClusterInfoCacheInfo"
                    },
                    "description": "Information about the cluster cache.\n"
                },
                "connectionStates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestClusterInfoConnectionState:getGitopsClusterRequestClusterInfoConnectionState"
                    },
                    "description": "Information about the connection to the cluster.\n"
                },
                "serverVersion": {
                    "type": "string",
                    "description": "Kubernetes version of the cluster.\n"
                }
            },
            "type": "object",
            "required": [
                "cacheInfos",
                "connectionStates",
                "serverVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitopsClusterRequestClusterInfoCacheInfo:getGitopsClusterRequestClusterInfoCacheInfo": {
            "properties": {
                "apisCount": {
                    "type": "string",
                    "description": "Number of observed kubernetes API count.\n"
                },
                "lastCacheSyncTime": {
                    "type": "string",
                    "description": "Time of most recent cache synchronization.\n"
                },
                "resourcesCount": {
                    "type": "string",
                    "description": "Number of observed kubernetes resources.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterRequestClusterInfoConnectionState:getGitopsClusterRequestClusterInfoConnectionState": {
            "properties": {
                "attemptedAts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsClusterRequestClusterInfoConnectionStateAttemptedAt:getGitopsClusterRequestClusterInfoConnectionStateAttemptedAt"
                    },
                    "description": "Time when cluster cache refresh has been requested.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Information about the connection status.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Current status indicator of the connection.\n"
                }
            },
            "type": "object",
            "required": [
                "message",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitopsClusterRequestClusterInfoConnectionStateAttemptedAt:getGitopsClusterRequestClusterInfoConnectionStateAttemptedAt": {
            "properties": {
                "nanos": {
                    "type": "integer",
                    "description": "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.\n"
                },
                "seconds": {
                    "type": "string",
                    "description": "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterRequestClusterRefreshRequestedAt:getGitopsClusterRequestClusterRefreshRequestedAt": {
            "properties": {
                "nanos": {
                    "type": "integer",
                    "description": "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.\n"
                },
                "seconds": {
                    "type": "string",
                    "description": "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterRequestId:getGitopsClusterRequestId": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Type of the specified cluster identifier ( 'server' - default, 'name' ).\n"
                },
                "value": {
                    "type": "string",
                    "description": "Cluster server URL or the cluster name.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsClusterRequestUpdateMask:getGitopsClusterRequestUpdateMask": {
            "properties": {
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": "The set of field mask paths.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsGnupgRequest:getGitopsGnupgRequest": {
            "properties": {
                "publickeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getGitopsGnupgRequestPublickey:getGitopsGnupgRequestPublickey"
                    },
                    "description": "Public key details.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "Indicates if the GnuPG Key should be inserted if not present or updated if present.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsGnupgRequestPublickey:getGitopsGnupgRequestPublickey": {
            "properties": {
                "fingerprint": {
                    "type": "string",
                    "description": "Fingerprint is the fingerprint of the key\n"
                },
                "keyData": {
                    "type": "string",
                    "description": "KeyData holds the raw key data, in base64 encoded format\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "KeyID specifies the key ID, in hexadecimal string format.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owner holds the owner identification, e.g. a name and e-mail address\n"
                },
                "subType": {
                    "type": "string",
                    "description": "SubType holds the key's sub type\n"
                },
                "trust": {
                    "type": "string",
                    "description": "Trust holds the level of trust assigned to this key\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsRepoCredCred:getGitopsRepoCredCred": {
            "properties": {
                "enableOci": {
                    "type": "boolean",
                    "description": "Specifies whether helm-oci support should be enabled for this repo.\n"
                },
                "githubAppEnterpriseBaseUrl": {
                    "type": "string",
                    "description": "Specifies the GitHub API URL for GitHub app authentication.\n"
                },
                "githubAppId": {
                    "type": "string",
                    "description": "Specifies the Github App ID of the app used to access the repo for GitHub app authentication.\n"
                },
                "githubAppInstallationId": {
                    "type": "string",
                    "description": "Specifies the ID of the installed GitHub App for GitHub app authentication.\n"
                },
                "githubAppPrivateKey": {
                    "type": "string",
                    "description": "github*app*private_key specifies the private key PEM data for authentication via GitHub app.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for authenticating at the repo server.\n"
                },
                "sshPrivateKey": {
                    "type": "string",
                    "description": "Contains the private key data for authenticating at the repo server using SSH (only Git repos).\n"
                },
                "tlsClientCertData": {
                    "type": "string",
                    "description": "Specifies the TLS client cert data for authenticating at the repo server.\n"
                },
                "tlsClientCertKey": {
                    "type": "string",
                    "description": "Specifies the TLS client cert key for authenticating at the repo server.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type specifies the type of the repoCreds.Can be either 'git' or 'helm. 'git' is assumed if empty or absent\n"
                },
                "url": {
                    "type": "string",
                    "description": "url representing this object.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for authenticating at the repo server.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getGitopsRepositoryRepo:getGitopsRepositoryRepo": {
            "properties": {
                "connectionType": {
                    "type": "string",
                    "description": "Identifies the authentication method used to connect to the repository.\n"
                },
                "enableLfs": {
                    "type": "boolean",
                    "description": "Indicates if git-lfs support must be enabled for this repo. This is valid only for Git repositories.\n"
                },
                "enableOci": {
                    "type": "boolean",
                    "description": "Indicates if helm-oci support must be enabled for this repo.\n"
                },
                "githubAppEnterpriseBaseUrl": {
                    "type": "string",
                    "description": "Base URL of GitHub Enterprise installation. If left empty, this defaults to https://api.github.com.\n"
                },
                "githubAppId": {
                    "type": "string",
                    "description": "Id of the GitHub app used to access the repo.\n"
                },
                "githubAppInstallationId": {
                    "type": "string",
                    "description": "Installation id of the GitHub app used to access the repo.\n"
                },
                "githubAppPrivateKey": {
                    "type": "string",
                    "description": "GitHub app private key PEM data.\n"
                },
                "inheritedCreds": {
                    "type": "boolean",
                    "description": "Indicates if the credentials were inherited from a credential set.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Indicates if the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.\n"
                },
                "insecureIgnoreHostKey": {
                    "type": "boolean",
                    "description": "Indicates if InsecureIgnoreHostKey should be used. Insecure is favored used only for git repos.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name to be used for this repo. Only used with Helm repos.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password or PAT used for authenticating at the remote repository.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Reference between project and repository that allow you automatically to be added as item inside SourceRepos project entity.\n"
                },
                "proxy": {
                    "type": "string",
                    "description": "The HTTP/HTTPS proxy used to access the repo.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "URL to the remote repository.\n"
                },
                "sshPrivateKey": {
                    "type": "string",
                    "description": "PEM data for authenticating at the repo server. Only used with Git repos.\n"
                },
                "tlsClientCertData": {
                    "type": "string",
                    "description": "Certificate in PEM format for authenticating at the repo server.\n"
                },
                "tlsClientCertKey": {
                    "type": "string",
                    "description": "Private key in PEM format for authenticating at the repo server.\n"
                },
                "type_": {
                    "type": "string",
                    "description": "Type specifies the type of the repo. Can be either \"git\" or \"helm. \"git\" is assumed if empty or absent.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username used for authenticating at the remote repository.\n"
                }
            },
            "type": "object",
            "required": [
                "project",
                "type_"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getGitopsRepositoryUpdateMask:getGitopsRepositoryUpdateMask": {
            "properties": {
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of field mask paths.\n"
                }
            },
            "type": "object"
        },
        "harness:platform/getHelmConnectorCredential:getHelmConnectorCredential": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getInputSetGitDetails:getInputSetGitDetails": {
            "properties": {
                "baseBranch": {
                    "type": "string",
                    "description": "Name of the default branch (this checks out a new branch titled by branch_name).\n"
                },
                "branchName": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message used for the merge commit.\n"
                },
                "connectorRef": {
                    "type": "string",
                    "description": "Identifier of the Harness Connector used for CRUD operations on the Entity.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "File path of the Entity in the repository.\n"
                },
                "lastCommitId": {
                    "type": "string",
                    "description": "Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.\n"
                },
                "lastObjectId": {
                    "type": "string",
                    "description": "Last object identifier (for Github). To be provided only when updating Pipeline.\n"
                },
                "parentEntityConnectorRef": {
                    "type": "string",
                    "description": "Connector reference for Parent Entity (Pipeline).\n"
                },
                "parentEntityRepoName": {
                    "type": "string",
                    "description": "Repository name for Parent Entity (Pipeline).\n"
                },
                "repoName": {
                    "type": "string",
                    "description": "Name of the repository.\n"
                },
                "storeType": {
                    "type": "string",
                    "description": "Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.\n"
                }
            },
            "type": "object",
            "required": [
                "baseBranch",
                "branchName",
                "commitMessage",
                "connectorRef",
                "filePath",
                "lastCommitId",
                "lastObjectId",
                "parentEntityConnectorRef",
                "parentEntityRepoName",
                "repoName",
                "storeType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getJenkinsConnectorAuth:getJenkinsConnectorAuth": {
            "properties": {
                "jenkinsBearerTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getJenkinsConnectorAuthJenkinsBearerToken:getJenkinsConnectorAuthJenkinsBearerToken"
                    },
                    "description": "Authenticate to App Dynamics using bearer token.\n"
                },
                "jenkinsUserNamePasswords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getJenkinsConnectorAuthJenkinsUserNamePassword:getJenkinsConnectorAuthJenkinsUserNamePassword"
                    },
                    "description": "Authenticate to App Dynamics using user name and password.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Can be one of UsernamePassword, Anonymous, BearerToken\n"
                }
            },
            "type": "object",
            "required": [
                "jenkinsBearerTokens",
                "jenkinsUserNamePasswords",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getJenkinsConnectorAuthJenkinsBearerToken:getJenkinsConnectorAuthJenkinsBearerToken": {
            "properties": {
                "tokenRef": {
                    "type": "string",
                    "description": "Reference of the token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "tokenRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getJenkinsConnectorAuthJenkinsUserNamePassword:getJenkinsConnectorAuthJenkinsUserNamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Username reference to use for authentication.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getJiraConnectorAuth:getJiraConnectorAuth": {
            "properties": {
                "authType": {
                    "type": "string",
                    "description": "Authentication types for Jira connector\n"
                },
                "usernamePasswords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getJiraConnectorAuthUsernamePassword:getJiraConnectorAuthUsernamePassword"
                    },
                    "description": "Authenticate using username password.\n"
                }
            },
            "type": "object",
            "required": [
                "authType",
                "usernamePasswords"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getJiraConnectorAuthUsernamePassword:getJiraConnectorAuthUsernamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getKubernetesConnectorClientKeyCert:getKubernetesConnectorClientKeyCert": {
            "properties": {
                "caCertRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the CA certificate for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "clientCertRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client certificate for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "clientKeyAlgorithm": {
                    "type": "string",
                    "description": "The algorithm used to generate the client key for the connector. Valid values are RSA, EC\n"
                },
                "clientKeyPassphraseRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client key passphrase for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "clientKeyRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client key for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "masterUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes cluster.\n"
                }
            },
            "type": "object",
            "required": [
                "caCertRef",
                "clientCertRef",
                "clientKeyAlgorithm",
                "clientKeyPassphraseRef",
                "clientKeyRef",
                "masterUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getKubernetesConnectorInheritFromDelegate:getKubernetesConnectorInheritFromDelegate": {
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Selectors to use for the delegate.\n"
                }
            },
            "type": "object",
            "required": [
                "delegateSelectors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getKubernetesConnectorOpenidConnect:getKubernetesConnectorOpenidConnect": {
            "properties": {
                "clientIdRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client ID for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "issuerUrl": {
                    "type": "string",
                    "description": "The URL of the OpenID Connect issuer.\n"
                },
                "masterUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes cluster.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the password for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Scopes to request for the connector.\n"
                },
                "secretRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the client secret for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for the connector.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the username for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "clientIdRef",
                "issuerUrl",
                "masterUrl",
                "passwordRef",
                "scopes",
                "secretRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getKubernetesConnectorServiceAccount:getKubernetesConnectorServiceAccount": {
            "properties": {
                "masterUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes cluster.\n"
                },
                "serviceAccountTokenRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the service account token for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "masterUrl",
                "serviceAccountTokenRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getKubernetesConnectorUsernamePassword:getKubernetesConnectorUsernamePassword": {
            "properties": {
                "masterUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes cluster.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the password for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for the connector.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to the secret containing the username for the connector. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "masterUrl",
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getManualFreezeCurrentOrUpcomingWindow:getManualFreezeCurrentOrUpcomingWindow": {
            "properties": {
                "endTime": {
                    "type": "integer",
                    "description": "End time of the freeze\n"
                },
                "startTime": {
                    "type": "integer",
                    "description": "Start time of the freeze\n"
                }
            },
            "type": "object",
            "required": [
                "endTime",
                "startTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getManualFreezeFreezeWindow:getManualFreezeFreezeWindow": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration of the freeze\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "End time of the freeze\n"
                },
                "recurrences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getManualFreezeFreezeWindowRecurrence:getManualFreezeFreezeWindowRecurrence"
                    },
                    "description": "Recurrence of the freeze window\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "Start time of the freeze\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Timezone\n"
                }
            },
            "type": "object",
            "required": [
                "duration",
                "endTime",
                "recurrences",
                "startTime",
                "timeZone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getManualFreezeFreezeWindowRecurrence:getManualFreezeFreezeWindowRecurrence": {
            "properties": {
                "recurrenceSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getManualFreezeFreezeWindowRecurrenceRecurrenceSpec:getManualFreezeFreezeWindowRecurrenceRecurrenceSpec"
                    },
                    "description": "Used to filter resources on their attributes\n"
                },
                "type": {
                    "type": "string",
                    "description": "Recurrence type(Daily, Weekly, Monthly, Yearly)\n"
                }
            },
            "type": "object",
            "required": [
                "recurrenceSpecs",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getManualFreezeFreezeWindowRecurrenceRecurrenceSpec:getManualFreezeFreezeWindowRecurrenceRecurrenceSpec": {
            "properties": {
                "until": {
                    "type": "string",
                    "description": "Recurrence until timestamp\n"
                },
                "value": {
                    "type": "integer",
                    "description": "Value of n, for n months recurrence\n"
                }
            },
            "type": "object",
            "required": [
                "until",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getNexusConnectorCredential:getNexusConnectorCredential": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getOciHelmConnectorCredential:getOciHelmConnectorCredential": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getPermissionsPermission:getPermissionsPermission": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action performed by the permission\n"
                },
                "allowedScopeLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scope levels at which this resource group can be used\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the permission\n"
                },
                "includeInAllRoles": {
                    "type": "boolean",
                    "description": "Is included in all roles\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the permission\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": "Resource type for the given permission\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the permission\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "allowedScopeLevels",
                "identifier",
                "includeInAllRoles",
                "name",
                "resourceType",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getPipelineFiltersFilterProperty:getPipelineFiltersFilterProperty": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "description": "Corresponding Entity of the filters. Currently supported types are {Connector, DelegateProfile, Delegate, PipelineSetup, PipelineExecution, Deployment, Audit, Template, EnvironmentGroup, FileStore, CCMRecommendation, Anomaly, Environment}.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getPipelineGitDetails:getPipelineGitDetails": {
            "properties": {
                "baseBranch": {
                    "type": "string",
                    "description": "Name of the default branch (this checks out a new branch titled by branch_name).\n"
                },
                "branchName": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "Commit message used for the merge commit.\n"
                },
                "connectorRef": {
                    "type": "string",
                    "description": "Identifier of the Harness Connector used for CRUD operations on the Entity.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "File path of the Entity in the repository.\n"
                },
                "lastCommitId": {
                    "type": "string",
                    "description": "Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.\n"
                },
                "lastObjectId": {
                    "type": "string",
                    "description": "Last object identifier (for Github). To be provided only when updating Pipeline.\n"
                },
                "repoName": {
                    "type": "string",
                    "description": "Name of the repository.\n"
                },
                "storeType": {
                    "type": "string",
                    "description": "Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.\n"
                }
            },
            "type": "object",
            "required": [
                "baseBranch",
                "branchName",
                "commitMessage",
                "connectorRef",
                "filePath",
                "lastCommitId",
                "lastObjectId",
                "repoName",
                "storeType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getPolicySetPolicy:getPolicySetPolicy": {
            "properties": {
                "identifier": {
                    "type": "string",
                    "description": "Account Identifier of the account\n"
                },
                "severity": {
                    "type": "string",
                    "description": "Policy failure response - 'warning' for continuation, 'error' for exit\n"
                }
            },
            "type": "object",
            "required": [
                "identifier",
                "severity"
            ]
        },
        "harness:platform/getPrometheusConnectorHeader:getPrometheusConnectorHeader": {
            "properties": {
                "encryptedValueRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the encrypted value. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value.\n"
                },
                "valueEncrypted": {
                    "type": "boolean",
                    "description": "Encrypted value.\n"
                }
            },
            "type": "object",
            "required": [
                "encryptedValueRef",
                "key",
                "value",
                "valueEncrypted"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getResourceGroupIncludedScope:getResourceGroupIncludedScope": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier of the account\n"
                },
                "filter": {
                    "type": "string",
                    "description": "Can be one of these 2 EXCLUDING_CHILD_SCOPES or INCLUDING_CHILD_SCOPES\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier\n"
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "filter",
                "orgId",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getResourceGroupResourceFilter:getResourceGroupResourceFilter": {
            "properties": {
                "includeAllResources": {
                    "type": "boolean",
                    "description": "Include all resource or not\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getResourceGroupResourceFilterResource:getResourceGroupResourceFilterResource"
                    },
                    "description": "Resources for a resource group\n"
                }
            },
            "type": "object",
            "required": [
                "includeAllResources",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getResourceGroupResourceFilterResource:getResourceGroupResourceFilterResource": {
            "properties": {
                "attributeFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getResourceGroupResourceFilterResourceAttributeFilter:getResourceGroupResourceFilterResourceAttributeFilter"
                    },
                    "description": "Used to filter resources on their attributes\n"
                },
                "identifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the identifiers\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": "Type of the resource\n"
                }
            },
            "type": "object",
            "required": [
                "attributeFilters",
                "identifiers",
                "resourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getResourceGroupResourceFilterResourceAttributeFilter:getResourceGroupResourceFilterResourceAttributeFilter": {
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "Name of the attribute\n"
                },
                "attributeValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value of the attributes\n"
                }
            },
            "type": "object",
            "required": [
                "attributeName",
                "attributeValues"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getRoleAssignmentsPrincipal:getRoleAssignmentsPrincipal": {
            "properties": {
                "identifier": {
                    "type": "string",
                    "description": "Identifier.\n"
                },
                "scopeLevel": {
                    "type": "string",
                    "description": "Scope level.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type.\n"
                }
            },
            "type": "object",
            "required": [
                "identifier",
                "scopeLevel",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeyKerbero:getSecretSshkeyKerbero": {
            "properties": {
                "principal": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "realm": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication.\n"
                },
                "tgtGenerationMethod": {
                    "type": "string",
                    "description": "Method to generate tgt\n"
                },
                "tgtKeyTabFilePathSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getSecretSshkeyKerberoTgtKeyTabFilePathSpec:getSecretSshkeyKerberoTgtKeyTabFilePathSpec"
                    },
                    "description": "Authenticate to App Dynamics using username and password.\n"
                },
                "tgtPasswordSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getSecretSshkeyKerberoTgtPasswordSpec:getSecretSshkeyKerberoTgtPasswordSpec"
                    },
                    "description": "Authenticate to App Dynamics using username and password.\n"
                }
            },
            "type": "object",
            "required": [
                "principal",
                "realm",
                "tgtGenerationMethod",
                "tgtKeyTabFilePathSpecs",
                "tgtPasswordSpecs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeyKerberoTgtKeyTabFilePathSpec:getSecretSshkeyKerberoTgtKeyTabFilePathSpec": {
            "properties": {
                "keyPath": {
                    "type": "string",
                    "description": "key path\n"
                }
            },
            "type": "object",
            "required": [
                "keyPath"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeyKerberoTgtPasswordSpec:getSecretSshkeyKerberoTgtPasswordSpec": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "password\n"
                }
            },
            "type": "object",
            "required": [
                "password"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeySsh:getSecretSshkeySsh": {
            "properties": {
                "credentialType": {
                    "type": "string",
                    "description": "This specifies SSH credential type as Password, KeyPath or KeyReference\n"
                },
                "sshPasswordCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getSecretSshkeySshSshPasswordCredential:getSecretSshkeySshSshPasswordCredential"
                    },
                    "description": "SSH credential of type keyReference\n"
                },
                "sshkeyPathCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getSecretSshkeySshSshkeyPathCredential:getSecretSshkeySshSshkeyPathCredential"
                    },
                    "description": "SSH credential of type keyPath\n"
                },
                "sshkeyReferenceCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getSecretSshkeySshSshkeyReferenceCredential:getSecretSshkeySshSshkeyReferenceCredential"
                    },
                    "description": "SSH credential of type keyReference\n"
                }
            },
            "type": "object",
            "required": [
                "credentialType",
                "sshPasswordCredentials",
                "sshkeyPathCredentials",
                "sshkeyReferenceCredentials"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeySshSshPasswordCredential:getSecretSshkeySshSshPasswordCredential": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "SSH Password.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "SSH Username.\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "userName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeySshSshkeyPathCredential:getSecretSshkeySshSshkeyPathCredential": {
            "properties": {
                "encryptedPassphrase": {
                    "type": "string",
                    "description": "Encrypted Passphrase\n"
                },
                "keyPath": {
                    "type": "string",
                    "description": "Path of the key file.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "SSH Username.\n"
                }
            },
            "type": "object",
            "required": [
                "encryptedPassphrase",
                "keyPath",
                "userName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSecretSshkeySshSshkeyReferenceCredential:getSecretSshkeySshSshkeyReferenceCredential": {
            "properties": {
                "encryptedAssphrase": {
                    "type": "string",
                    "description": "Encrypted Passphrase\n"
                },
                "key": {
                    "type": "string",
                    "description": "SSH key.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "SSH Username.\n"
                }
            },
            "type": "object",
            "required": [
                "encryptedAssphrase",
                "key",
                "userName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getServiceNowConnectorAuth:getServiceNowConnectorAuth": {
            "properties": {
                "adfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getServiceNowConnectorAuthAdf:getServiceNowConnectorAuthAdf"
                    },
                    "description": "Authenticate using adfs client credentials with certificate.\n"
                },
                "authType": {
                    "type": "string",
                    "description": "Authentication types for Jira connector\n"
                },
                "usernamePasswords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getServiceNowConnectorAuthUsernamePassword:getServiceNowConnectorAuthUsernamePassword"
                    },
                    "description": "Authenticate using username password.\n"
                }
            },
            "type": "object",
            "required": [
                "adfs",
                "authType",
                "usernamePasswords"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getServiceNowConnectorAuthAdf:getServiceNowConnectorAuthAdf": {
            "properties": {
                "adfsUrl": {
                    "type": "string",
                    "description": "asdf URL.\n"
                },
                "certificateRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the certificate to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "clientIdRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the clientIdRef to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "privateKeyRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the privateKeyRef to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "resourceIdRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the resourceIdRef to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "adfsUrl",
                "certificateRef",
                "clientIdRef",
                "privateKeyRef",
                "resourceIdRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getServiceNowConnectorAuthUsernamePassword:getServiceNowConnectorAuthUsernamePassword": {
            "properties": {
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getSpotConnectorPermanentToken:getSpotConnectorPermanentToken": {
            "properties": {
                "apiTokenRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the permanent api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect only using delegates with these tags.\n"
                },
                "executeOnDelegate": {
                    "type": "boolean",
                    "description": "Execute on delegate or not.\n"
                },
                "spotAccountId": {
                    "type": "string",
                    "description": "Spot account id.\n"
                },
                "spotAccountIdRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the spot account id. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "apiTokenRef",
                "delegateSelectors",
                "executeOnDelegate",
                "spotAccountId",
                "spotAccountIdRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getTasConnectorCredential:getTasConnectorCredential": {
            "properties": {
                "tasManualDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getTasConnectorCredentialTasManualDetail:getTasConnectorCredentialTasManualDetail"
                    },
                    "description": "Authenticate to Tas using manual details.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type can be ManualConfig.\n"
                }
            },
            "type": "object",
            "required": [
                "tasManualDetails",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getTasConnectorCredentialTasManualDetail:getTasConnectorCredentialTasManualDetail": {
            "properties": {
                "endpointUrl": {
                    "type": "string",
                    "description": "URL of the Tas server.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference of the secret for the password.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication.\n"
                }
            },
            "type": "object",
            "required": [
                "endpointUrl",
                "passwordRef",
                "username",
                "usernameRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getTemplateFiltersFilterProperty:getTemplateFiltersFilterProperty": {
            "properties": {
                "filterType": {
                    "type": "string",
                    "description": "Corresponding Entity of the filters. Currently supported types are {Connector, DelegateProfile, Delegate, TemplateSetup, TemplateExecution, Deployment, Audit, Template, EnvironmentGroup, FileStore, CCMRecommendation, Anomaly, Environment}.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource. Tags should be in the form `name:value`.\n"
                }
            },
            "type": "object",
            "required": [
                "filterType",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getTemplateGitDetails:getTemplateGitDetails": {
            "properties": {
                "branchName": {
                    "type": "string",
                    "description": "Name of the branch.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "File path of the Entity in the repository.\n"
                },
                "fileUrl": {
                    "type": "string",
                    "description": "File url of the Entity in the repository.\n"
                },
                "lastCommitId": {
                    "type": "string",
                    "description": "Last commit identifier (for Git Repositories other than Github). To be provided only when updating Pipeline.\n"
                },
                "lastObjectId": {
                    "type": "string",
                    "description": "Last object identifier (for Github). To be provided only when updating Pipeline.\n"
                },
                "repoName": {
                    "type": "string",
                    "description": "Name of the repository.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "Repo url of the Entity in the repository.\n"
                }
            },
            "type": "object",
            "required": [
                "lastCommitId",
                "lastObjectId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getTerraformCloudConnectorCredential:getTerraformCloudConnectorCredential": {
            "properties": {
                "apiTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/getTerraformCloudConnectorCredentialApiToken:getTerraformCloudConnectorCredentialApiToken"
                    },
                    "description": "API token credentials to use for authentication.\n"
                }
            },
            "type": "object",
            "required": [
                "apiTokens"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getTerraformCloudConnectorCredentialApiToken:getTerraformCloudConnectorCredentialApiToken": {
            "properties": {
                "apiTokenRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the API token to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "type": "object",
            "required": [
                "apiTokenRef"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getUsergroupNotificationConfig:getUsergroupNotificationConfig": {
            "properties": {
                "groupEmail": {
                    "type": "string",
                    "description": "Group email.\n"
                },
                "microsoftTeamsWebhookUrl": {
                    "type": "string",
                    "description": "Url of Microsoft teams webhook.\n"
                },
                "pagerDutyKey": {
                    "type": "string",
                    "description": "Pager duty key.\n"
                },
                "sendEmailToAllUsers": {
                    "type": "boolean",
                    "description": "Send email to all the group members.\n"
                },
                "slackWebhookUrl": {
                    "type": "string",
                    "description": "Url of slack webhook.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Can be one of EMAIL, SLACK, PAGERDUTY, MSTEAMS.\n"
                }
            },
            "type": "object",
            "required": [
                "groupEmail",
                "microsoftTeamsWebhookUrl",
                "pagerDutyKey",
                "sendEmailToAllUsers",
                "slackWebhookUrl",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:platform/getVariablesSpec:getVariablesSpec": {
            "properties": {
                "fixedValue": {
                    "type": "string",
                    "description": "FixedValue of the variable\n"
                },
                "valueType": {
                    "type": "string",
                    "description": "Type of Value of the Variable. For now only FIXED is supported\n"
                }
            },
            "type": "object",
            "required": [
                "fixedValue",
                "valueType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "harness:service/AmiVariable:AmiVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/CodedeployVariable:CodedeployVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/EcsVariable:EcsVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/HelmVariable:HelmVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/KubernetesVariable:KubernetesVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/LambdaVariable:LambdaVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/SshVariable:SshVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/TanzuVariable:TanzuVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "harness:service/WinrmVariable:WinrmVariable": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the variable. Options are 'TEXT' and 'ENCRYPTED_TEXT'\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the variable\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the harness package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accountId": {
                "type": "string",
                "description": "The Harness account id. This can also be set using the `HARNESS_ACCOUNT_ID` environment variable.\n"
            },
            "apiKey": {
                "type": "string",
                "description": "The Harness API key. This can also be set using the `HARNESS_API_KEY` environment variable. For more information to\ncreate an API key in FirstGen, see https://docs.harness.io/article/smloyragsm-api-keys#create_an_api_key.\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The URL of the Harness API endpoint. The default is `https://app.harness.io/gateway`. This can also be set using the\n`HARNESS_ENDPOINT` environment variable.\n"
            },
            "platformApiKey": {
                "type": "string",
                "description": "The API key for the Harness next gen platform. This can also be set using the `HARNESS_PLATFORM_API_KEY` environment\nvariable. For more information to create an API key in NextGen, see\nhttps://docs.harness.io/article/tdoad7xrh9-add-and-manage-api-keys.\n"
            }
        },
        "inputProperties": {
            "accountId": {
                "type": "string",
                "description": "The Harness account id. This can also be set using the `HARNESS_ACCOUNT_ID` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_ACCOUNT_ID"
                    ]
                }
            },
            "apiKey": {
                "type": "string",
                "description": "The Harness API key. This can also be set using the `HARNESS_API_KEY` environment variable. For more information to\ncreate an API key in FirstGen, see https://docs.harness.io/article/smloyragsm-api-keys#create_an_api_key.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_API_KEY"
                    ]
                }
            },
            "endpoint": {
                "type": "string",
                "description": "The URL of the Harness API endpoint. The default is `https://app.harness.io/gateway`. This can also be set using the\n`HARNESS_ENDPOINT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_ENDPOINT"
                    ]
                }
            },
            "platformApiKey": {
                "type": "string",
                "description": "The API key for the Harness next gen platform. This can also be set using the `HARNESS_PLATFORM_API_KEY` environment\nvariable. For more information to create an API key in NextGen, see\nhttps://docs.harness.io/article/tdoad7xrh9-add-and-manage-api-keys.\n",
                "defaultInfo": {
                    "environment": [
                        "HARNESS_PLATFORM_API_KEY"
                    ]
                }
            }
        }
    },
    "resources": {
        "harness:cloudprovider/aws:Aws": {
            "description": "Resource for creating an AWS cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst awsAccessKey = new harness.EncryptedText(\"aws_access_key\", {\n    name: \"aws_access_key\",\n    value: \"\u003cACCESS_KEY_ID\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst awsSecretKey = new harness.EncryptedText(\"aws_secret_key\", {\n    name: \"aws_secret_key\",\n    value: \"\u003cSECRET_KEY_ID\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst aws = new harness.cloudprovider.Aws(\"aws\", {\n    name: \"Example aws cloud provider\",\n    accessKeyIdSecretName: awsAccessKey.name,\n    secretAccessKeySecretName: awsSecretKey.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\naws_access_key = harness.EncryptedText(\"aws_access_key\",\n    name=\"aws_access_key\",\n    value=\"\u003cACCESS_KEY_ID\u003e\",\n    secret_manager_id=default.id)\naws_secret_key = harness.EncryptedText(\"aws_secret_key\",\n    name=\"aws_secret_key\",\n    value=\"\u003cSECRET_KEY_ID\u003e\",\n    secret_manager_id=default.id)\naws = harness.cloudprovider.Aws(\"aws\",\n    name=\"Example aws cloud provider\",\n    access_key_id_secret_name=aws_access_key.name,\n    secret_access_key_secret_name=aws_secret_key.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var awsAccessKey = new Harness.EncryptedText(\"aws_access_key\", new()\n    {\n        Name = \"aws_access_key\",\n        Value = \"\u003cACCESS_KEY_ID\u003e\",\n        SecretManagerId = @default.Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var awsSecretKey = new Harness.EncryptedText(\"aws_secret_key\", new()\n    {\n        Name = \"aws_secret_key\",\n        Value = \"\u003cSECRET_KEY_ID\u003e\",\n        SecretManagerId = @default.Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var aws = new Harness.Cloudprovider.Aws(\"aws\", new()\n    {\n        Name = \"Example aws cloud provider\",\n        AccessKeyIdSecretName = awsAccessKey.Name,\n        SecretAccessKeySecretName = awsSecretKey.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026harness.GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tawsAccessKey, err := harness.NewEncryptedText(ctx, \"aws_access_key\", \u0026harness.EncryptedTextArgs{\n\t\t\tName:            pulumi.String(\"aws_access_key\"),\n\t\t\tValue:           pulumi.String(\"\u003cACCESS_KEY_ID\u003e\"),\n\t\t\tSecretManagerId: pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tawsSecretKey, err := harness.NewEncryptedText(ctx, \"aws_secret_key\", \u0026harness.EncryptedTextArgs{\n\t\t\tName:            pulumi.String(\"aws_secret_key\"),\n\t\t\tValue:           pulumi.String(\"\u003cSECRET_KEY_ID\u003e\"),\n\t\t\tSecretManagerId: pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudprovider.NewAws(ctx, \"aws\", \u0026cloudprovider.AwsArgs{\n\t\t\tName:                      pulumi.String(\"Example aws cloud provider\"),\n\t\t\tAccessKeyIdSecretName:     awsAccessKey.Name,\n\t\t\tSecretAccessKeySecretName: awsSecretKey.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.cloudprovider.Aws;\nimport com.pulumi.harness.cloudprovider.AwsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var awsAccessKey = new EncryptedText(\"awsAccessKey\", EncryptedTextArgs.builder()\n            .name(\"aws_access_key\")\n            .value(\"\u003cACCESS_KEY_ID\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var awsSecretKey = new EncryptedText(\"awsSecretKey\", EncryptedTextArgs.builder()\n            .name(\"aws_secret_key\")\n            .value(\"\u003cSECRET_KEY_ID\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var aws = new Aws(\"aws\", AwsArgs.builder()\n            .name(\"Example aws cloud provider\")\n            .accessKeyIdSecretName(awsAccessKey.name())\n            .secretAccessKeySecretName(awsSecretKey.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  awsAccessKey:\n    type: harness:EncryptedText\n    name: aws_access_key\n    properties:\n      name: aws_access_key\n      value: \u003cACCESS_KEY_ID\u003e\n      secretManagerId: ${default.id}\n  awsSecretKey:\n    type: harness:EncryptedText\n    name: aws_secret_key\n    properties:\n      name: aws_secret_key\n      value: \u003cSECRET_KEY_ID\u003e\n      secretManagerId: ${default.id}\n  aws:\n    type: harness:cloudprovider:Aws\n    properties:\n      name: Example aws cloud provider\n      accessKeyIdSecretName: ${awsAccessKey.name}\n      secretAccessKeySecretName: ${awsSecretKey.name}\nvariables:\n  default:\n    fn::invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness aws cloud provider id.\n\n```sh\n$ pulumi import harness:cloudprovider/aws:Aws example \u003cprovider_id\u003e\n```\n\n",
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The plain text AWS access key id.\n"
                },
                "accessKeyIdSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the AWS access key id\n"
                },
                "assumeCrossAccountRole": {
                    "$ref": "#/types/harness:cloudprovider/AwsAssumeCrossAccountRole:AwsAssumeCrossAccountRole",
                    "description": "Configuration for assuming a cross account role.\n"
                },
                "delegateSelector": {
                    "type": "string",
                    "description": "Select the Delegate to use via one of its Selectors.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "secretAccessKeySecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the AWS secret access key.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/AwsUsageScope:AwsUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                },
                "useEc2IamCredentials": {
                    "type": "boolean",
                    "description": "Use the EC2 Instance Profile for Service Accounts.\n"
                },
                "useIrsa": {
                    "type": "boolean",
                    "description": "Use the AWS IAM Role for Service Accounts.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The plain text AWS access key id.\n"
                },
                "accessKeyIdSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the AWS access key id\n"
                },
                "assumeCrossAccountRole": {
                    "$ref": "#/types/harness:cloudprovider/AwsAssumeCrossAccountRole:AwsAssumeCrossAccountRole",
                    "description": "Configuration for assuming a cross account role.\n"
                },
                "delegateSelector": {
                    "type": "string",
                    "description": "Select the Delegate to use via one of its Selectors.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "secretAccessKeySecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the AWS secret access key.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/AwsUsageScope:AwsUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                },
                "useEc2IamCredentials": {
                    "type": "boolean",
                    "description": "Use the EC2 Instance Profile for Service Accounts.\n"
                },
                "useIrsa": {
                    "type": "boolean",
                    "description": "Use the AWS IAM Role for Service Accounts.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Aws resources.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "The plain text AWS access key id.\n"
                    },
                    "accessKeyIdSecretName": {
                        "type": "string",
                        "description": "The name of the Harness secret containing the AWS access key id\n"
                    },
                    "assumeCrossAccountRole": {
                        "$ref": "#/types/harness:cloudprovider/AwsAssumeCrossAccountRole:AwsAssumeCrossAccountRole",
                        "description": "Configuration for assuming a cross account role.\n"
                    },
                    "delegateSelector": {
                        "type": "string",
                        "description": "Select the Delegate to use via one of its Selectors.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretAccessKeySecretName": {
                        "type": "string",
                        "description": "The name of the Harness secret containing the AWS secret access key.\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:cloudprovider/AwsUsageScope:AwsUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    },
                    "useEc2IamCredentials": {
                        "type": "boolean",
                        "description": "Use the EC2 Instance Profile for Service Accounts.\n"
                    },
                    "useIrsa": {
                        "type": "boolean",
                        "description": "Use the AWS IAM Role for Service Accounts.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:cloudprovider/azure:Azure": {
            "description": "Resource for creating an Azure cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst azureKey = new harness.EncryptedText(\"azure_key\", {\n    name: \"azure_key\",\n    value: \"\u003cAZURE_KEY\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst azure = new harness.cloudprovider.Azure(\"azure\", {\n    name: \"azure\",\n    clientId: \"\u003cAZURE_CLIENT_ID\u003e\",\n    tenantId: \"\u003cAZURE_TENANT_ID\u003e\",\n    key: azureKey.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\nazure_key = harness.EncryptedText(\"azure_key\",\n    name=\"azure_key\",\n    value=\"\u003cAZURE_KEY\u003e\",\n    secret_manager_id=default.id)\nazure = harness.cloudprovider.Azure(\"azure\",\n    name=\"azure\",\n    client_id=\"\u003cAZURE_CLIENT_ID\u003e\",\n    tenant_id=\"\u003cAZURE_TENANT_ID\u003e\",\n    key=azure_key.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var azureKey = new Harness.EncryptedText(\"azure_key\", new()\n    {\n        Name = \"azure_key\",\n        Value = \"\u003cAZURE_KEY\u003e\",\n        SecretManagerId = @default.Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var azure = new Harness.Cloudprovider.Azure(\"azure\", new()\n    {\n        Name = \"azure\",\n        ClientId = \"\u003cAZURE_CLIENT_ID\u003e\",\n        TenantId = \"\u003cAZURE_TENANT_ID\u003e\",\n        Key = azureKey.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026harness.GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tazureKey, err := harness.NewEncryptedText(ctx, \"azure_key\", \u0026harness.EncryptedTextArgs{\n\t\t\tName:            pulumi.String(\"azure_key\"),\n\t\t\tValue:           pulumi.String(\"\u003cAZURE_KEY\u003e\"),\n\t\t\tSecretManagerId: pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudprovider.NewAzure(ctx, \"azure\", \u0026cloudprovider.AzureArgs{\n\t\t\tName:     pulumi.String(\"azure\"),\n\t\t\tClientId: pulumi.String(\"\u003cAZURE_CLIENT_ID\u003e\"),\n\t\t\tTenantId: pulumi.String(\"\u003cAZURE_TENANT_ID\u003e\"),\n\t\t\tKey:      azureKey.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.cloudprovider.Azure;\nimport com.pulumi.harness.cloudprovider.AzureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var azureKey = new EncryptedText(\"azureKey\", EncryptedTextArgs.builder()\n            .name(\"azure_key\")\n            .value(\"\u003cAZURE_KEY\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var azure = new Azure(\"azure\", AzureArgs.builder()\n            .name(\"azure\")\n            .clientId(\"\u003cAZURE_CLIENT_ID\u003e\")\n            .tenantId(\"\u003cAZURE_TENANT_ID\u003e\")\n            .key(azureKey.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  azureKey:\n    type: harness:EncryptedText\n    name: azure_key\n    properties:\n      name: azure_key\n      value: \u003cAZURE_KEY\u003e\n      secretManagerId: ${default.id}\n  azure:\n    type: harness:cloudprovider:Azure\n    properties:\n      name: azure\n      clientId: \u003cAZURE_CLIENT_ID\u003e\n      tenantId: \u003cAZURE_TENANT_ID\u003e\n      key: ${azureKey.name}\nvariables:\n  default:\n    fn::invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness azure cloud provider id.\n\n```sh\n$ pulumi import harness:cloudprovider/azure:Azure example \u003cprovider_id\u003e\n```\n\n",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "The client id for the Azure application\n"
                },
                "environmentType": {
                    "type": "string",
                    "description": "The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Name of the Harness secret containing the key for the Azure application\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The tenant id for the Azure application\n"
                }
            },
            "required": [
                "clientId",
                "key",
                "name",
                "tenantId"
            ],
            "inputProperties": {
                "clientId": {
                    "type": "string",
                    "description": "The client id for the Azure application\n"
                },
                "environmentType": {
                    "type": "string",
                    "description": "The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Name of the Harness secret containing the key for the Azure application\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "The tenant id for the Azure application\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "key",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Azure resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "The client id for the Azure application\n"
                    },
                    "environmentType": {
                        "type": "string",
                        "description": "The type of environment. Valid options are [AZURE AZURE*US*GOVERNMENT]\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The Name of the Harness secret containing the key for the Azure application\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The tenant id for the Azure application\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:cloudprovider/datacenter:Datacenter": {
            "description": "Resource for creating a physical data center cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.cloudprovider.Datacenter(\"example\", {name: \"example\"});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.cloudprovider.Datacenter(\"example\", name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Cloudprovider.Datacenter(\"example\", new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cloudprovider.NewDatacenter(ctx, \"example\", \u0026cloudprovider.DatacenterArgs{\n\t\t\tName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.cloudprovider.Datacenter;\nimport com.pulumi.harness.cloudprovider.DatacenterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Datacenter(\"example\", DatacenterArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:cloudprovider:Datacenter\n    properties:\n      name: example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness datacenter cloud provider id.\n\n```sh\n$ pulumi import harness:cloudprovider/datacenter:Datacenter example \u003cprovider_id\u003e\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/DatacenterUsageScope:DatacenterUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/DatacenterUsageScope:DatacenterUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Datacenter resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:cloudprovider/DatacenterUsageScope:DatacenterUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:cloudprovider/gcp:Gcp": {
            "description": "Resource for creating a GCP cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n",
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Delegate selectors to use for this provider.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "secretFileId": {
                    "type": "string",
                    "description": "The id of the secret containing the GCP credentials\n"
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of GCP configuration.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/GcpUsageScope:GcpUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Delegate selectors to use for this provider.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "secretFileId": {
                    "type": "string",
                    "description": "The id of the secret containing the GCP credentials\n"
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of GCP configuration.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/GcpUsageScope:GcpUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Gcp resources.\n",
                "properties": {
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Delegate selectors to use for this provider.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretFileId": {
                        "type": "string",
                        "description": "The id of the secret containing the GCP credentials\n"
                    },
                    "skipValidation": {
                        "type": "boolean",
                        "description": "Skip validation of GCP configuration.\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:cloudprovider/GcpUsageScope:GcpUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:cloudprovider/kubernetes:Kubernetes": {
            "description": "Resource for creating a Kubernetes cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n## Import\n\nImport using the Harness kubernetes cloud provider id.\n\n```sh\n$ pulumi import harness:cloudprovider/kubernetes:Kubernetes example \u003cprovider_id\u003e\n```\n\n",
            "properties": {
                "authentication": {
                    "$ref": "#/types/harness:cloudprovider/KubernetesAuthentication:KubernetesAuthentication",
                    "description": "Authentication configuration for the Kubernetes cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of Kubernetes configuration.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/KubernetesUsageScope:KubernetesUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "required": [
                "authentication",
                "name"
            ],
            "inputProperties": {
                "authentication": {
                    "$ref": "#/types/harness:cloudprovider/KubernetesAuthentication:KubernetesAuthentication",
                    "description": "Authentication configuration for the Kubernetes cluster\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of Kubernetes configuration.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:cloudprovider/KubernetesUsageScope:KubernetesUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "requiredInputs": [
                "authentication"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Kubernetes resources.\n",
                "properties": {
                    "authentication": {
                        "$ref": "#/types/harness:cloudprovider/KubernetesAuthentication:KubernetesAuthentication",
                        "description": "Authentication configuration for the Kubernetes cluster\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "skipValidation": {
                        "type": "boolean",
                        "description": "Skip validation of Kubernetes configuration.\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:cloudprovider/KubernetesUsageScope:KubernetesUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:cloudprovider/spot:Spot": {
            "description": "Resource for creating a Spot cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst spotToken = new harness.EncryptedText(\"spot_token\", {\n    name: \"spot_token\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n    value: \"\u003cSPOT_TOKEN\u003e\",\n});\nconst example = new harness.cloudprovider.Spot(\"example\", {\n    name: \"example\",\n    accountId: \"\u003cSPOT_ACCOUNT_ID\u003e\",\n    tokenSecretName: spotToken.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\nspot_token = harness.EncryptedText(\"spot_token\",\n    name=\"spot_token\",\n    secret_manager_id=default.id,\n    value=\"\u003cSPOT_TOKEN\u003e\")\nexample = harness.cloudprovider.Spot(\"example\",\n    name=\"example\",\n    account_id=\"\u003cSPOT_ACCOUNT_ID\u003e\",\n    token_secret_name=spot_token.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var spotToken = new Harness.EncryptedText(\"spot_token\", new()\n    {\n        Name = \"spot_token\",\n        SecretManagerId = @default.Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n        Value = \"\u003cSPOT_TOKEN\u003e\",\n    });\n\n    var example = new Harness.Cloudprovider.Spot(\"example\", new()\n    {\n        Name = \"example\",\n        AccountId = \"\u003cSPOT_ACCOUNT_ID\u003e\",\n        TokenSecretName = spotToken.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026harness.GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tspotToken, err := harness.NewEncryptedText(ctx, \"spot_token\", \u0026harness.EncryptedTextArgs{\n\t\t\tName:            pulumi.String(\"spot_token\"),\n\t\t\tSecretManagerId: pulumi.String(_default.Id),\n\t\t\tValue:           pulumi.String(\"\u003cSPOT_TOKEN\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudprovider.NewSpot(ctx, \"example\", \u0026cloudprovider.SpotArgs{\n\t\t\tName:            pulumi.String(\"example\"),\n\t\t\tAccountId:       pulumi.String(\"\u003cSPOT_ACCOUNT_ID\u003e\"),\n\t\t\tTokenSecretName: spotToken.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.cloudprovider.Spot;\nimport com.pulumi.harness.cloudprovider.SpotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var spotToken = new EncryptedText(\"spotToken\", EncryptedTextArgs.builder()\n            .name(\"spot_token\")\n            .secretManagerId(default_.id())\n            .value(\"\u003cSPOT_TOKEN\u003e\")\n            .build());\n\n        var example = new Spot(\"example\", SpotArgs.builder()\n            .name(\"example\")\n            .accountId(\"\u003cSPOT_ACCOUNT_ID\u003e\")\n            .tokenSecretName(spotToken.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  spotToken:\n    type: harness:EncryptedText\n    name: spot_token\n    properties:\n      name: spot_token\n      secretManagerId: ${default.id}\n      value: \u003cSPOT_TOKEN\u003e\n  example:\n    type: harness:cloudprovider:Spot\n    properties:\n      name: example\n      accountId: \u003cSPOT_ACCOUNT_ID\u003e\n      tokenSecretName: ${spotToken.name}\nvariables:\n  default:\n    fn::invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness Spot cloud provider id.\n\n```sh\n$ pulumi import harness:cloudprovider/spot:Spot example \u003cprovider_id\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The Spot account ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "tokenSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the spot account token\n"
                }
            },
            "required": [
                "accountId",
                "name",
                "tokenSecretName"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "The Spot account ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "tokenSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the spot account token\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "tokenSecretName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Spot resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The Spot account ID\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "tokenSecretName": {
                        "type": "string",
                        "description": "The name of the Harness secret containing the spot account token\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:cloudprovider/tanzu:Tanzu": {
            "description": "Resource for creating a Tanzu cloud provider. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst tanzuPassword = new harness.EncryptedText(\"tanzu_password\", {\n    name: \"tanzu_password\",\n    value: \"\u003cPASSWORD\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst example = new harness.cloudprovider.Tanzu(\"example\", {\n    name: \"example\",\n    endpoint: \"https://endpoint.com\",\n    skipValidation: true,\n    username: \"\u003cUSERNAME\u003e\",\n    passwordSecretName: tanzuPassword.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\ntanzu_password = harness.EncryptedText(\"tanzu_password\",\n    name=\"tanzu_password\",\n    value=\"\u003cPASSWORD\u003e\",\n    secret_manager_id=default.id)\nexample = harness.cloudprovider.Tanzu(\"example\",\n    name=\"example\",\n    endpoint=\"https://endpoint.com\",\n    skip_validation=True,\n    username=\"\u003cUSERNAME\u003e\",\n    password_secret_name=tanzu_password.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var tanzuPassword = new Harness.EncryptedText(\"tanzu_password\", new()\n    {\n        Name = \"tanzu_password\",\n        Value = \"\u003cPASSWORD\u003e\",\n        SecretManagerId = @default.Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var example = new Harness.Cloudprovider.Tanzu(\"example\", new()\n    {\n        Name = \"example\",\n        Endpoint = \"https://endpoint.com\",\n        SkipValidation = true,\n        Username = \"\u003cUSERNAME\u003e\",\n        PasswordSecretName = tanzuPassword.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026harness.GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttanzuPassword, err := harness.NewEncryptedText(ctx, \"tanzu_password\", \u0026harness.EncryptedTextArgs{\n\t\t\tName:            pulumi.String(\"tanzu_password\"),\n\t\t\tValue:           pulumi.String(\"\u003cPASSWORD\u003e\"),\n\t\t\tSecretManagerId: pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = cloudprovider.NewTanzu(ctx, \"example\", \u0026cloudprovider.TanzuArgs{\n\t\t\tName:               pulumi.String(\"example\"),\n\t\t\tEndpoint:           pulumi.String(\"https://endpoint.com\"),\n\t\t\tSkipValidation:     pulumi.Bool(true),\n\t\t\tUsername:           pulumi.String(\"\u003cUSERNAME\u003e\"),\n\t\t\tPasswordSecretName: tanzuPassword.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.cloudprovider.Tanzu;\nimport com.pulumi.harness.cloudprovider.TanzuArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var tanzuPassword = new EncryptedText(\"tanzuPassword\", EncryptedTextArgs.builder()\n            .name(\"tanzu_password\")\n            .value(\"\u003cPASSWORD\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var example = new Tanzu(\"example\", TanzuArgs.builder()\n            .name(\"example\")\n            .endpoint(\"https://endpoint.com\")\n            .skipValidation(true)\n            .username(\"\u003cUSERNAME\u003e\")\n            .passwordSecretName(tanzuPassword.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tanzuPassword:\n    type: harness:EncryptedText\n    name: tanzu_password\n    properties:\n      name: tanzu_password\n      value: \u003cPASSWORD\u003e\n      secretManagerId: ${default.id}\n  example:\n    type: harness:cloudprovider:Tanzu\n    properties:\n      name: example\n      endpoint: https://endpoint.com\n      skipValidation: true\n      username: \u003cUSERNAME\u003e\n      passwordSecretName: ${tanzuPassword.name}\nvariables:\n  default:\n    fn::invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness Tanzu cloud provider id.\n\n```sh\n$ pulumi import harness:cloudprovider/tanzu:Tanzu example \u003cprovider_id\u003e\n```\n\n",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "The url of the Tanzu platform.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n"
                },
                "passwordSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the password to use to authenticate to Tanzu.\n"
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of Tanzu configuration.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use to authenticate to Tanzu.\n"
                },
                "usernameSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the username to authenticate to Tanzu with.\n"
                }
            },
            "required": [
                "endpoint",
                "name",
                "passwordSecretName"
            ],
            "inputProperties": {
                "endpoint": {
                    "type": "string",
                    "description": "The url of the Tanzu platform.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cloud provider.\n",
                    "willReplaceOnChanges": true
                },
                "passwordSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the password to use to authenticate to Tanzu.\n"
                },
                "skipValidation": {
                    "type": "boolean",
                    "description": "Skip validation of Tanzu configuration.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use to authenticate to Tanzu.\n"
                },
                "usernameSecretName": {
                    "type": "string",
                    "description": "The name of the Harness secret containing the username to authenticate to Tanzu with.\n"
                }
            },
            "requiredInputs": [
                "endpoint",
                "passwordSecretName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tanzu resources.\n",
                "properties": {
                    "endpoint": {
                        "type": "string",
                        "description": "The url of the Tanzu platform.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cloud provider.\n",
                        "willReplaceOnChanges": true
                    },
                    "passwordSecretName": {
                        "type": "string",
                        "description": "The name of the Harness secret containing the password to use to authenticate to Tanzu.\n"
                    },
                    "skipValidation": {
                        "type": "boolean",
                        "description": "Skip validation of Tanzu configuration.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username to use to authenticate to Tanzu.\n"
                    },
                    "usernameSecretName": {
                        "type": "string",
                        "description": "The name of the Harness secret containing the username to authenticate to Tanzu with.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/addUserToGroup:AddUserToGroup": {
            "description": "Resource for adding a user to a group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst exampleUser = harness.getUser({\n    email: \"testuser@example.com\",\n});\nconst admin = new harness.UserGroup(\"admin\", {name: \"admin\"});\nconst exampleAddUserToGroups = new harness.AddUserToGroup(\"example_add_user_to_groups\", {\n    groupId: admin.id,\n    userId: test.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample_user = harness.get_user(email=\"testuser@example.com\")\nadmin = harness.UserGroup(\"admin\", name=\"admin\")\nexample_add_user_to_groups = harness.AddUserToGroup(\"example_add_user_to_groups\",\n    group_id=admin.id,\n    user_id=test[\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUser = Harness.GetUser.Invoke(new()\n    {\n        Email = \"testuser@example.com\",\n    });\n\n    var admin = new Harness.UserGroup(\"admin\", new()\n    {\n        Name = \"admin\",\n    });\n\n    var exampleAddUserToGroups = new Harness.AddUserToGroup(\"example_add_user_to_groups\", new()\n    {\n        GroupId = admin.Id,\n        UserId = test.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.LookupUser(ctx, \u0026harness.LookupUserArgs{\n\t\t\tEmail: pulumi.StringRef(\"testuser@example.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tadmin, err := harness.NewUserGroup(ctx, \"admin\", \u0026harness.UserGroupArgs{\n\t\t\tName: pulumi.String(\"admin\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewAddUserToGroup(ctx, \"example_add_user_to_groups\", \u0026harness.AddUserToGroupArgs{\n\t\t\tGroupId: admin.ID(),\n\t\t\tUserId:  pulumi.Any(test.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetUserArgs;\nimport com.pulumi.harness.UserGroup;\nimport com.pulumi.harness.UserGroupArgs;\nimport com.pulumi.harness.AddUserToGroup;\nimport com.pulumi.harness.AddUserToGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUser = HarnessFunctions.getUser(GetUserArgs.builder()\n            .email(\"testuser@example.com\")\n            .build());\n\n        var admin = new UserGroup(\"admin\", UserGroupArgs.builder()\n            .name(\"admin\")\n            .build());\n\n        var exampleAddUserToGroups = new AddUserToGroup(\"exampleAddUserToGroups\", AddUserToGroupArgs.builder()\n            .groupId(admin.id())\n            .userId(test.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  admin:\n    type: harness:UserGroup\n    properties:\n      name: admin\n  exampleAddUserToGroups:\n    type: harness:AddUserToGroup\n    name: example_add_user_to_groups\n    properties:\n      groupId: ${admin.id}\n      userId: ${test.id}\nvariables:\n  exampleUser:\n    fn::invoke:\n      Function: harness:getUser\n      Arguments:\n        email: testuser@example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness user and user group id\n\n```sh\n$ pulumi import harness:index/addUserToGroup:AddUserToGroup example_admin \u003cuser_id\u003e/\u003cgroup_id\u003e\n```\n\n",
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "Unique identifier of the user.\n"
                }
            },
            "required": [
                "groupId",
                "userId"
            ],
            "inputProperties": {
                "groupId": {
                    "type": "string",
                    "description": "The name of the user.\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "Unique identifier of the user.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "groupId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AddUserToGroup resources.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "The name of the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "Unique identifier of the user.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "harness:index/application:Application": {
            "description": "Resource for creating a Harness application\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst myapp = new harness.Application(\"myapp\", {\n    name: \"My Application\",\n    description: \"This is my first Harness application\",\n    tags: [\n        \"mytag:myvalue\",\n        \"team:development\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nmyapp = harness.Application(\"myapp\",\n    name=\"My Application\",\n    description=\"This is my first Harness application\",\n    tags=[\n        \"mytag:myvalue\",\n        \"team:development\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myapp = new Harness.Application(\"myapp\", new()\n    {\n        Name = \"My Application\",\n        Description = \"This is my first Harness application\",\n        Tags = new[]\n        {\n            \"mytag:myvalue\",\n            \"team:development\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.NewApplication(ctx, \"myapp\", \u0026harness.ApplicationArgs{\n\t\t\tName:        pulumi.String(\"My Application\"),\n\t\t\tDescription: pulumi.String(\"This is my first Harness application\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"mytag:myvalue\"),\n\t\t\t\tpulumi.String(\"team:development\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.ApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myapp = new Application(\"myapp\", ApplicationArgs.builder()\n            .name(\"My Application\")\n            .description(\"This is my first Harness application\")\n            .tags(            \n                \"mytag:myvalue\",\n                \"team:development\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myapp:\n    type: harness:Application\n    properties:\n      name: My Application\n      description: This is my first Harness application\n      tags:\n        - mytag:myvalue\n        - team:development\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness application id\n\n```sh\n$ pulumi import harness:index/application:Application myapp Xyz123\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The application description\n"
                },
                "gitSyncConnectorId": {
                    "type": "string",
                    "description": "The id of the git sync connector\n"
                },
                "gitSyncEnabled": {
                    "type": "boolean",
                    "description": "True if git sync is enabled on this application\n"
                },
                "isManualTriggerAuthorized": {
                    "type": "boolean",
                    "description": "When this is set to true, all manual triggers will require API Key authorization\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "gitSyncConnectorId",
                "gitSyncEnabled",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The application description\n"
                },
                "isManualTriggerAuthorized": {
                    "type": "boolean",
                    "description": "When this is set to true, all manual triggers will require API Key authorization\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Application resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The application description\n"
                    },
                    "gitSyncConnectorId": {
                        "type": "string",
                        "description": "The id of the git sync connector\n"
                    },
                    "gitSyncEnabled": {
                        "type": "boolean",
                        "description": "True if git sync is enabled on this application\n"
                    },
                    "isManualTriggerAuthorized": {
                        "type": "boolean",
                        "description": "When this is set to true, all manual triggers will require API Key authorization\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the application\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/applicationGitSync:ApplicationGitSync": {
            "description": "Resource for configuring application git sync.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst githubToken = new harness.EncryptedText(\"github_token\", {\n    name: \"github_token\",\n    value: \"\u003cTOKEN\u003e\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst myrepo = new harness.GitConnector(\"myrepo\", {\n    name: \"myrepo\",\n    url: \"https://github.com/someorg/myrepo\",\n    branch: \"main\",\n    generateWebhookUrl: true,\n    username: \"someuser\",\n    passwordSecretId: githubToken.id,\n    urlType: \"REPO\",\n});\nconst example = new harness.Application(\"example\", {name: \"example-app\"});\nconst exampleApplicationGitSync = new harness.ApplicationGitSync(\"example\", {\n    appId: example.id,\n    connectorId: myrepo.id,\n    branch: \"main\",\n    enabled: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\ngithub_token = harness.EncryptedText(\"github_token\",\n    name=\"github_token\",\n    value=\"\u003cTOKEN\u003e\",\n    secret_manager_id=default.id)\nmyrepo = harness.GitConnector(\"myrepo\",\n    name=\"myrepo\",\n    url=\"https://github.com/someorg/myrepo\",\n    branch=\"main\",\n    generate_webhook_url=True,\n    username=\"someuser\",\n    password_secret_id=github_token.id,\n    url_type=\"REPO\")\nexample = harness.Application(\"example\", name=\"example-app\")\nexample_application_git_sync = harness.ApplicationGitSync(\"example\",\n    app_id=example.id,\n    connector_id=myrepo.id,\n    branch=\"main\",\n    enabled=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var githubToken = new Harness.EncryptedText(\"github_token\", new()\n    {\n        Name = \"github_token\",\n        Value = \"\u003cTOKEN\u003e\",\n        SecretManagerId = @default.Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var myrepo = new Harness.GitConnector(\"myrepo\", new()\n    {\n        Name = \"myrepo\",\n        Url = \"https://github.com/someorg/myrepo\",\n        Branch = \"main\",\n        GenerateWebhookUrl = true,\n        Username = \"someuser\",\n        PasswordSecretId = githubToken.Id,\n        UrlType = \"REPO\",\n    });\n\n    var example = new Harness.Application(\"example\", new()\n    {\n        Name = \"example-app\",\n    });\n\n    var exampleApplicationGitSync = new Harness.ApplicationGitSync(\"example\", new()\n    {\n        AppId = example.Id,\n        ConnectorId = myrepo.Id,\n        Branch = \"main\",\n        Enabled = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026harness.GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgithubToken, err := harness.NewEncryptedText(ctx, \"github_token\", \u0026harness.EncryptedTextArgs{\n\t\t\tName:            pulumi.String(\"github_token\"),\n\t\t\tValue:           pulumi.String(\"\u003cTOKEN\u003e\"),\n\t\t\tSecretManagerId: pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyrepo, err := harness.NewGitConnector(ctx, \"myrepo\", \u0026harness.GitConnectorArgs{\n\t\t\tName:               pulumi.String(\"myrepo\"),\n\t\t\tUrl:                pulumi.String(\"https://github.com/someorg/myrepo\"),\n\t\t\tBranch:             pulumi.String(\"main\"),\n\t\t\tGenerateWebhookUrl: pulumi.Bool(true),\n\t\t\tUsername:           pulumi.String(\"someuser\"),\n\t\t\tPasswordSecretId:   githubToken.ID(),\n\t\t\tUrlType:            pulumi.String(\"REPO\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := harness.NewApplication(ctx, \"example\", \u0026harness.ApplicationArgs{\n\t\t\tName: pulumi.String(\"example-app\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewApplicationGitSync(ctx, \"example\", \u0026harness.ApplicationGitSyncArgs{\n\t\t\tAppId:       example.ID(),\n\t\t\tConnectorId: myrepo.ID(),\n\t\t\tBranch:      pulumi.String(\"main\"),\n\t\t\tEnabled:     pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.GitConnector;\nimport com.pulumi.harness.GitConnectorArgs;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.ApplicationArgs;\nimport com.pulumi.harness.ApplicationGitSync;\nimport com.pulumi.harness.ApplicationGitSyncArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var githubToken = new EncryptedText(\"githubToken\", EncryptedTextArgs.builder()\n            .name(\"github_token\")\n            .value(\"\u003cTOKEN\u003e\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var myrepo = new GitConnector(\"myrepo\", GitConnectorArgs.builder()\n            .name(\"myrepo\")\n            .url(\"https://github.com/someorg/myrepo\")\n            .branch(\"main\")\n            .generateWebhookUrl(true)\n            .username(\"someuser\")\n            .passwordSecretId(githubToken.id())\n            .urlType(\"REPO\")\n            .build());\n\n        var example = new Application(\"example\", ApplicationArgs.builder()\n            .name(\"example-app\")\n            .build());\n\n        var exampleApplicationGitSync = new ApplicationGitSync(\"exampleApplicationGitSync\", ApplicationGitSyncArgs.builder()\n            .appId(example.id())\n            .connectorId(myrepo.id())\n            .branch(\"main\")\n            .enabled(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  githubToken:\n    type: harness:EncryptedText\n    name: github_token\n    properties:\n      name: github_token\n      value: \u003cTOKEN\u003e\n      secretManagerId: ${default.id}\n  myrepo:\n    type: harness:GitConnector\n    properties:\n      name: myrepo\n      url: https://github.com/someorg/myrepo\n      branch: main\n      generateWebhookUrl: true\n      username: someuser\n      passwordSecretId: ${githubToken.id}\n      urlType: REPO\n  example:\n    type: harness:Application\n    properties:\n      name: example-app\n  exampleApplicationGitSync:\n    type: harness:ApplicationGitSync\n    name: example\n    properties:\n      appId: ${example.id}\n      connectorId: ${myrepo.id}\n      branch: main\n      enabled: false\nvariables:\n  default:\n    fn::invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness application id\n\n```sh\n$ pulumi import harness:index/applicationGitSync:ApplicationGitSync myapp Xyz123\n```\n\n",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "The branch of the git repository to sync to.\n"
                },
                "connectorId": {
                    "type": "string",
                    "description": "The id of the git connector to use.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not to enable git sync.\n"
                },
                "repositoryName": {
                    "type": "string",
                    "description": "The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.\n"
                }
            },
            "required": [
                "appId",
                "branch",
                "connectorId"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application.\n"
                },
                "branch": {
                    "type": "string",
                    "description": "The branch of the git repository to sync to.\n"
                },
                "connectorId": {
                    "type": "string",
                    "description": "The id of the git connector to use.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not to enable git sync.\n"
                },
                "repositoryName": {
                    "type": "string",
                    "description": "The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.\n"
                }
            },
            "requiredInputs": [
                "appId",
                "branch",
                "connectorId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationGitSync resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application.\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "The branch of the git repository to sync to.\n"
                    },
                    "connectorId": {
                        "type": "string",
                        "description": "The id of the git connector to use.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether or not to enable git sync.\n"
                    },
                    "repositoryName": {
                        "type": "string",
                        "description": "The name of the git repository to sync to. This is only used if the git connector is for an account and not an individual repository.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/delegateApproval:DelegateApproval": {
            "description": "Resource for approving or rejecting delegates.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.getDelegate({\n    name: \"my-delegate\",\n});\nconst testDelegateApproval = new harness.DelegateApproval(\"test\", {\n    delegateId: test.then(test =\u003e test.id),\n    approve: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.get_delegate(name=\"my-delegate\")\ntest_delegate_approval = harness.DelegateApproval(\"test\",\n    delegate_id=test.id,\n    approve=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.GetDelegate.Invoke(new()\n    {\n        Name = \"my-delegate\",\n    });\n\n    var testDelegateApproval = new Harness.DelegateApproval(\"test\", new()\n    {\n        DelegateId = test.Apply(getDelegateResult =\u003e getDelegateResult.Id),\n        Approve = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := harness.GetDelegate(ctx, \u0026harness.GetDelegateArgs{\n\t\t\tName: pulumi.StringRef(\"my-delegate\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewDelegateApproval(ctx, \"test\", \u0026harness.DelegateApprovalArgs{\n\t\t\tDelegateId: pulumi.String(test.Id),\n\t\t\tApprove:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetDelegateArgs;\nimport com.pulumi.harness.DelegateApproval;\nimport com.pulumi.harness.DelegateApprovalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = HarnessFunctions.getDelegate(GetDelegateArgs.builder()\n            .name(\"my-delegate\")\n            .build());\n\n        var testDelegateApproval = new DelegateApproval(\"testDelegateApproval\", DelegateApprovalArgs.builder()\n            .delegateId(test.applyValue(getDelegateResult -\u003e getDelegateResult.id()))\n            .approve(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testDelegateApproval:\n    type: harness:DelegateApproval\n    name: test\n    properties:\n      delegateId: ${test.id}\n      approve: true\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:getDelegate\n      Arguments:\n        name: my-delegate\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport the status of the delegate approval.\n\n```sh\n$ pulumi import harness:index/delegateApproval:DelegateApproval example \u003cdelegate_id\u003e\n```\n\n",
            "properties": {
                "approve": {
                    "type": "boolean",
                    "description": "Whether or not to approve the delegate.\n"
                },
                "delegateId": {
                    "type": "string",
                    "description": "The id of the delegate.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the delegate.\n"
                }
            },
            "required": [
                "approve",
                "delegateId",
                "status"
            ],
            "inputProperties": {
                "approve": {
                    "type": "boolean",
                    "description": "Whether or not to approve the delegate.\n",
                    "willReplaceOnChanges": true
                },
                "delegateId": {
                    "type": "string",
                    "description": "The id of the delegate.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "approve",
                "delegateId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DelegateApproval resources.\n",
                "properties": {
                    "approve": {
                        "type": "boolean",
                        "description": "Whether or not to approve the delegate.\n",
                        "willReplaceOnChanges": true
                    },
                    "delegateId": {
                        "type": "string",
                        "description": "The id of the delegate.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the delegate.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/encryptedText:EncryptedText": {
            "description": "Resource for creating an encrypted text secret\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst example = new harness.EncryptedText(\"example\", {\n    name: \"example-secret\",\n    value: \"someval\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n    usageScopes: [\n        {\n            environmentFilterType: \"PRODUCTION_ENVIRONMENTS\",\n        },\n        {\n            environmentFilterType: \"NON_PRODUCTION_ENVIRONMENTS\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\nexample = harness.EncryptedText(\"example\",\n    name=\"example-secret\",\n    value=\"someval\",\n    secret_manager_id=default.id,\n    usage_scopes=[\n        harness.EncryptedTextUsageScopeArgs(\n            environment_filter_type=\"PRODUCTION_ENVIRONMENTS\",\n        ),\n        harness.EncryptedTextUsageScopeArgs(\n            environment_filter_type=\"NON_PRODUCTION_ENVIRONMENTS\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var example = new Harness.EncryptedText(\"example\", new()\n    {\n        Name = \"example-secret\",\n        Value = \"someval\",\n        SecretManagerId = @default.Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n        UsageScopes = new[]\n        {\n            new Harness.Inputs.EncryptedTextUsageScopeArgs\n            {\n                EnvironmentFilterType = \"PRODUCTION_ENVIRONMENTS\",\n            },\n            new Harness.Inputs.EncryptedTextUsageScopeArgs\n            {\n                EnvironmentFilterType = \"NON_PRODUCTION_ENVIRONMENTS\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026harness.GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewEncryptedText(ctx, \"example\", \u0026harness.EncryptedTextArgs{\n\t\t\tName:            pulumi.String(\"example-secret\"),\n\t\t\tValue:           pulumi.String(\"someval\"),\n\t\t\tSecretManagerId: pulumi.String(_default.Id),\n\t\t\tUsageScopes: harness.EncryptedTextUsageScopeArray{\n\t\t\t\t\u0026harness.EncryptedTextUsageScopeArgs{\n\t\t\t\t\tEnvironmentFilterType: pulumi.String(\"PRODUCTION_ENVIRONMENTS\"),\n\t\t\t\t},\n\t\t\t\t\u0026harness.EncryptedTextUsageScopeArgs{\n\t\t\t\t\tEnvironmentFilterType: pulumi.String(\"NON_PRODUCTION_ENVIRONMENTS\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.inputs.EncryptedTextUsageScopeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var example = new EncryptedText(\"example\", EncryptedTextArgs.builder()\n            .name(\"example-secret\")\n            .value(\"someval\")\n            .secretManagerId(default_.id())\n            .usageScopes(            \n                EncryptedTextUsageScopeArgs.builder()\n                    .environmentFilterType(\"PRODUCTION_ENVIRONMENTS\")\n                    .build(),\n                EncryptedTextUsageScopeArgs.builder()\n                    .environmentFilterType(\"NON_PRODUCTION_ENVIRONMENTS\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:EncryptedText\n    properties:\n      name: example-secret\n      value: someval\n      secretManagerId: ${default.id}\n      usageScopes:\n        - environmentFilterType: PRODUCTION_ENVIRONMENTS\n        - environmentFilterType: NON_PRODUCTION_ENVIRONMENTS\nvariables:\n  default:\n    fn::invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness encrypted text format.\n\nNOTE: The secret value cannot be decrypted and imported.\n\n```sh\n$ pulumi import harness:index/encryptedText:EncryptedText example \u003csecret_id\u003e\n```\n\n",
            "properties": {
                "inheritScopesFromSecretManager": {
                    "type": "boolean",
                    "description": "Boolean that indicates whether or not to inherit the usage scopes from the secret manager\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the encrypted text secret\n"
                },
                "scopedToAccount": {
                    "type": "boolean",
                    "description": "Boolean that indicates whether or not the secret is scoped to the account\n"
                },
                "secretManagerId": {
                    "type": "string",
                    "description": "The id of the secret manager to associate the secret with. Once set, this field cannot be changed.\n"
                },
                "secretReference": {
                    "type": "string",
                    "description": "Name of the existing secret. If you already have secrets created in a secrets manager such as HashiCorp Vault or AWS Secrets Manager, you do not need to re-create the existing secrets in Harness.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/EncryptedTextUsageScope:EncryptedTextUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the secret.\n",
                    "secret": true
                }
            },
            "required": [
                "name",
                "secretManagerId"
            ],
            "inputProperties": {
                "inheritScopesFromSecretManager": {
                    "type": "boolean",
                    "description": "Boolean that indicates whether or not to inherit the usage scopes from the secret manager\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the encrypted text secret\n"
                },
                "scopedToAccount": {
                    "type": "boolean",
                    "description": "Boolean that indicates whether or not the secret is scoped to the account\n"
                },
                "secretManagerId": {
                    "type": "string",
                    "description": "The id of the secret manager to associate the secret with. Once set, this field cannot be changed.\n",
                    "willReplaceOnChanges": true
                },
                "secretReference": {
                    "type": "string",
                    "description": "Name of the existing secret. If you already have secrets created in a secrets manager such as HashiCorp Vault or AWS Secrets Manager, you do not need to re-create the existing secrets in Harness.\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/EncryptedTextUsageScope:EncryptedTextUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the secret.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "secretManagerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EncryptedText resources.\n",
                "properties": {
                    "inheritScopesFromSecretManager": {
                        "type": "boolean",
                        "description": "Boolean that indicates whether or not to inherit the usage scopes from the secret manager\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the encrypted text secret\n"
                    },
                    "scopedToAccount": {
                        "type": "boolean",
                        "description": "Boolean that indicates whether or not the secret is scoped to the account\n"
                    },
                    "secretManagerId": {
                        "type": "string",
                        "description": "The id of the secret manager to associate the secret with. Once set, this field cannot be changed.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretReference": {
                        "type": "string",
                        "description": "Name of the existing secret. If you already have secrets created in a secrets manager such as HashiCorp Vault or AWS Secrets Manager, you do not need to re-create the existing secrets in Harness.\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/EncryptedTextUsageScope:EncryptedTextUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the secret.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "harness:index/environment:Environment": {
            "description": "Resource for creating an environment\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.Application(\"test\", {name: \"%[1]s\"});\nconst testKubernetes = new harness.service.Kubernetes(\"test\", {\n    appId: test.id,\n    name: \"%[1]s\",\n    helmVersion: \"V2\",\n    description: \"description\",\n    variables: [\n        {\n            name: \"test\",\n            value: \"test_value\",\n            type: \"TEXT\",\n        },\n        {\n            name: \"test2\",\n            value: \"test_value2\",\n            type: \"TEXT\",\n        },\n    ],\n});\nconst testEnvironment = new harness.Environment(\"test\", {\n    appId: test.id,\n    name: \"%[1]s\",\n    type: \"%[2]s\",\n    variableOverrides: [\n        {\n            serviceName: testKubernetes.name,\n            name: \"test\",\n            value: \"override\",\n            type: \"TEXT\",\n        },\n        {\n            serviceName: testKubernetes.name,\n            name: \"test2\",\n            value: \"override2\",\n            type: \"TEXT\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.Application(\"test\", name=\"%[1]s\")\ntest_kubernetes = harness.service.Kubernetes(\"test\",\n    app_id=test.id,\n    name=\"%[1]s\",\n    helm_version=\"V2\",\n    description=\"description\",\n    variables=[\n        harness.service.KubernetesVariableArgs(\n            name=\"test\",\n            value=\"test_value\",\n            type=\"TEXT\",\n        ),\n        harness.service.KubernetesVariableArgs(\n            name=\"test2\",\n            value=\"test_value2\",\n            type=\"TEXT\",\n        ),\n    ])\ntest_environment = harness.Environment(\"test\",\n    app_id=test.id,\n    name=\"%[1]s\",\n    type=\"%[2]s\",\n    variable_overrides=[\n        harness.EnvironmentVariableOverrideArgs(\n            service_name=test_kubernetes.name,\n            name=\"test\",\n            value=\"override\",\n            type=\"TEXT\",\n        ),\n        harness.EnvironmentVariableOverrideArgs(\n            service_name=test_kubernetes.name,\n            name=\"test2\",\n            value=\"override2\",\n            type=\"TEXT\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Application(\"test\", new()\n    {\n        Name = \"%[1]s\",\n    });\n\n    var testKubernetes = new Harness.Service.Kubernetes(\"test\", new()\n    {\n        AppId = test.Id,\n        Name = \"%[1]s\",\n        HelmVersion = \"V2\",\n        Description = \"description\",\n        Variables = new[]\n        {\n            new Harness.Service.Inputs.KubernetesVariableArgs\n            {\n                Name = \"test\",\n                Value = \"test_value\",\n                Type = \"TEXT\",\n            },\n            new Harness.Service.Inputs.KubernetesVariableArgs\n            {\n                Name = \"test2\",\n                Value = \"test_value2\",\n                Type = \"TEXT\",\n            },\n        },\n    });\n\n    var testEnvironment = new Harness.Environment(\"test\", new()\n    {\n        AppId = test.Id,\n        Name = \"%[1]s\",\n        Type = \"%[2]s\",\n        VariableOverrides = new[]\n        {\n            new Harness.Inputs.EnvironmentVariableOverrideArgs\n            {\n                ServiceName = testKubernetes.Name,\n                Name = \"test\",\n                Value = \"override\",\n                Type = \"TEXT\",\n            },\n            new Harness.Inputs.EnvironmentVariableOverrideArgs\n            {\n                ServiceName = testKubernetes.Name,\n                Name = \"test2\",\n                Value = \"override2\",\n                Type = \"TEXT\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := harness.NewApplication(ctx, \"test\", \u0026harness.ApplicationArgs{\n\t\t\tName: pulumi.String(\"%[1]s\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestKubernetes, err := service.NewKubernetes(ctx, \"test\", \u0026service.KubernetesArgs{\n\t\t\tAppId:       test.ID(),\n\t\t\tName:        pulumi.String(\"%[1]s\"),\n\t\t\tHelmVersion: pulumi.String(\"V2\"),\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tVariables: service.KubernetesVariableArray{\n\t\t\t\t\u0026service.KubernetesVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"test\"),\n\t\t\t\t\tValue: pulumi.String(\"test_value\"),\n\t\t\t\t\tType:  pulumi.String(\"TEXT\"),\n\t\t\t\t},\n\t\t\t\t\u0026service.KubernetesVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"test2\"),\n\t\t\t\t\tValue: pulumi.String(\"test_value2\"),\n\t\t\t\t\tType:  pulumi.String(\"TEXT\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewEnvironment(ctx, \"test\", \u0026harness.EnvironmentArgs{\n\t\t\tAppId: test.ID(),\n\t\t\tName:  pulumi.String(\"%[1]s\"),\n\t\t\tType:  pulumi.String(\"%[2]s\"),\n\t\t\tVariableOverrides: harness.EnvironmentVariableOverrideArray{\n\t\t\t\t\u0026harness.EnvironmentVariableOverrideArgs{\n\t\t\t\t\tServiceName: testKubernetes.Name,\n\t\t\t\t\tName:        pulumi.String(\"test\"),\n\t\t\t\t\tValue:       pulumi.String(\"override\"),\n\t\t\t\t\tType:        pulumi.String(\"TEXT\"),\n\t\t\t\t},\n\t\t\t\t\u0026harness.EnvironmentVariableOverrideArgs{\n\t\t\t\t\tServiceName: testKubernetes.Name,\n\t\t\t\t\tName:        pulumi.String(\"test2\"),\n\t\t\t\t\tValue:       pulumi.String(\"override2\"),\n\t\t\t\t\tType:        pulumi.String(\"TEXT\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.ApplicationArgs;\nimport com.pulumi.harness.service.Kubernetes;\nimport com.pulumi.harness.service.KubernetesArgs;\nimport com.pulumi.harness.service.inputs.KubernetesVariableArgs;\nimport com.pulumi.harness.Environment;\nimport com.pulumi.harness.EnvironmentArgs;\nimport com.pulumi.harness.inputs.EnvironmentVariableOverrideArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Application(\"test\", ApplicationArgs.builder()\n            .name(\"%[1]s\")\n            .build());\n\n        var testKubernetes = new Kubernetes(\"testKubernetes\", KubernetesArgs.builder()\n            .appId(test.id())\n            .name(\"%[1]s\")\n            .helmVersion(\"V2\")\n            .description(\"description\")\n            .variables(            \n                KubernetesVariableArgs.builder()\n                    .name(\"test\")\n                    .value(\"test_value\")\n                    .type(\"TEXT\")\n                    .build(),\n                KubernetesVariableArgs.builder()\n                    .name(\"test2\")\n                    .value(\"test_value2\")\n                    .type(\"TEXT\")\n                    .build())\n            .build());\n\n        var testEnvironment = new Environment(\"testEnvironment\", EnvironmentArgs.builder()\n            .appId(test.id())\n            .name(\"%[1]s\")\n            .type(\"%[2]s\")\n            .variableOverrides(            \n                EnvironmentVariableOverrideArgs.builder()\n                    .serviceName(testKubernetes.name())\n                    .name(\"test\")\n                    .value(\"override\")\n                    .type(\"TEXT\")\n                    .build(),\n                EnvironmentVariableOverrideArgs.builder()\n                    .serviceName(testKubernetes.name())\n                    .name(\"test2\")\n                    .value(\"override2\")\n                    .type(\"TEXT\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:Application\n    properties:\n      name: '%[1]s'\n  testKubernetes:\n    type: harness:service:Kubernetes\n    name: test\n    properties:\n      appId: ${test.id}\n      name: '%[1]s'\n      helmVersion: V2\n      description: description\n      variables:\n        - name: test\n          value: test_value\n          type: TEXT\n        - name: test2\n          value: test_value2\n          type: TEXT\n  testEnvironment:\n    type: harness:Environment\n    name: test\n    properties:\n      appId: ${test.id}\n      name: '%[1]s'\n      type: '%[2]s'\n      variableOverrides:\n        - serviceName: ${testKubernetes.name}\n          name: test\n          value: override\n          type: TEXT\n        - serviceName: ${testKubernetes.name}\n          name: test2\n          value: override2\n          type: TEXT\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness application id and environment id.\n\n```sh\n$ pulumi import harness:index/environment:Environment dev \u003capplication_id\u003e/\u003cenvironment_id\u003e\n```\n\n",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the environment.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the environment. Valid values are `PROD` and `NON_PROD`\n"
                },
                "variableOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/EnvironmentVariableOverride:EnvironmentVariableOverride"
                    },
                    "description": "Override for a service variable\n"
                }
            },
            "required": [
                "appId",
                "name",
                "type"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the environment.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the environment. Valid values are `PROD` and `NON_PROD`\n"
                },
                "variableOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/EnvironmentVariableOverride:EnvironmentVariableOverride"
                    },
                    "description": "Override for a service variable\n"
                }
            },
            "requiredInputs": [
                "appId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the environment.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the environment. Valid values are `PROD` and `NON_PROD`\n"
                    },
                    "variableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/EnvironmentVariableOverride:EnvironmentVariableOverride"
                        },
                        "description": "Override for a service variable\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/gitConnector:GitConnector": {
            "description": "Resource for creating a git connector\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst default = harness.getSecretManager({\n    \"default\": true,\n});\nconst example = new harness.EncryptedText(\"example\", {\n    name: \"example-secret\",\n    value: \"foo\",\n    secretManagerId: _default.then(_default =\u003e _default.id),\n});\nconst exampleGitConnector = new harness.GitConnector(\"example\", {\n    name: \"example\",\n    url: \"https://github.com/harness/terraform-provider-harness\",\n    branch: \"master\",\n    generateWebhookUrl: true,\n    passwordSecretId: example.id,\n    urlType: \"REPO\",\n    username: \"someuser\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ndefault = harness.get_secret_manager(default=True)\nexample = harness.EncryptedText(\"example\",\n    name=\"example-secret\",\n    value=\"foo\",\n    secret_manager_id=default.id)\nexample_git_connector = harness.GitConnector(\"example\",\n    name=\"example\",\n    url=\"https://github.com/harness/terraform-provider-harness\",\n    branch=\"master\",\n    generate_webhook_url=True,\n    password_secret_id=example.id,\n    url_type=\"REPO\",\n    username=\"someuser\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var example = new Harness.EncryptedText(\"example\", new()\n    {\n        Name = \"example-secret\",\n        Value = \"foo\",\n        SecretManagerId = @default.Apply(@default =\u003e @default.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id)),\n    });\n\n    var exampleGitConnector = new Harness.GitConnector(\"example\", new()\n    {\n        Name = \"example\",\n        Url = \"https://github.com/harness/terraform-provider-harness\",\n        Branch = \"master\",\n        GenerateWebhookUrl = true,\n        PasswordSecretId = example.Id,\n        UrlType = \"REPO\",\n        Username = \"someuser\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := harness.GetSecretManager(ctx, \u0026harness.GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := harness.NewEncryptedText(ctx, \"example\", \u0026harness.EncryptedTextArgs{\n\t\t\tName:            pulumi.String(\"example-secret\"),\n\t\t\tValue:           pulumi.String(\"foo\"),\n\t\t\tSecretManagerId: pulumi.String(_default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewGitConnector(ctx, \"example\", \u0026harness.GitConnectorArgs{\n\t\t\tName:               pulumi.String(\"example\"),\n\t\t\tUrl:                pulumi.String(\"https://github.com/harness/terraform-provider-harness\"),\n\t\t\tBranch:             pulumi.String(\"master\"),\n\t\t\tGenerateWebhookUrl: pulumi.Bool(true),\n\t\t\tPasswordSecretId:   example.ID(),\n\t\t\tUrlType:            pulumi.String(\"REPO\"),\n\t\t\tUsername:           pulumi.String(\"someuser\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.GitConnector;\nimport com.pulumi.harness.GitConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var example = new EncryptedText(\"example\", EncryptedTextArgs.builder()\n            .name(\"example-secret\")\n            .value(\"foo\")\n            .secretManagerId(default_.id())\n            .build());\n\n        var exampleGitConnector = new GitConnector(\"exampleGitConnector\", GitConnectorArgs.builder()\n            .name(\"example\")\n            .url(\"https://github.com/harness/terraform-provider-harness\")\n            .branch(\"master\")\n            .generateWebhookUrl(true)\n            .passwordSecretId(example.id())\n            .urlType(\"REPO\")\n            .username(\"someuser\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:EncryptedText\n    properties:\n      name: example-secret\n      value: foo\n      secretManagerId: ${default.id}\n  exampleGitConnector:\n    type: harness:GitConnector\n    name: example\n    properties:\n      name: example\n      url: https://github.com/harness/terraform-provider-harness\n      branch: master\n      generateWebhookUrl: true\n      passwordSecretId: ${example.id}\n      urlType: REPO\n      username: someuser\nvariables:\n  default:\n    fn::invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness git connector id\n\n```sh\n$ pulumi import harness:index/gitConnector:GitConnector example \u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "The branch of the git connector to use\n"
                },
                "commitDetails": {
                    "$ref": "#/types/harness:index/GitConnectorCommitDetails:GitConnectorCommitDetails",
                    "description": "Custom details to use when making commits using this git connector\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The time the git connector was created\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Delegate selectors to apply to this git connector.\n"
                },
                "generateWebhookUrl": {
                    "type": "boolean",
                    "description": "Boolean indicating whether or not to generate a webhook url.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the git connector.\n"
                },
                "passwordSecretId": {
                    "type": "string",
                    "description": "The id of the secret for connecting to the git repository.\n"
                },
                "sshSettingId": {
                    "type": "string",
                    "description": "The id of the SSH secret to use\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the git repository or account/organization\n"
                },
                "urlType": {
                    "type": "string",
                    "description": "The type of git url being used. Options are `ACCOUNT`, and `REPO.`\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/GitConnectorUsageScope:GitConnectorUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The name of the user used to connect to the git repository\n"
                },
                "webhookUrl": {
                    "type": "string",
                    "description": "The generated webhook url\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "url",
                "urlType",
                "webhookUrl"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "description": "The branch of the git connector to use\n"
                },
                "commitDetails": {
                    "$ref": "#/types/harness:index/GitConnectorCommitDetails:GitConnectorCommitDetails",
                    "description": "Custom details to use when making commits using this git connector\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Delegate selectors to apply to this git connector.\n"
                },
                "generateWebhookUrl": {
                    "type": "boolean",
                    "description": "Boolean indicating whether or not to generate a webhook url.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the git connector.\n"
                },
                "passwordSecretId": {
                    "type": "string",
                    "description": "The id of the secret for connecting to the git repository.\n"
                },
                "sshSettingId": {
                    "type": "string",
                    "description": "The id of the SSH secret to use\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the git repository or account/organization\n"
                },
                "urlType": {
                    "type": "string",
                    "description": "The type of git url being used. Options are `ACCOUNT`, and `REPO.`\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/GitConnectorUsageScope:GitConnectorUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The name of the user used to connect to the git repository\n"
                }
            },
            "requiredInputs": [
                "url",
                "urlType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitConnector resources.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "The branch of the git connector to use\n"
                    },
                    "commitDetails": {
                        "$ref": "#/types/harness:index/GitConnectorCommitDetails:GitConnectorCommitDetails",
                        "description": "Custom details to use when making commits using this git connector\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The time the git connector was created\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Delegate selectors to apply to this git connector.\n"
                    },
                    "generateWebhookUrl": {
                        "type": "boolean",
                        "description": "Boolean indicating whether or not to generate a webhook url.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the git connector.\n"
                    },
                    "passwordSecretId": {
                        "type": "string",
                        "description": "The id of the secret for connecting to the git repository.\n"
                    },
                    "sshSettingId": {
                        "type": "string",
                        "description": "The id of the SSH secret to use\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the git repository or account/organization\n"
                    },
                    "urlType": {
                        "type": "string",
                        "description": "The type of git url being used. Options are `ACCOUNT`, and `REPO.`\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/GitConnectorUsageScope:GitConnectorUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The name of the user used to connect to the git repository\n"
                    },
                    "webhookUrl": {
                        "type": "string",
                        "description": "The generated webhook url\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/infrastructureDefinition:InfrastructureDefinition": {
            "description": "Resource for creating am infrastructure definition. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\n// Creating a Kubernetes infrastructure definition\nconst dev = new harness.cloudprovider.Kubernetes(\"dev\", {\n    name: \"k8s-dev\",\n    authentication: {\n        delegateSelectors: [\"k8s\"],\n    },\n});\nconst example = new harness.Application(\"example\", {name: \"example\"});\nconst devEnvironment = new harness.Environment(\"dev\", {\n    name: \"dev\",\n    appId: example.id,\n    type: \"NON_PROD\",\n});\n// Creating a infrastructure of type KUBERNETES\nconst k8s = new harness.InfrastructureDefinition(\"k8s\", {\n    name: \"k8s-eks-us-east-1\",\n    appId: example.id,\n    envId: devEnvironment.id,\n    cloudProviderType: \"KUBERNETES_CLUSTER\",\n    deploymentType: \"KUBERNETES\",\n    kubernetes: {\n        cloudProviderName: dev.name,\n        namespace: \"dev\",\n        releaseName: \"${service.name}\",\n    },\n});\n// Creating a Deployment Template for CUSTOM infrastructure type\nconst exampleYaml = new harness.YamlConfig(\"example_yaml\", {\n    path: \"Setup/Template Library/Example Folder/deployment_template.yaml\",\n    content: `harnessApiVersion: '1.0'\ntype: CUSTOM_DEPLOYMENT_TYPE\nfetchInstanceScript: |-\n  set -ex\n  curl http://\\${url}/\\${file_name} \u003e \\${INSTANCE_OUTPUT_PATH}\nhostAttributes:\n  hostname: host\nhostObjectArrayPath: hosts\nvariables:\n- name: url\n- name: file_name\n`,\n});\n// Creating a infrastructure of type CUSTOM\nconst custom = new harness.InfrastructureDefinition(\"custom\", {\n    name: \"custom-infra\",\n    appId: example.id,\n    envId: devEnvironment.id,\n    cloudProviderType: \"CUSTOM\",\n    deploymentType: \"CUSTOM\",\n    deploymentTemplateUri: pulumi.interpolate`Example Folder/${exampleYaml.name}`,\n    custom: {\n        deploymentTypeTemplateVersion: \"1\",\n        variables: [\n            {\n                name: \"url\",\n                value: \"localhost:8081\",\n            },\n            {\n                name: \"file_name\",\n                value: \"instances.json\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\n# Creating a Kubernetes infrastructure definition\ndev = harness.cloudprovider.Kubernetes(\"dev\",\n    name=\"k8s-dev\",\n    authentication=harness.cloudprovider.KubernetesAuthenticationArgs(\n        delegate_selectors=[\"k8s\"],\n    ))\nexample = harness.Application(\"example\", name=\"example\")\ndev_environment = harness.Environment(\"dev\",\n    name=\"dev\",\n    app_id=example.id,\n    type=\"NON_PROD\")\n# Creating a infrastructure of type KUBERNETES\nk8s = harness.InfrastructureDefinition(\"k8s\",\n    name=\"k8s-eks-us-east-1\",\n    app_id=example.id,\n    env_id=dev_environment.id,\n    cloud_provider_type=\"KUBERNETES_CLUSTER\",\n    deployment_type=\"KUBERNETES\",\n    kubernetes=harness.InfrastructureDefinitionKubernetesArgs(\n        cloud_provider_name=dev.name,\n        namespace=\"dev\",\n        release_name=\"${service.name}\",\n    ))\n# Creating a Deployment Template for CUSTOM infrastructure type\nexample_yaml = harness.YamlConfig(\"example_yaml\",\n    path=\"Setup/Template Library/Example Folder/deployment_template.yaml\",\n    content=\"\"\"harnessApiVersion: '1.0'\ntype: CUSTOM_DEPLOYMENT_TYPE\nfetchInstanceScript: |-\n  set -ex\n  curl http://${url}/${file_name} \u003e ${INSTANCE_OUTPUT_PATH}\nhostAttributes:\n  hostname: host\nhostObjectArrayPath: hosts\nvariables:\n- name: url\n- name: file_name\n\"\"\")\n# Creating a infrastructure of type CUSTOM\ncustom = harness.InfrastructureDefinition(\"custom\",\n    name=\"custom-infra\",\n    app_id=example.id,\n    env_id=dev_environment.id,\n    cloud_provider_type=\"CUSTOM\",\n    deployment_type=\"CUSTOM\",\n    deployment_template_uri=example_yaml.name.apply(lambda name: f\"Example Folder/{name}\"),\n    custom=harness.InfrastructureDefinitionCustomArgs(\n        deployment_type_template_version=\"1\",\n        variables=[\n            harness.InfrastructureDefinitionCustomVariableArgs(\n                name=\"url\",\n                value=\"localhost:8081\",\n            ),\n            harness.InfrastructureDefinitionCustomVariableArgs(\n                name=\"file_name\",\n                value=\"instances.json\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Creating a Kubernetes infrastructure definition\n    var dev = new Harness.Cloudprovider.Kubernetes(\"dev\", new()\n    {\n        Name = \"k8s-dev\",\n        Authentication = new Harness.Cloudprovider.Inputs.KubernetesAuthenticationArgs\n        {\n            DelegateSelectors = new[]\n            {\n                \"k8s\",\n            },\n        },\n    });\n\n    var example = new Harness.Application(\"example\", new()\n    {\n        Name = \"example\",\n    });\n\n    var devEnvironment = new Harness.Environment(\"dev\", new()\n    {\n        Name = \"dev\",\n        AppId = example.Id,\n        Type = \"NON_PROD\",\n    });\n\n    // Creating a infrastructure of type KUBERNETES\n    var k8s = new Harness.InfrastructureDefinition(\"k8s\", new()\n    {\n        Name = \"k8s-eks-us-east-1\",\n        AppId = example.Id,\n        EnvId = devEnvironment.Id,\n        CloudProviderType = \"KUBERNETES_CLUSTER\",\n        DeploymentType = \"KUBERNETES\",\n        Kubernetes = new Harness.Inputs.InfrastructureDefinitionKubernetesArgs\n        {\n            CloudProviderName = dev.Name,\n            Namespace = \"dev\",\n            ReleaseName = \"${service.name}\",\n        },\n    });\n\n    // Creating a Deployment Template for CUSTOM infrastructure type\n    var exampleYaml = new Harness.YamlConfig(\"example_yaml\", new()\n    {\n        Path = \"Setup/Template Library/Example Folder/deployment_template.yaml\",\n        Content = @\"harnessApiVersion: '1.0'\ntype: CUSTOM_DEPLOYMENT_TYPE\nfetchInstanceScript: |-\n  set -ex\n  curl http://${url}/${file_name} \u003e ${INSTANCE_OUTPUT_PATH}\nhostAttributes:\n  hostname: host\nhostObjectArrayPath: hosts\nvariables:\n- name: url\n- name: file_name\n\",\n    });\n\n    // Creating a infrastructure of type CUSTOM\n    var custom = new Harness.InfrastructureDefinition(\"custom\", new()\n    {\n        Name = \"custom-infra\",\n        AppId = example.Id,\n        EnvId = devEnvironment.Id,\n        CloudProviderType = \"CUSTOM\",\n        DeploymentType = \"CUSTOM\",\n        DeploymentTemplateUri = exampleYaml.Name.Apply(name =\u003e $\"Example Folder/{name}\"),\n        Custom = new Harness.Inputs.InfrastructureDefinitionCustomArgs\n        {\n            DeploymentTypeTemplateVersion = \"1\",\n            Variables = new[]\n            {\n                new Harness.Inputs.InfrastructureDefinitionCustomVariableArgs\n                {\n                    Name = \"url\",\n                    Value = \"localhost:8081\",\n                },\n                new Harness.Inputs.InfrastructureDefinitionCustomVariableArgs\n                {\n                    Name = \"file_name\",\n                    Value = \"instances.json\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/cloudprovider\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Creating a Kubernetes infrastructure definition\n\t\tdev, err := cloudprovider.NewKubernetes(ctx, \"dev\", \u0026cloudprovider.KubernetesArgs{\n\t\t\tName: pulumi.String(\"k8s-dev\"),\n\t\t\tAuthentication: \u0026cloudprovider.KubernetesAuthenticationArgs{\n\t\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"k8s\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := harness.NewApplication(ctx, \"example\", \u0026harness.ApplicationArgs{\n\t\t\tName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdevEnvironment, err := harness.NewEnvironment(ctx, \"dev\", \u0026harness.EnvironmentArgs{\n\t\t\tName:  pulumi.String(\"dev\"),\n\t\t\tAppId: example.ID(),\n\t\t\tType:  pulumi.String(\"NON_PROD\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Creating a infrastructure of type KUBERNETES\n\t\t_, err = harness.NewInfrastructureDefinition(ctx, \"k8s\", \u0026harness.InfrastructureDefinitionArgs{\n\t\t\tName:              pulumi.String(\"k8s-eks-us-east-1\"),\n\t\t\tAppId:             example.ID(),\n\t\t\tEnvId:             devEnvironment.ID(),\n\t\t\tCloudProviderType: pulumi.String(\"KUBERNETES_CLUSTER\"),\n\t\t\tDeploymentType:    pulumi.String(\"KUBERNETES\"),\n\t\t\tKubernetes: \u0026harness.InfrastructureDefinitionKubernetesArgs{\n\t\t\t\tCloudProviderName: dev.Name,\n\t\t\t\tNamespace:         pulumi.String(\"dev\"),\n\t\t\t\tReleaseName:       pulumi.String(\"${service.name}\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Creating a Deployment Template for CUSTOM infrastructure type\n\t\texampleYaml, err := harness.NewYamlConfig(ctx, \"example_yaml\", \u0026harness.YamlConfigArgs{\n\t\t\tPath: pulumi.String(\"Setup/Template Library/Example Folder/deployment_template.yaml\"),\n\t\t\tContent: pulumi.String(`harnessApiVersion: '1.0'\ntype: CUSTOM_DEPLOYMENT_TYPE\nfetchInstanceScript: |-\n  set -ex\n  curl http://${url}/${file_name} \u003e ${INSTANCE_OUTPUT_PATH}\nhostAttributes:\n  hostname: host\nhostObjectArrayPath: hosts\nvariables:\n- name: url\n- name: file_name\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Creating a infrastructure of type CUSTOM\n\t\t_, err = harness.NewInfrastructureDefinition(ctx, \"custom\", \u0026harness.InfrastructureDefinitionArgs{\n\t\t\tName:              pulumi.String(\"custom-infra\"),\n\t\t\tAppId:             example.ID(),\n\t\t\tEnvId:             devEnvironment.ID(),\n\t\t\tCloudProviderType: pulumi.String(\"CUSTOM\"),\n\t\t\tDeploymentType:    pulumi.String(\"CUSTOM\"),\n\t\t\tDeploymentTemplateUri: exampleYaml.Name.ApplyT(func(name string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"Example Folder/%v\", name), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tCustom: \u0026harness.InfrastructureDefinitionCustomArgs{\n\t\t\t\tDeploymentTypeTemplateVersion: pulumi.String(\"1\"),\n\t\t\t\tVariables: harness.InfrastructureDefinitionCustomVariableArray{\n\t\t\t\t\t\u0026harness.InfrastructureDefinitionCustomVariableArgs{\n\t\t\t\t\t\tName:  pulumi.String(\"url\"),\n\t\t\t\t\t\tValue: pulumi.String(\"localhost:8081\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026harness.InfrastructureDefinitionCustomVariableArgs{\n\t\t\t\t\t\tName:  pulumi.String(\"file_name\"),\n\t\t\t\t\t\tValue: pulumi.String(\"instances.json\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.cloudprovider.Kubernetes;\nimport com.pulumi.harness.cloudprovider.KubernetesArgs;\nimport com.pulumi.harness.cloudprovider.inputs.KubernetesAuthenticationArgs;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.ApplicationArgs;\nimport com.pulumi.harness.Environment;\nimport com.pulumi.harness.EnvironmentArgs;\nimport com.pulumi.harness.InfrastructureDefinition;\nimport com.pulumi.harness.InfrastructureDefinitionArgs;\nimport com.pulumi.harness.inputs.InfrastructureDefinitionKubernetesArgs;\nimport com.pulumi.harness.YamlConfig;\nimport com.pulumi.harness.YamlConfigArgs;\nimport com.pulumi.harness.inputs.InfrastructureDefinitionCustomArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Creating a Kubernetes infrastructure definition\n        var dev = new Kubernetes(\"dev\", KubernetesArgs.builder()\n            .name(\"k8s-dev\")\n            .authentication(KubernetesAuthenticationArgs.builder()\n                .delegateSelectors(\"k8s\")\n                .build())\n            .build());\n\n        var example = new Application(\"example\", ApplicationArgs.builder()\n            .name(\"example\")\n            .build());\n\n        var devEnvironment = new Environment(\"devEnvironment\", EnvironmentArgs.builder()\n            .name(\"dev\")\n            .appId(example.id())\n            .type(\"NON_PROD\")\n            .build());\n\n        // Creating a infrastructure of type KUBERNETES\n        var k8s = new InfrastructureDefinition(\"k8s\", InfrastructureDefinitionArgs.builder()\n            .name(\"k8s-eks-us-east-1\")\n            .appId(example.id())\n            .envId(devEnvironment.id())\n            .cloudProviderType(\"KUBERNETES_CLUSTER\")\n            .deploymentType(\"KUBERNETES\")\n            .kubernetes(InfrastructureDefinitionKubernetesArgs.builder()\n                .cloudProviderName(dev.name())\n                .namespace(\"dev\")\n                .releaseName(\"${service.name}\")\n                .build())\n            .build());\n\n        // Creating a Deployment Template for CUSTOM infrastructure type\n        var exampleYaml = new YamlConfig(\"exampleYaml\", YamlConfigArgs.builder()\n            .path(\"Setup/Template Library/Example Folder/deployment_template.yaml\")\n            .content(\"\"\"\nharnessApiVersion: '1.0'\ntype: CUSTOM_DEPLOYMENT_TYPE\nfetchInstanceScript: |-\n  set -ex\n  curl http://${url}/${file_name} \u003e ${INSTANCE_OUTPUT_PATH}\nhostAttributes:\n  hostname: host\nhostObjectArrayPath: hosts\nvariables:\n- name: url\n- name: file_name\n            \"\"\")\n            .build());\n\n        // Creating a infrastructure of type CUSTOM\n        var custom = new InfrastructureDefinition(\"custom\", InfrastructureDefinitionArgs.builder()\n            .name(\"custom-infra\")\n            .appId(example.id())\n            .envId(devEnvironment.id())\n            .cloudProviderType(\"CUSTOM\")\n            .deploymentType(\"CUSTOM\")\n            .deploymentTemplateUri(exampleYaml.name().applyValue(name -\u003e String.format(\"Example Folder/%s\", name)))\n            .custom(InfrastructureDefinitionCustomArgs.builder()\n                .deploymentTypeTemplateVersion(\"1\")\n                .variables(                \n                    InfrastructureDefinitionCustomVariableArgs.builder()\n                        .name(\"url\")\n                        .value(\"localhost:8081\")\n                        .build(),\n                    InfrastructureDefinitionCustomVariableArgs.builder()\n                        .name(\"file_name\")\n                        .value(\"instances.json\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Creating a Kubernetes infrastructure definition\n  dev:\n    type: harness:cloudprovider:Kubernetes\n    properties:\n      name: k8s-dev\n      authentication:\n        delegateSelectors:\n          - k8s\n  example:\n    type: harness:Application\n    properties:\n      name: example\n  devEnvironment:\n    type: harness:Environment\n    name: dev\n    properties:\n      name: dev\n      appId: ${example.id}\n      type: NON_PROD\n  # Creating a infrastructure of type KUBERNETES\n  k8s:\n    type: harness:InfrastructureDefinition\n    properties:\n      name: k8s-eks-us-east-1\n      appId: ${example.id}\n      envId: ${devEnvironment.id}\n      cloudProviderType: KUBERNETES_CLUSTER\n      deploymentType: KUBERNETES\n      kubernetes:\n        cloudProviderName: ${dev.name}\n        namespace: dev\n        releaseName: ${service.name}\n  # Creating a Deployment Template for CUSTOM infrastructure type\n  exampleYaml:\n    type: harness:YamlConfig\n    name: example_yaml\n    properties:\n      path: Setup/Template Library/Example Folder/deployment_template.yaml\n      content: |\n        harnessApiVersion: '1.0'\n        type: CUSTOM_DEPLOYMENT_TYPE\n        fetchInstanceScript: |-\n          set -ex\n          curl http://${url}/${file_name} \u003e ${INSTANCE_OUTPUT_PATH}\n        hostAttributes:\n          hostname: host\n        hostObjectArrayPath: hosts\n        variables:\n        - name: url\n        - name: file_name\n  # Creating a infrastructure of type CUSTOM\n  custom:\n    type: harness:InfrastructureDefinition\n    properties:\n      name: custom-infra\n      appId: ${example.id}\n      envId: ${devEnvironment.id}\n      cloudProviderType: CUSTOM\n      deploymentType: CUSTOM\n      deploymentTemplateUri: Example Folder/${exampleYaml.name}\n      custom:\n        deploymentTypeTemplateVersion: '1'\n        variables:\n          - name: url\n            value: localhost:8081\n          - name: file_name\n            value: instances.json\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness application id, environment id, and infrastructure definition id\n\n```sh\n$ pulumi import harness:index/infrastructureDefinition:InfrastructureDefinition example \u003capp_id\u003e/\u003cenv_id\u003e/\u003cinfradef_id\u003e\n```\n\n",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the infrastructure definition belongs to.\n"
                },
                "awsAmi": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsAmi:InfrastructureDefinitionAwsAmi",
                    "description": "The configuration details for Aws AMI deployments.\n"
                },
                "awsEcs": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsEcs:InfrastructureDefinitionAwsEcs",
                    "description": "The configuration details for Aws AMI deployments.\n"
                },
                "awsLambda": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsLambda:InfrastructureDefinitionAwsLambda",
                    "description": "The configuration details for Aws Lambda deployments.\n"
                },
                "awsSsh": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsSsh:InfrastructureDefinitionAwsSsh",
                    "description": "The configuration details for AWS SSH deployments.\n"
                },
                "awsWinrm": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsWinrm:InfrastructureDefinitionAwsWinrm",
                    "description": "The configuration details for AWS WinRM deployments.\n"
                },
                "azureVmss": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAzureVmss:InfrastructureDefinitionAzureVmss",
                    "description": "The configuration details for Azure VMSS deployments.\n"
                },
                "azureWebapp": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAzureWebapp:InfrastructureDefinitionAzureWebapp",
                    "description": "The configuration details for Azure WebApp deployments.\n"
                },
                "cloudProviderType": {
                    "type": "string",
                    "description": "The type of the cloud provider to connect with. Valid options are AWS, AZURE, CUSTOM, PHYSICAL*DATA*CENTER, KUBERNETES*CLUSTER, PCF, SPOT*INST\n"
                },
                "custom": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionCustom:InfrastructureDefinitionCustom",
                    "description": "The configuration details for Custom deployments.\n"
                },
                "datacenterSsh": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionDatacenterSsh:InfrastructureDefinitionDatacenterSsh",
                    "description": "The configuration details for SSH datacenter deployments.\n"
                },
                "datacenterWinrm": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionDatacenterWinrm:InfrastructureDefinitionDatacenterWinrm",
                    "description": "The configuration details for WinRM datacenter deployments.\n"
                },
                "deploymentTemplateUri": {
                    "type": "string",
                    "description": "The URI of the deployment template to use. Only used if deployment_type is `CUSTOM`.\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The type of the deployment to use. Valid options are AMI, AWS*CODEDEPLOY, AWS*LAMBDA, AZURE*VMSS, AZURE*WEBAPP, CUSTOM, ECS, HELM, KUBERNETES, PCF, SSH, WINRM\n"
                },
                "envId": {
                    "type": "string",
                    "description": "The id of the environment the infrastructure definition belongs to.\n"
                },
                "kubernetes": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionKubernetes:InfrastructureDefinitionKubernetes",
                    "description": "The configuration details for Kubernetes deployments.\n"
                },
                "kubernetesGcp": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionKubernetesGcp:InfrastructureDefinitionKubernetesGcp",
                    "description": "The configuration details for Kubernetes on GCP deployments.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the infrastructure definition\n"
                },
                "provisionerName": {
                    "type": "string",
                    "description": "The name of the infrastructure provisioner to use.\n"
                },
                "scopedServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of service names to scope this infrastructure definition to.\n"
                },
                "tanzu": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionTanzu:InfrastructureDefinitionTanzu",
                    "description": "The configuration details for PCF deployments.\n"
                }
            },
            "required": [
                "appId",
                "cloudProviderType",
                "deploymentType",
                "envId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the infrastructure definition belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "awsAmi": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsAmi:InfrastructureDefinitionAwsAmi",
                    "description": "The configuration details for Aws AMI deployments.\n"
                },
                "awsEcs": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsEcs:InfrastructureDefinitionAwsEcs",
                    "description": "The configuration details for Aws AMI deployments.\n"
                },
                "awsLambda": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsLambda:InfrastructureDefinitionAwsLambda",
                    "description": "The configuration details for Aws Lambda deployments.\n"
                },
                "awsSsh": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsSsh:InfrastructureDefinitionAwsSsh",
                    "description": "The configuration details for AWS SSH deployments.\n"
                },
                "awsWinrm": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAwsWinrm:InfrastructureDefinitionAwsWinrm",
                    "description": "The configuration details for AWS WinRM deployments.\n"
                },
                "azureVmss": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAzureVmss:InfrastructureDefinitionAzureVmss",
                    "description": "The configuration details for Azure VMSS deployments.\n"
                },
                "azureWebapp": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionAzureWebapp:InfrastructureDefinitionAzureWebapp",
                    "description": "The configuration details for Azure WebApp deployments.\n"
                },
                "cloudProviderType": {
                    "type": "string",
                    "description": "The type of the cloud provider to connect with. Valid options are AWS, AZURE, CUSTOM, PHYSICAL*DATA*CENTER, KUBERNETES*CLUSTER, PCF, SPOT*INST\n"
                },
                "custom": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionCustom:InfrastructureDefinitionCustom",
                    "description": "The configuration details for Custom deployments.\n"
                },
                "datacenterSsh": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionDatacenterSsh:InfrastructureDefinitionDatacenterSsh",
                    "description": "The configuration details for SSH datacenter deployments.\n"
                },
                "datacenterWinrm": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionDatacenterWinrm:InfrastructureDefinitionDatacenterWinrm",
                    "description": "The configuration details for WinRM datacenter deployments.\n"
                },
                "deploymentTemplateUri": {
                    "type": "string",
                    "description": "The URI of the deployment template to use. Only used if deployment_type is `CUSTOM`.\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The type of the deployment to use. Valid options are AMI, AWS*CODEDEPLOY, AWS*LAMBDA, AZURE*VMSS, AZURE*WEBAPP, CUSTOM, ECS, HELM, KUBERNETES, PCF, SSH, WINRM\n"
                },
                "envId": {
                    "type": "string",
                    "description": "The id of the environment the infrastructure definition belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "kubernetes": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionKubernetes:InfrastructureDefinitionKubernetes",
                    "description": "The configuration details for Kubernetes deployments.\n"
                },
                "kubernetesGcp": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionKubernetesGcp:InfrastructureDefinitionKubernetesGcp",
                    "description": "The configuration details for Kubernetes on GCP deployments.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the infrastructure definition\n",
                    "willReplaceOnChanges": true
                },
                "provisionerName": {
                    "type": "string",
                    "description": "The name of the infrastructure provisioner to use.\n"
                },
                "scopedServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of service names to scope this infrastructure definition to.\n"
                },
                "tanzu": {
                    "$ref": "#/types/harness:index/InfrastructureDefinitionTanzu:InfrastructureDefinitionTanzu",
                    "description": "The configuration details for PCF deployments.\n"
                }
            },
            "requiredInputs": [
                "appId",
                "cloudProviderType",
                "deploymentType",
                "envId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InfrastructureDefinition resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the infrastructure definition belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "awsAmi": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAwsAmi:InfrastructureDefinitionAwsAmi",
                        "description": "The configuration details for Aws AMI deployments.\n"
                    },
                    "awsEcs": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAwsEcs:InfrastructureDefinitionAwsEcs",
                        "description": "The configuration details for Aws AMI deployments.\n"
                    },
                    "awsLambda": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAwsLambda:InfrastructureDefinitionAwsLambda",
                        "description": "The configuration details for Aws Lambda deployments.\n"
                    },
                    "awsSsh": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAwsSsh:InfrastructureDefinitionAwsSsh",
                        "description": "The configuration details for AWS SSH deployments.\n"
                    },
                    "awsWinrm": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAwsWinrm:InfrastructureDefinitionAwsWinrm",
                        "description": "The configuration details for AWS WinRM deployments.\n"
                    },
                    "azureVmss": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAzureVmss:InfrastructureDefinitionAzureVmss",
                        "description": "The configuration details for Azure VMSS deployments.\n"
                    },
                    "azureWebapp": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionAzureWebapp:InfrastructureDefinitionAzureWebapp",
                        "description": "The configuration details for Azure WebApp deployments.\n"
                    },
                    "cloudProviderType": {
                        "type": "string",
                        "description": "The type of the cloud provider to connect with. Valid options are AWS, AZURE, CUSTOM, PHYSICAL*DATA*CENTER, KUBERNETES*CLUSTER, PCF, SPOT*INST\n"
                    },
                    "custom": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionCustom:InfrastructureDefinitionCustom",
                        "description": "The configuration details for Custom deployments.\n"
                    },
                    "datacenterSsh": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionDatacenterSsh:InfrastructureDefinitionDatacenterSsh",
                        "description": "The configuration details for SSH datacenter deployments.\n"
                    },
                    "datacenterWinrm": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionDatacenterWinrm:InfrastructureDefinitionDatacenterWinrm",
                        "description": "The configuration details for WinRM datacenter deployments.\n"
                    },
                    "deploymentTemplateUri": {
                        "type": "string",
                        "description": "The URI of the deployment template to use. Only used if deployment_type is `CUSTOM`.\n"
                    },
                    "deploymentType": {
                        "type": "string",
                        "description": "The type of the deployment to use. Valid options are AMI, AWS*CODEDEPLOY, AWS*LAMBDA, AZURE*VMSS, AZURE*WEBAPP, CUSTOM, ECS, HELM, KUBERNETES, PCF, SSH, WINRM\n"
                    },
                    "envId": {
                        "type": "string",
                        "description": "The id of the environment the infrastructure definition belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "kubernetes": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionKubernetes:InfrastructureDefinitionKubernetes",
                        "description": "The configuration details for Kubernetes deployments.\n"
                    },
                    "kubernetesGcp": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionKubernetesGcp:InfrastructureDefinitionKubernetesGcp",
                        "description": "The configuration details for Kubernetes on GCP deployments.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the infrastructure definition\n",
                        "willReplaceOnChanges": true
                    },
                    "provisionerName": {
                        "type": "string",
                        "description": "The name of the infrastructure provisioner to use.\n"
                    },
                    "scopedServices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of service names to scope this infrastructure definition to.\n"
                    },
                    "tanzu": {
                        "$ref": "#/types/harness:index/InfrastructureDefinitionTanzu:InfrastructureDefinitionTanzu",
                        "description": "The configuration details for PCF deployments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/platformApiKey:PlatformApiKey": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier for the Entity\n"
                },
                "apikeyType": {
                    "type": "string",
                    "description": "Type of the API Key\n"
                },
                "defaultTimeToExpireToken": {
                    "type": "integer",
                    "description": "Default expiration time of the Token within API Key\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the API Key\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the API Key\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the API Key\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "Parent Entity Identifier of the API Key\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags for the API Key\n"
                }
            },
            "required": [
                "accountId",
                "apikeyType",
                "identifier",
                "name",
                "parentId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier for the Entity\n"
                },
                "apikeyType": {
                    "type": "string",
                    "description": "Type of the API Key\n"
                },
                "defaultTimeToExpireToken": {
                    "type": "integer",
                    "description": "Default expiration time of the Token within API Key\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the API Key\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the API Key\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the API Key\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "Parent Entity Identifier of the API Key\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags for the API Key\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "apikeyType",
                "identifier",
                "parentId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PlatformApiKey resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier for the Entity\n"
                    },
                    "apikeyType": {
                        "type": "string",
                        "description": "Type of the API Key\n"
                    },
                    "defaultTimeToExpireToken": {
                        "type": "integer",
                        "description": "Default expiration time of the Token within API Key\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the API Key\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the API Key\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the API Key\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity\n"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "Parent Entity Identifier of the API Key\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Tags for the API Key\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/platformCcmFilters:PlatformCcmFilters": {
            "description": "Resource for creating a Harness CCM Filters.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.PlatformCcmFilters(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    type: \"CCMRecommendation\",\n    filterProperties: {\n        tags: [\"foo:bar\"],\n        filterType: \"CCMRecommendation\",\n    },\n    filterVisibility: \"EveryOne\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.PlatformCcmFilters(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    type=\"CCMRecommendation\",\n    filter_properties=harness.PlatformCcmFiltersFilterPropertiesArgs(\n        tags=[\"foo:bar\"],\n        filter_type=\"CCMRecommendation\",\n    ),\n    filter_visibility=\"EveryOne\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.PlatformCcmFilters(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Type = \"CCMRecommendation\",\n        FilterProperties = new Harness.Inputs.PlatformCcmFiltersFilterPropertiesArgs\n        {\n            Tags = new[]\n            {\n                \"foo:bar\",\n            },\n            FilterType = \"CCMRecommendation\",\n        },\n        FilterVisibility = \"EveryOne\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.NewPlatformCcmFilters(ctx, \"test\", \u0026harness.PlatformCcmFiltersArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tName:       pulumi.String(\"name\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tType:       pulumi.String(\"CCMRecommendation\"),\n\t\t\tFilterProperties: \u0026harness.PlatformCcmFiltersFilterPropertiesArgs{\n\t\t\t\tTags: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t\t},\n\t\t\t\tFilterType: pulumi.String(\"CCMRecommendation\"),\n\t\t\t},\n\t\t\tFilterVisibility: pulumi.String(\"EveryOne\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.PlatformCcmFilters;\nimport com.pulumi.harness.PlatformCcmFiltersArgs;\nimport com.pulumi.harness.inputs.PlatformCcmFiltersFilterPropertiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new PlatformCcmFilters(\"test\", PlatformCcmFiltersArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .type(\"CCMRecommendation\")\n            .filterProperties(PlatformCcmFiltersFilterPropertiesArgs.builder()\n                .tags(\"foo:bar\")\n                .filterType(\"CCMRecommendation\")\n                .build())\n            .filterVisibility(\"EveryOne\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:PlatformCcmFilters\n    properties:\n      identifier: identifier\n      name: name\n      orgId: org_id\n      projectId: project_id\n      type: CCMRecommendation\n      filterProperties:\n        tags:\n          - foo:bar\n        filterType: CCMRecommendation\n      filterVisibility: EveryOne\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level ccm filter\n\n```sh\n$ pulumi import harness:index/platformCcmFilters:PlatformCcmFilters example \u003cfilter_id\u003e/\u003ctype\u003e\n```\n\nImport org level ccm filter\n\n```sh\n$ pulumi import harness:index/platformCcmFilters:PlatformCcmFilters example \u003cord_id\u003e/\u003cfilter_id\u003e/\u003ctype\u003e\n```\n\nImport project level ccm filter\n\n```sh\n$ pulumi import harness:index/platformCcmFilters:PlatformCcmFilters example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cfilter_id\u003e/\u003ctype\u003e\n```\n\n",
            "properties": {
                "filterProperties": {
                    "$ref": "#/types/harness:index/PlatformCcmFiltersFilterProperties:PlatformCcmFiltersFilterProperties",
                    "description": "Properties of the filters entity defined in Harness.\n"
                },
                "filterVisibility": {
                    "type": "string",
                    "description": "This indicates visibility of filters. By default, everyone can view this filter..\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the ccm filters.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of ccm filters.\n"
                }
            },
            "required": [
                "filterProperties",
                "identifier",
                "name",
                "type"
            ],
            "inputProperties": {
                "filterProperties": {
                    "$ref": "#/types/harness:index/PlatformCcmFiltersFilterProperties:PlatformCcmFiltersFilterProperties",
                    "description": "Properties of the filters entity defined in Harness.\n"
                },
                "filterVisibility": {
                    "type": "string",
                    "description": "This indicates visibility of filters. By default, everyone can view this filter..\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the ccm filters.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of ccm filters.\n"
                }
            },
            "requiredInputs": [
                "filterProperties",
                "identifier",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PlatformCcmFilters resources.\n",
                "properties": {
                    "filterProperties": {
                        "$ref": "#/types/harness:index/PlatformCcmFiltersFilterProperties:PlatformCcmFiltersFilterProperties",
                        "description": "Properties of the filters entity defined in Harness.\n"
                    },
                    "filterVisibility": {
                        "type": "string",
                        "description": "This indicates visibility of filters. By default, everyone can view this filter..\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the ccm filters.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of ccm filters.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/sshCredential:SshCredential": {
            "description": "Resource for creating an encrypted text secret\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\nimport * as tls from \"@pulumi/tls\";\n\nconst harnessDeployKey = new tls.index.PrivateKey(\"harness_deploy_key\", {\n    algorithm: \"RSA\",\n    rsaBits: 4096,\n});\nconst secretManager = harness.getSecretManager({\n    \"default\": true,\n});\nconst mySecret = new harness.EncryptedText(\"my_secret\", {\n    name: \"my_secret\",\n    value: harnessDeployKey.privateKeyPem,\n    secretManagerId: secretManager.then(secretManager =\u003e secretManager.id),\n});\nconst sshCreds = new harness.SshCredential(\"ssh_creds\", {\n    name: \"ssh-test\",\n    sshAuthentication: {\n        port: 22,\n        username: \"git\",\n        inlineSsh: {\n            sshKeyFileId: mySecret.id,\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\nimport pulumi_tls as tls\n\nharness_deploy_key = tls.index.PrivateKey(\"harness_deploy_key\",\n    algorithm=RSA,\n    rsa_bits=4096)\nsecret_manager = harness.get_secret_manager(default=True)\nmy_secret = harness.EncryptedText(\"my_secret\",\n    name=\"my_secret\",\n    value=harness_deploy_key[\"privateKeyPem\"],\n    secret_manager_id=secret_manager.id)\nssh_creds = harness.SshCredential(\"ssh_creds\",\n    name=\"ssh-test\",\n    ssh_authentication=harness.SshCredentialSshAuthenticationArgs(\n        port=22,\n        username=\"git\",\n        inline_ssh=harness.SshCredentialSshAuthenticationInlineSshArgs(\n            ssh_key_file_id=my_secret.id,\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\nusing Tls = Pulumi.Tls;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var harnessDeployKey = new Tls.Index.PrivateKey(\"harness_deploy_key\", new()\n    {\n        Algorithm = \"RSA\",\n        RsaBits = 4096,\n    });\n\n    var secretManager = Harness.GetSecretManager.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var mySecret = new Harness.EncryptedText(\"my_secret\", new()\n    {\n        Name = \"my_secret\",\n        Value = harnessDeployKey.PrivateKeyPem,\n        SecretManagerId = secretManager.Apply(getSecretManagerResult =\u003e getSecretManagerResult.Id),\n    });\n\n    var sshCreds = new Harness.SshCredential(\"ssh_creds\", new()\n    {\n        Name = \"ssh-test\",\n        SshAuthentication = new Harness.Inputs.SshCredentialSshAuthenticationArgs\n        {\n            Port = 22,\n            Username = \"git\",\n            InlineSsh = new Harness.Inputs.SshCredentialSshAuthenticationInlineSshArgs\n            {\n                SshKeyFileId = mySecret.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi-tls/sdk/v1/go/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tharnessDeployKey, err := index.NewPrivateKey(ctx, \"harness_deploy_key\", \u0026index.PrivateKeyArgs{\n\t\t\tAlgorithm: \"RSA\",\n\t\t\tRsaBits:   4096,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsecretManager, err := harness.GetSecretManager(ctx, \u0026harness.GetSecretManagerArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmySecret, err := harness.NewEncryptedText(ctx, \"my_secret\", \u0026harness.EncryptedTextArgs{\n\t\t\tName:            pulumi.String(\"my_secret\"),\n\t\t\tValue:           harnessDeployKey.PrivateKeyPem,\n\t\t\tSecretManagerId: pulumi.String(secretManager.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.NewSshCredential(ctx, \"ssh_creds\", \u0026harness.SshCredentialArgs{\n\t\t\tName: pulumi.String(\"ssh-test\"),\n\t\t\tSshAuthentication: \u0026harness.SshCredentialSshAuthenticationArgs{\n\t\t\t\tPort:     pulumi.Int(22),\n\t\t\t\tUsername: pulumi.String(\"git\"),\n\t\t\t\tInlineSsh: \u0026harness.SshCredentialSshAuthenticationInlineSshArgs{\n\t\t\t\t\tSshKeyFileId: mySecret.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tls.privateKey;\nimport com.pulumi.tls.PrivateKeyArgs;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetSecretManagerArgs;\nimport com.pulumi.harness.EncryptedText;\nimport com.pulumi.harness.EncryptedTextArgs;\nimport com.pulumi.harness.SshCredential;\nimport com.pulumi.harness.SshCredentialArgs;\nimport com.pulumi.harness.inputs.SshCredentialSshAuthenticationArgs;\nimport com.pulumi.harness.inputs.SshCredentialSshAuthenticationInlineSshArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var harnessDeployKey = new PrivateKey(\"harnessDeployKey\", PrivateKeyArgs.builder()\n            .algorithm(\"RSA\")\n            .rsaBits(4096)\n            .build());\n\n        final var secretManager = HarnessFunctions.getSecretManager(GetSecretManagerArgs.builder()\n            .default_(true)\n            .build());\n\n        var mySecret = new EncryptedText(\"mySecret\", EncryptedTextArgs.builder()\n            .name(\"my_secret\")\n            .value(harnessDeployKey.privateKeyPem())\n            .secretManagerId(secretManager.applyValue(getSecretManagerResult -\u003e getSecretManagerResult.id()))\n            .build());\n\n        var sshCreds = new SshCredential(\"sshCreds\", SshCredentialArgs.builder()\n            .name(\"ssh-test\")\n            .sshAuthentication(SshCredentialSshAuthenticationArgs.builder()\n                .port(22)\n                .username(\"git\")\n                .inlineSsh(SshCredentialSshAuthenticationInlineSshArgs.builder()\n                    .sshKeyFileId(mySecret.id())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  harnessDeployKey:\n    type: tls:privateKey\n    name: harness_deploy_key\n    properties:\n      algorithm: RSA\n      rsaBits: 4096\n  mySecret:\n    type: harness:EncryptedText\n    name: my_secret\n    properties:\n      name: my_secret\n      value: ${harnessDeployKey.privateKeyPem}\n      secretManagerId: ${secretManager.id}\n  sshCreds:\n    type: harness:SshCredential\n    name: ssh_creds\n    properties:\n      name: ssh-test\n      sshAuthentication:\n        port: 22\n        username: git\n        inlineSsh:\n          sshKeyFileId: ${mySecret.id}\nvariables:\n  secretManager:\n    fn::invoke:\n      Function: harness:getSecretManager\n      Arguments:\n        default: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness ssh credential id\n\n```sh\n$ pulumi import harness:index/sshCredential:SshCredential example \u003ccredential_id\u003e\n```\n\n",
            "properties": {
                "kerberosAuthentication": {
                    "$ref": "#/types/harness:index/SshCredentialKerberosAuthentication:SshCredentialKerberosAuthentication",
                    "description": "Kerberos authentication for SSH. Cannot be used if ssh*authentication is specified\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the encrypted text secret\n"
                },
                "sshAuthentication": {
                    "$ref": "#/types/harness:index/SshCredentialSshAuthentication:SshCredentialSshAuthentication",
                    "description": "Authentication method for SSH. Cannot be used if kerberos*authentication is specified. Only one of `inline_ssh`, `server_password`, or `ssh_key_file` should be set\n"
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/SshCredentialUsageScope:SshCredentialUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "kerberosAuthentication": {
                    "$ref": "#/types/harness:index/SshCredentialKerberosAuthentication:SshCredentialKerberosAuthentication",
                    "description": "Kerberos authentication for SSH. Cannot be used if ssh*authentication is specified\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the encrypted text secret\n"
                },
                "sshAuthentication": {
                    "$ref": "#/types/harness:index/SshCredentialSshAuthentication:SshCredentialSshAuthentication",
                    "description": "Authentication method for SSH. Cannot be used if kerberos*authentication is specified. Only one of `inline_ssh`, `server_password`, or `ssh_key_file` should be set\n",
                    "willReplaceOnChanges": true
                },
                "usageScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:index/SshCredentialUsageScope:SshCredentialUsageScope"
                    },
                    "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshCredential resources.\n",
                "properties": {
                    "kerberosAuthentication": {
                        "$ref": "#/types/harness:index/SshCredentialKerberosAuthentication:SshCredentialKerberosAuthentication",
                        "description": "Kerberos authentication for SSH. Cannot be used if ssh*authentication is specified\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the encrypted text secret\n"
                    },
                    "sshAuthentication": {
                        "$ref": "#/types/harness:index/SshCredentialSshAuthentication:SshCredentialSshAuthentication",
                        "description": "Authentication method for SSH. Cannot be used if kerberos*authentication is specified. Only one of `inline_ssh`, `server_password`, or `ssh_key_file` should be set\n",
                        "willReplaceOnChanges": true
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/SshCredentialUsageScope:SshCredentialUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/user:User": {
            "description": "Resource for creating a Harness user\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst johnDoe = new harness.User(\"john_doe\", {\n    name: \"John Doe\",\n    email: \"john.doe@example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\njohn_doe = harness.User(\"john_doe\",\n    name=\"John Doe\",\n    email=\"john.doe@example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var johnDoe = new Harness.User(\"john_doe\", new()\n    {\n        Name = \"John Doe\",\n        Email = \"john.doe@example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.NewUser(ctx, \"john_doe\", \u0026harness.UserArgs{\n\t\t\tName:  pulumi.String(\"John Doe\"),\n\t\t\tEmail: pulumi.String(\"john.doe@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.User;\nimport com.pulumi.harness.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var johnDoe = new User(\"johnDoe\", UserArgs.builder()\n            .name(\"John Doe\")\n            .email(\"john.doe@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  johnDoe:\n    type: harness:User\n    name: john_doe\n    properties:\n      name: John Doe\n      email: john.doe@example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the email address of the user\n\n```sh\n$ pulumi import harness:index/user:User john_doe john.doe@example.com\n```\n\n",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n"
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The groups the user belongs to. This is only used during the creation of the user. The groups are not updated after the user is created. When using this option you should also set `lifecycle = { ignore_changes = [\"group_ids\"] }`.\n"
                },
                "isEmailVerified": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the users email has been verified.\n"
                },
                "isImportedFromIdentityProvider": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the user was imported from an identity provider.\n"
                },
                "isPasswordExpired": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the users password has expired.\n"
                },
                "isTwoFactorAuthEnabled": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not two-factor authentication is enabled for the user.\n"
                },
                "isUserLocked": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the user is locked out.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                }
            },
            "required": [
                "email",
                "isEmailVerified",
                "isImportedFromIdentityProvider",
                "isPasswordExpired",
                "isTwoFactorAuthEnabled",
                "isUserLocked",
                "name"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n",
                    "willReplaceOnChanges": true
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The groups the user belongs to. This is only used during the creation of the user. The groups are not updated after the user is created. When using this option you should also set `lifecycle = { ignore_changes = [\"group_ids\"] }`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                }
            },
            "requiredInputs": [
                "email"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The groups the user belongs to. This is only used during the creation of the user. The groups are not updated after the user is created. When using this option you should also set `lifecycle = { ignore_changes = [\"group_ids\"] }`.\n"
                    },
                    "isEmailVerified": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the users email has been verified.\n"
                    },
                    "isImportedFromIdentityProvider": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the user was imported from an identity provider.\n"
                    },
                    "isPasswordExpired": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the users password has expired.\n"
                    },
                    "isTwoFactorAuthEnabled": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not two-factor authentication is enabled for the user.\n"
                    },
                    "isUserLocked": {
                        "type": "boolean",
                        "description": "Flag indicating whether or not the user is locked out.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/userGroup:UserGroup": {
            "description": "Resource for creating a Harness user group\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.UserGroup(\"example\", {\n    name: \"example-group\",\n    description: \"This group demonstrates account level and resource level permissions.\",\n    permissions: {\n        accountPermissions: [\n            \"ADMINISTER_OTHER_ACCOUNT_FUNCTIONS\",\n            \"MANAGE_API_KEYS\",\n        ],\n        appPermissions: {\n            alls: [{\n                actions: [\n                    \"CREATE\",\n                    \"READ\",\n                    \"UPDATE\",\n                    \"DELETE\",\n                ],\n            }],\n            deployments: [\n                {\n                    actions: [\n                        \"READ\",\n                        \"ROLLBACK_WORKFLOW\",\n                        \"EXECUTE_PIPELINE\",\n                        \"EXECUTE_WORKFLOW\",\n                    ],\n                    filters: [\"NON_PRODUCTION_ENVIRONMENTS\"],\n                },\n                {\n                    actions: [\"READ\"],\n                    filters: [\"PRODUCTION_ENVIRONMENTS\"],\n                },\n            ],\n            environments: [\n                {\n                    actions: [\n                        \"CREATE\",\n                        \"READ\",\n                        \"UPDATE\",\n                        \"DELETE\",\n                    ],\n                    filters: [\"NON_PRODUCTION_ENVIRONMENTS\"],\n                },\n                {\n                    actions: [\"READ\"],\n                    filters: [\"PRODUCTION_ENVIRONMENTS\"],\n                },\n            ],\n            pipelines: [\n                {\n                    actions: [\n                        \"CREATE\",\n                        \"READ\",\n                        \"UPDATE\",\n                        \"DELETE\",\n                    ],\n                    filters: [\"NON_PRODUCTION_PIPELINES\"],\n                },\n                {\n                    actions: [\"READ\"],\n                    filters: [\"PRODUCTION_PIPELINES\"],\n                },\n            ],\n            provisioners: [\n                {\n                    actions: [\n                        \"UPDATE\",\n                        \"DELETE\",\n                    ],\n                },\n                {\n                    actions: [\n                        \"CREATE\",\n                        \"READ\",\n                    ],\n                },\n            ],\n            services: [\n                {\n                    actions: [\n                        \"UPDATE\",\n                        \"DELETE\",\n                    ],\n                },\n                {\n                    actions: [\n                        \"UPDATE\",\n                        \"DELETE\",\n                    ],\n                },\n            ],\n            templates: [{\n                actions: [\n                    \"CREATE\",\n                    \"READ\",\n                    \"UPDATE\",\n                    \"DELETE\",\n                ],\n            }],\n            workflows: [\n                {\n                    actions: [\n                        \"UPDATE\",\n                        \"DELETE\",\n                    ],\n                    filters: [\"NON_PRODUCTION_WORKFLOWS\"],\n                },\n                {\n                    actions: [\n                        \"CREATE\",\n                        \"READ\",\n                    ],\n                    filters: [\n                        \"PRODUCTION_WORKFLOWS\",\n                        \"WORKFLOW_TEMPLATES\",\n                    ],\n                },\n            ],\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.UserGroup(\"example\",\n    name=\"example-group\",\n    description=\"This group demonstrates account level and resource level permissions.\",\n    permissions=harness.UserGroupPermissionsArgs(\n        account_permissions=[\n            \"ADMINISTER_OTHER_ACCOUNT_FUNCTIONS\",\n            \"MANAGE_API_KEYS\",\n        ],\n        app_permissions=harness.UserGroupPermissionsAppPermissionsArgs(\n            alls=[harness.UserGroupPermissionsAppPermissionsAllArgs(\n                actions=[\n                    \"CREATE\",\n                    \"READ\",\n                    \"UPDATE\",\n                    \"DELETE\",\n                ],\n            )],\n            deployments=[\n                harness.UserGroupPermissionsAppPermissionsDeploymentArgs(\n                    actions=[\n                        \"READ\",\n                        \"ROLLBACK_WORKFLOW\",\n                        \"EXECUTE_PIPELINE\",\n                        \"EXECUTE_WORKFLOW\",\n                    ],\n                    filters=[\"NON_PRODUCTION_ENVIRONMENTS\"],\n                ),\n                harness.UserGroupPermissionsAppPermissionsDeploymentArgs(\n                    actions=[\"READ\"],\n                    filters=[\"PRODUCTION_ENVIRONMENTS\"],\n                ),\n            ],\n            environments=[\n                harness.UserGroupPermissionsAppPermissionsEnvironmentArgs(\n                    actions=[\n                        \"CREATE\",\n                        \"READ\",\n                        \"UPDATE\",\n                        \"DELETE\",\n                    ],\n                    filters=[\"NON_PRODUCTION_ENVIRONMENTS\"],\n                ),\n                harness.UserGroupPermissionsAppPermissionsEnvironmentArgs(\n                    actions=[\"READ\"],\n                    filters=[\"PRODUCTION_ENVIRONMENTS\"],\n                ),\n            ],\n            pipelines=[\n                harness.UserGroupPermissionsAppPermissionsPipelineArgs(\n                    actions=[\n                        \"CREATE\",\n                        \"READ\",\n                        \"UPDATE\",\n                        \"DELETE\",\n                    ],\n                    filters=[\"NON_PRODUCTION_PIPELINES\"],\n                ),\n                harness.UserGroupPermissionsAppPermissionsPipelineArgs(\n                    actions=[\"READ\"],\n                    filters=[\"PRODUCTION_PIPELINES\"],\n                ),\n            ],\n            provisioners=[\n                harness.UserGroupPermissionsAppPermissionsProvisionerArgs(\n                    actions=[\n                        \"UPDATE\",\n                        \"DELETE\",\n                    ],\n                ),\n                harness.UserGroupPermissionsAppPermissionsProvisionerArgs(\n                    actions=[\n                        \"CREATE\",\n                        \"READ\",\n                    ],\n                ),\n            ],\n            services=[\n                harness.UserGroupPermissionsAppPermissionsServiceArgs(\n                    actions=[\n                        \"UPDATE\",\n                        \"DELETE\",\n                    ],\n                ),\n                harness.UserGroupPermissionsAppPermissionsServiceArgs(\n                    actions=[\n                        \"UPDATE\",\n                        \"DELETE\",\n                    ],\n                ),\n            ],\n            templates=[harness.UserGroupPermissionsAppPermissionsTemplateArgs(\n                actions=[\n                    \"CREATE\",\n                    \"READ\",\n                    \"UPDATE\",\n                    \"DELETE\",\n                ],\n            )],\n            workflows=[\n                harness.UserGroupPermissionsAppPermissionsWorkflowArgs(\n                    actions=[\n                        \"UPDATE\",\n                        \"DELETE\",\n                    ],\n                    filters=[\"NON_PRODUCTION_WORKFLOWS\"],\n                ),\n                harness.UserGroupPermissionsAppPermissionsWorkflowArgs(\n                    actions=[\n                        \"CREATE\",\n                        \"READ\",\n                    ],\n                    filters=[\n                        \"PRODUCTION_WORKFLOWS\",\n                        \"WORKFLOW_TEMPLATES\",\n                    ],\n                ),\n            ],\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.UserGroup(\"example\", new()\n    {\n        Name = \"example-group\",\n        Description = \"This group demonstrates account level and resource level permissions.\",\n        Permissions = new Harness.Inputs.UserGroupPermissionsArgs\n        {\n            AccountPermissions = new[]\n            {\n                \"ADMINISTER_OTHER_ACCOUNT_FUNCTIONS\",\n                \"MANAGE_API_KEYS\",\n            },\n            AppPermissions = new Harness.Inputs.UserGroupPermissionsAppPermissionsArgs\n            {\n                Alls = new[]\n                {\n                    new Harness.Inputs.UserGroupPermissionsAppPermissionsAllArgs\n                    {\n                        Actions = new[]\n                        {\n                            \"CREATE\",\n                            \"READ\",\n                            \"UPDATE\",\n                            \"DELETE\",\n                        },\n                    },\n                },\n                Deployments = new[]\n                {\n                    new Harness.Inputs.UserGroupPermissionsAppPermissionsDeploymentArgs\n                    {\n                        Actions = new[]\n                        {\n                            \"READ\",\n                            \"ROLLBACK_WORKFLOW\",\n                            \"EXECUTE_PIPELINE\",\n                            \"EXECUTE_WORKFLOW\",\n                        },\n                        Filters = new[]\n                        {\n                            \"NON_PRODUCTION_ENVIRONMENTS\",\n                        },\n                    },\n                    new Harness.Inputs.UserGroupPermissionsAppPermissionsDeploymentArgs\n                    {\n                        Actions = new[]\n                        {\n                            \"READ\",\n                        },\n                        Filters = new[]\n                        {\n                            \"PRODUCTION_ENVIRONMENTS\",\n                        },\n                    },\n                },\n                Environments = new[]\n                {\n                    new Harness.Inputs.UserGroupPermissionsAppPermissionsEnvironmentArgs\n                    {\n                        Actions = new[]\n                        {\n                            \"CREATE\",\n                            \"READ\",\n                            \"UPDATE\",\n                            \"DELETE\",\n                        },\n                        Filters = new[]\n                        {\n                            \"NON_PRODUCTION_ENVIRONMENTS\",\n                        },\n                    },\n                    new Harness.Inputs.UserGroupPermissionsAppPermissionsEnvironmentArgs\n                    {\n                        Actions = new[]\n                        {\n                            \"READ\",\n                        },\n                        Filters = new[]\n                        {\n                            \"PRODUCTION_ENVIRONMENTS\",\n                        },\n                    },\n                },\n                Pipelines = new[]\n                {\n                    new Harness.Inputs.UserGroupPermissionsAppPermissionsPipelineArgs\n                    {\n                        Actions = new[]\n                        {\n                            \"CREATE\",\n                            \"READ\",\n                            \"UPDATE\",\n                            \"DELETE\",\n                        },\n                        Filters = new[]\n                        {\n                            \"NON_PRODUCTION_PIPELINES\",\n                        },\n                    },\n                    new Harness.Inputs.UserGroupPermissionsAppPermissionsPipelineArgs\n                    {\n                        Actions = new[]\n                        {\n                            \"READ\",\n                        },\n                        Filters = new[]\n                        {\n                            \"PRODUCTION_PIPELINES\",\n                        },\n                    },\n                },\n                Provisioners = new[]\n                {\n                    new Harness.Inputs.UserGroupPermissionsAppPermissionsProvisionerArgs\n                    {\n                        Actions = new[]\n                        {\n                            \"UPDATE\",\n                            \"DELETE\",\n                        },\n                    },\n                    new Harness.Inputs.UserGroupPermissionsAppPermissionsProvisionerArgs\n                    {\n                        Actions = new[]\n                        {\n                            \"CREATE\",\n                            \"READ\",\n                        },\n                    },\n                },\n                Services = new[]\n                {\n                    new Harness.Inputs.UserGroupPermissionsAppPermissionsServiceArgs\n                    {\n                        Actions = new[]\n                        {\n                            \"UPDATE\",\n                            \"DELETE\",\n                        },\n                    },\n                    new Harness.Inputs.UserGroupPermissionsAppPermissionsServiceArgs\n                    {\n                        Actions = new[]\n                        {\n                            \"UPDATE\",\n                            \"DELETE\",\n                        },\n                    },\n                },\n                Templates = new[]\n                {\n                    new Harness.Inputs.UserGroupPermissionsAppPermissionsTemplateArgs\n                    {\n                        Actions = new[]\n                        {\n                            \"CREATE\",\n                            \"READ\",\n                            \"UPDATE\",\n                            \"DELETE\",\n                        },\n                    },\n                },\n                Workflows = new[]\n                {\n                    new Harness.Inputs.UserGroupPermissionsAppPermissionsWorkflowArgs\n                    {\n                        Actions = new[]\n                        {\n                            \"UPDATE\",\n                            \"DELETE\",\n                        },\n                        Filters = new[]\n                        {\n                            \"NON_PRODUCTION_WORKFLOWS\",\n                        },\n                    },\n                    new Harness.Inputs.UserGroupPermissionsAppPermissionsWorkflowArgs\n                    {\n                        Actions = new[]\n                        {\n                            \"CREATE\",\n                            \"READ\",\n                        },\n                        Filters = new[]\n                        {\n                            \"PRODUCTION_WORKFLOWS\",\n                            \"WORKFLOW_TEMPLATES\",\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.NewUserGroup(ctx, \"example\", \u0026harness.UserGroupArgs{\n\t\t\tName:        pulumi.String(\"example-group\"),\n\t\t\tDescription: pulumi.String(\"This group demonstrates account level and resource level permissions.\"),\n\t\t\tPermissions: \u0026harness.UserGroupPermissionsTypeArgs{\n\t\t\t\tAccountPermissions: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ADMINISTER_OTHER_ACCOUNT_FUNCTIONS\"),\n\t\t\t\t\tpulumi.String(\"MANAGE_API_KEYS\"),\n\t\t\t\t},\n\t\t\t\tAppPermissions: \u0026harness.UserGroupPermissionsAppPermissionsArgs{\n\t\t\t\t\tAlls: harness.UserGroupPermissionsAppPermissionsAllArray{\n\t\t\t\t\t\t\u0026harness.UserGroupPermissionsAppPermissionsAllArgs{\n\t\t\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"CREATE\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"READ\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"UPDATE\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"DELETE\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tDeployments: harness.UserGroupPermissionsAppPermissionsDeploymentArray{\n\t\t\t\t\t\t\u0026harness.UserGroupPermissionsAppPermissionsDeploymentArgs{\n\t\t\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"READ\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"ROLLBACK_WORKFLOW\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"EXECUTE_PIPELINE\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"EXECUTE_WORKFLOW\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tFilters: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"NON_PRODUCTION_ENVIRONMENTS\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026harness.UserGroupPermissionsAppPermissionsDeploymentArgs{\n\t\t\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"READ\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tFilters: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"PRODUCTION_ENVIRONMENTS\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tEnvironments: harness.UserGroupPermissionsAppPermissionsEnvironmentArray{\n\t\t\t\t\t\t\u0026harness.UserGroupPermissionsAppPermissionsEnvironmentArgs{\n\t\t\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"CREATE\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"READ\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"UPDATE\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"DELETE\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tFilters: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"NON_PRODUCTION_ENVIRONMENTS\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026harness.UserGroupPermissionsAppPermissionsEnvironmentArgs{\n\t\t\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"READ\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tFilters: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"PRODUCTION_ENVIRONMENTS\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tPipelines: harness.UserGroupPermissionsAppPermissionsPipelineArray{\n\t\t\t\t\t\t\u0026harness.UserGroupPermissionsAppPermissionsPipelineArgs{\n\t\t\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"CREATE\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"READ\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"UPDATE\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"DELETE\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tFilters: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"NON_PRODUCTION_PIPELINES\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026harness.UserGroupPermissionsAppPermissionsPipelineArgs{\n\t\t\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"READ\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tFilters: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"PRODUCTION_PIPELINES\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tProvisioners: harness.UserGroupPermissionsAppPermissionsProvisionerArray{\n\t\t\t\t\t\t\u0026harness.UserGroupPermissionsAppPermissionsProvisionerArgs{\n\t\t\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"UPDATE\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"DELETE\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026harness.UserGroupPermissionsAppPermissionsProvisionerArgs{\n\t\t\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"CREATE\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"READ\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tServices: harness.UserGroupPermissionsAppPermissionsServiceArray{\n\t\t\t\t\t\t\u0026harness.UserGroupPermissionsAppPermissionsServiceArgs{\n\t\t\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"UPDATE\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"DELETE\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026harness.UserGroupPermissionsAppPermissionsServiceArgs{\n\t\t\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"UPDATE\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"DELETE\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tTemplates: harness.UserGroupPermissionsAppPermissionsTemplateArray{\n\t\t\t\t\t\t\u0026harness.UserGroupPermissionsAppPermissionsTemplateArgs{\n\t\t\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"CREATE\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"READ\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"UPDATE\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"DELETE\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tWorkflows: harness.UserGroupPermissionsAppPermissionsWorkflowArray{\n\t\t\t\t\t\t\u0026harness.UserGroupPermissionsAppPermissionsWorkflowArgs{\n\t\t\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"UPDATE\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"DELETE\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tFilters: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"NON_PRODUCTION_WORKFLOWS\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026harness.UserGroupPermissionsAppPermissionsWorkflowArgs{\n\t\t\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"CREATE\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"READ\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tFilters: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"PRODUCTION_WORKFLOWS\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"WORKFLOW_TEMPLATES\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.UserGroup;\nimport com.pulumi.harness.UserGroupArgs;\nimport com.pulumi.harness.inputs.UserGroupPermissionsArgs;\nimport com.pulumi.harness.inputs.UserGroupPermissionsAppPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new UserGroup(\"example\", UserGroupArgs.builder()\n            .name(\"example-group\")\n            .description(\"This group demonstrates account level and resource level permissions.\")\n            .permissions(UserGroupPermissionsArgs.builder()\n                .accountPermissions(                \n                    \"ADMINISTER_OTHER_ACCOUNT_FUNCTIONS\",\n                    \"MANAGE_API_KEYS\")\n                .appPermissions(UserGroupPermissionsAppPermissionsArgs.builder()\n                    .alls(UserGroupPermissionsAppPermissionsAllArgs.builder()\n                        .actions(                        \n                            \"CREATE\",\n                            \"READ\",\n                            \"UPDATE\",\n                            \"DELETE\")\n                        .build())\n                    .deployments(                    \n                        UserGroupPermissionsAppPermissionsDeploymentArgs.builder()\n                            .actions(                            \n                                \"READ\",\n                                \"ROLLBACK_WORKFLOW\",\n                                \"EXECUTE_PIPELINE\",\n                                \"EXECUTE_WORKFLOW\")\n                            .filters(\"NON_PRODUCTION_ENVIRONMENTS\")\n                            .build(),\n                        UserGroupPermissionsAppPermissionsDeploymentArgs.builder()\n                            .actions(\"READ\")\n                            .filters(\"PRODUCTION_ENVIRONMENTS\")\n                            .build())\n                    .environments(                    \n                        UserGroupPermissionsAppPermissionsEnvironmentArgs.builder()\n                            .actions(                            \n                                \"CREATE\",\n                                \"READ\",\n                                \"UPDATE\",\n                                \"DELETE\")\n                            .filters(\"NON_PRODUCTION_ENVIRONMENTS\")\n                            .build(),\n                        UserGroupPermissionsAppPermissionsEnvironmentArgs.builder()\n                            .actions(\"READ\")\n                            .filters(\"PRODUCTION_ENVIRONMENTS\")\n                            .build())\n                    .pipelines(                    \n                        UserGroupPermissionsAppPermissionsPipelineArgs.builder()\n                            .actions(                            \n                                \"CREATE\",\n                                \"READ\",\n                                \"UPDATE\",\n                                \"DELETE\")\n                            .filters(\"NON_PRODUCTION_PIPELINES\")\n                            .build(),\n                        UserGroupPermissionsAppPermissionsPipelineArgs.builder()\n                            .actions(\"READ\")\n                            .filters(\"PRODUCTION_PIPELINES\")\n                            .build())\n                    .provisioners(                    \n                        UserGroupPermissionsAppPermissionsProvisionerArgs.builder()\n                            .actions(                            \n                                \"UPDATE\",\n                                \"DELETE\")\n                            .build(),\n                        UserGroupPermissionsAppPermissionsProvisionerArgs.builder()\n                            .actions(                            \n                                \"CREATE\",\n                                \"READ\")\n                            .build())\n                    .services(                    \n                        UserGroupPermissionsAppPermissionsServiceArgs.builder()\n                            .actions(                            \n                                \"UPDATE\",\n                                \"DELETE\")\n                            .build(),\n                        UserGroupPermissionsAppPermissionsServiceArgs.builder()\n                            .actions(                            \n                                \"UPDATE\",\n                                \"DELETE\")\n                            .build())\n                    .templates(UserGroupPermissionsAppPermissionsTemplateArgs.builder()\n                        .actions(                        \n                            \"CREATE\",\n                            \"READ\",\n                            \"UPDATE\",\n                            \"DELETE\")\n                        .build())\n                    .workflows(                    \n                        UserGroupPermissionsAppPermissionsWorkflowArgs.builder()\n                            .actions(                            \n                                \"UPDATE\",\n                                \"DELETE\")\n                            .filters(\"NON_PRODUCTION_WORKFLOWS\")\n                            .build(),\n                        UserGroupPermissionsAppPermissionsWorkflowArgs.builder()\n                            .actions(                            \n                                \"CREATE\",\n                                \"READ\")\n                            .filters(                            \n                                \"PRODUCTION_WORKFLOWS\",\n                                \"WORKFLOW_TEMPLATES\")\n                            .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:UserGroup\n    properties:\n      name: example-group\n      description: This group demonstrates account level and resource level permissions.\n      permissions:\n        accountPermissions:\n          - ADMINISTER_OTHER_ACCOUNT_FUNCTIONS\n          - MANAGE_API_KEYS\n        appPermissions:\n          alls:\n            - actions:\n                - CREATE\n                - READ\n                - UPDATE\n                - DELETE\n          deployments:\n            - actions:\n                - READ\n                - ROLLBACK_WORKFLOW\n                - EXECUTE_PIPELINE\n                - EXECUTE_WORKFLOW\n              filters:\n                - NON_PRODUCTION_ENVIRONMENTS\n            - actions:\n                - READ\n              filters:\n                - PRODUCTION_ENVIRONMENTS\n          environments:\n            - actions:\n                - CREATE\n                - READ\n                - UPDATE\n                - DELETE\n              filters:\n                - NON_PRODUCTION_ENVIRONMENTS\n            - actions:\n                - READ\n              filters:\n                - PRODUCTION_ENVIRONMENTS\n          pipelines:\n            - actions:\n                - CREATE\n                - READ\n                - UPDATE\n                - DELETE\n              filters:\n                - NON_PRODUCTION_PIPELINES\n            - actions:\n                - READ\n              filters:\n                - PRODUCTION_PIPELINES\n          provisioners:\n            - actions:\n                - UPDATE\n                - DELETE\n            - actions:\n                - CREATE\n                - READ\n          services:\n            - actions:\n                - UPDATE\n                - DELETE\n            - actions:\n                - UPDATE\n                - DELETE\n          templates:\n            - actions:\n                - CREATE\n                - READ\n                - UPDATE\n                - DELETE\n          workflows:\n            - actions:\n                - UPDATE\n                - DELETE\n              filters:\n                - NON_PRODUCTION_WORKFLOWS\n            - actions:\n                - CREATE\n                - READ\n              filters:\n                - PRODUCTION_WORKFLOWS\n                - WORKFLOW_TEMPLATES\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the id of the user group\n\n```sh\n$ pulumi import harness:index/userGroup:UserGroup example \u003cUSER_GROUP_ID\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the user group.\n"
                },
                "importedByScim": {
                    "type": "boolean",
                    "description": "Indicates whether the user group was imported by SCIM.\n"
                },
                "isSsoLinked": {
                    "type": "boolean",
                    "description": "Indicates whether the user group is linked to an SSO provider.\n"
                },
                "ldapSettings": {
                    "$ref": "#/types/harness:index/UserGroupLdapSettings:UserGroupLdapSettings",
                    "description": "The LDAP settings for the user group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user group.\n"
                },
                "notificationSettings": {
                    "$ref": "#/types/harness:index/UserGroupNotificationSettings:UserGroupNotificationSettings",
                    "description": "The notification settings of the user group.\n"
                },
                "permissions": {
                    "$ref": "#/types/harness:index/UserGroupPermissions:UserGroupPermissions",
                    "description": "The permissions of the user group.\n"
                },
                "samlSettings": {
                    "$ref": "#/types/harness:index/UserGroupSamlSettings:UserGroupSamlSettings",
                    "description": "The SAML settings for the user group.\n"
                }
            },
            "required": [
                "importedByScim",
                "isSsoLinked",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the user group.\n",
                    "willReplaceOnChanges": true
                },
                "ldapSettings": {
                    "$ref": "#/types/harness:index/UserGroupLdapSettings:UserGroupLdapSettings",
                    "description": "The LDAP settings for the user group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user group.\n",
                    "willReplaceOnChanges": true
                },
                "notificationSettings": {
                    "$ref": "#/types/harness:index/UserGroupNotificationSettings:UserGroupNotificationSettings",
                    "description": "The notification settings of the user group.\n"
                },
                "permissions": {
                    "$ref": "#/types/harness:index/UserGroupPermissions:UserGroupPermissions",
                    "description": "The permissions of the user group.\n"
                },
                "samlSettings": {
                    "$ref": "#/types/harness:index/UserGroupSamlSettings:UserGroupSamlSettings",
                    "description": "The SAML settings for the user group.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the user group.\n",
                        "willReplaceOnChanges": true
                    },
                    "importedByScim": {
                        "type": "boolean",
                        "description": "Indicates whether the user group was imported by SCIM.\n"
                    },
                    "isSsoLinked": {
                        "type": "boolean",
                        "description": "Indicates whether the user group is linked to an SSO provider.\n"
                    },
                    "ldapSettings": {
                        "$ref": "#/types/harness:index/UserGroupLdapSettings:UserGroupLdapSettings",
                        "description": "The LDAP settings for the user group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user group.\n",
                        "willReplaceOnChanges": true
                    },
                    "notificationSettings": {
                        "$ref": "#/types/harness:index/UserGroupNotificationSettings:UserGroupNotificationSettings",
                        "description": "The notification settings of the user group.\n"
                    },
                    "permissions": {
                        "$ref": "#/types/harness:index/UserGroupPermissions:UserGroupPermissions",
                        "description": "The permissions of the user group.\n"
                    },
                    "samlSettings": {
                        "$ref": "#/types/harness:index/UserGroupSamlSettings:UserGroupSamlSettings",
                        "description": "The SAML settings for the user group.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/userGroupPermissions:UserGroupPermissions": {
            "description": "Resource for adding permissions to an existing Harness user group.\n",
            "properties": {
                "accountPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS\n"
                },
                "appPermissions": {
                    "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissions:UserGroupPermissionsAppPermissions",
                    "description": "Application specific permissions\n"
                },
                "userGroupId": {
                    "type": "string",
                    "description": "Unique identifier of the user group.\n"
                }
            },
            "required": [
                "userGroupId"
            ],
            "inputProperties": {
                "accountPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS\n"
                },
                "appPermissions": {
                    "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissions:UserGroupPermissionsAppPermissions",
                    "description": "Application specific permissions\n"
                },
                "userGroupId": {
                    "type": "string",
                    "description": "Unique identifier of the user group.\n"
                }
            },
            "requiredInputs": [
                "userGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserGroupPermissions resources.\n",
                "properties": {
                    "accountPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The account permissions of the user group. Valid options are ADMINISTER*OTHER*ACCOUNT*FUNCTIONS, CREATE*AND*DELETE*APPLICATION, CREATE*CUSTOM*DASHBOARDS, MANAGE*ALERT*NOTIFICATION*RULES, MANAGE*API*KEYS, MANAGE*APPLICATION*STACKS, MANAGE*AUTHENTICATION*SETTINGS, MANAGE*CLOUD*PROVIDERS, MANAGE*CONFIG*AS*CODE, MANAGE*CONNECTORS, MANAGE*CUSTOM*DASHBOARDS, MANAGE*DELEGATE*PROFILES, MANAGE*DELEGATES, MANAGE*DEPLOYMENT*FREEZES, MANAGE*IP*WHITELIST, MANAGE*PIPELINE*GOVERNANCE*STANDARDS, MANAGE*RESTRICTED*ACCESS, MANAGE*SECRET*MANAGERS, MANAGE*SECRETS, MANAGE*SSH*AND*WINRM, MANAGE*TAGS, MANAGE*TEMPLATE*LIBRARY, MANAGE*USER*AND*USER*GROUPS*AND*API*KEYS, MANAGE*USERS*AND*GROUPS, READ*USERS*AND*GROUPS, VIEW*AUDITS, VIEW*USER*AND*USER*GROUPS*AND*API_KEYS\n"
                    },
                    "appPermissions": {
                        "$ref": "#/types/harness:index/UserGroupPermissionsAppPermissions:UserGroupPermissionsAppPermissions",
                        "description": "Application specific permissions\n"
                    },
                    "userGroupId": {
                        "type": "string",
                        "description": "Unique identifier of the user group.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/yamlConfig:YamlConfig": {
            "description": "Resource for creating a raw YAML configuration in Harness. Note: This works for all objects EXCEPT application objects. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.YamlConfig(\"test\", {\n    path: \"Setup/Cloud Providers/Kubernetes.yaml\",\n    content: `harnessApiVersion: '1.0'\ntype: KUBERNETES_CLUSTER\ndelegateSelectors:\n- k8s\nskipValidation: true\nuseKubernetesDelegate: true\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.YamlConfig(\"test\",\n    path=\"Setup/Cloud Providers/Kubernetes.yaml\",\n    content=\"\"\"harnessApiVersion: '1.0'\ntype: KUBERNETES_CLUSTER\ndelegateSelectors:\n- k8s\nskipValidation: true\nuseKubernetesDelegate: true\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.YamlConfig(\"test\", new()\n    {\n        Path = \"Setup/Cloud Providers/Kubernetes.yaml\",\n        Content = @\"harnessApiVersion: '1.0'\ntype: KUBERNETES_CLUSTER\ndelegateSelectors:\n- k8s\nskipValidation: true\nuseKubernetesDelegate: true\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.NewYamlConfig(ctx, \"test\", \u0026harness.YamlConfigArgs{\n\t\t\tPath: pulumi.String(\"Setup/Cloud Providers/Kubernetes.yaml\"),\n\t\t\tContent: pulumi.String(`harnessApiVersion: '1.0'\ntype: KUBERNETES_CLUSTER\ndelegateSelectors:\n- k8s\nskipValidation: true\nuseKubernetesDelegate: true\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.YamlConfig;\nimport com.pulumi.harness.YamlConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new YamlConfig(\"test\", YamlConfigArgs.builder()\n            .path(\"Setup/Cloud Providers/Kubernetes.yaml\")\n            .content(\"\"\"\nharnessApiVersion: '1.0'\ntype: KUBERNETES_CLUSTER\ndelegateSelectors:\n- k8s\nskipValidation: true\nuseKubernetesDelegate: true\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:YamlConfig\n    properties:\n      path: Setup/Cloud Providers/Kubernetes.yaml\n      content: |\n        harnessApiVersion: '1.0'\n        type: KUBERNETES_CLUSTER\n        delegateSelectors:\n        - k8s\n        skipValidation: true\n        useKubernetesDelegate: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImporting a global config only using the yaml path\n\n```sh\n$ pulumi import harness:index/yamlConfig:YamlConfig k8s_cloudprovider \"Setup/Cloud Providers/kubernetes.yaml\"\n```\n\nImporting a service which requires both the application id and the yaml path.\n\n```sh\n$ pulumi import harness:index/yamlConfig:YamlConfig k8s_cloudprovider \"Setup/Applications/MyApp/Services/MyService/Index.yaml:\u003cAPPLICATION_ID\u003e\"\n```\n\n",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application. This is required for all resources except global ones.\n"
                },
                "content": {
                    "type": "string",
                    "description": "The raw YAML configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the resource.\n"
                }
            },
            "required": [
                "content",
                "name",
                "path"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application. This is required for all resources except global ones.\n",
                    "willReplaceOnChanges": true
                },
                "content": {
                    "type": "string",
                    "description": "The raw YAML configuration.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path of the resource.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "content",
                "path"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering YamlConfig resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application. This is required for all resources except global ones.\n",
                        "willReplaceOnChanges": true
                    },
                    "content": {
                        "type": "string",
                        "description": "The raw YAML configuration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the resource.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path of the resource.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/appDynamicsConnector:AppDynamicsConnector": {
            "description": "Resource for creating an App Dynamics connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\n// Authentication mechanism as api token\nconst token = new harness.platform.AppDynamicsConnector(\"token\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    url: \"https://appdynamics.com/\",\n    accountName: \"myaccount\",\n    delegateSelectors: [\"harness-delegate\"],\n    apiToken: {\n        clientId: \"client_id\",\n        clientSecretRef: \"account.secret_id\",\n    },\n});\n// Authentication mechanism as username and password\nconst test = new harness.platform.AppDynamicsConnector(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    url: \"https://appdynamics.com/\",\n    accountName: \"myaccount\",\n    delegateSelectors: [\"harness-delegate\"],\n    usernamePassword: {\n        username: \"username\",\n        passwordRef: \"account.secret_id\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\n# Authentication mechanism as api token\ntoken = harness.platform.AppDynamicsConnector(\"token\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    url=\"https://appdynamics.com/\",\n    account_name=\"myaccount\",\n    delegate_selectors=[\"harness-delegate\"],\n    api_token=harness.platform.AppDynamicsConnectorApiTokenArgs(\n        client_id=\"client_id\",\n        client_secret_ref=\"account.secret_id\",\n    ))\n# Authentication mechanism as username and password\ntest = harness.platform.AppDynamicsConnector(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    url=\"https://appdynamics.com/\",\n    account_name=\"myaccount\",\n    delegate_selectors=[\"harness-delegate\"],\n    username_password=harness.platform.AppDynamicsConnectorUsernamePasswordArgs(\n        username=\"username\",\n        password_ref=\"account.secret_id\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Authentication mechanism as api token\n    var token = new Harness.Platform.AppDynamicsConnector(\"token\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://appdynamics.com/\",\n        AccountName = \"myaccount\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        ApiToken = new Harness.Platform.Inputs.AppDynamicsConnectorApiTokenArgs\n        {\n            ClientId = \"client_id\",\n            ClientSecretRef = \"account.secret_id\",\n        },\n    });\n\n    // Authentication mechanism as username and password\n    var test = new Harness.Platform.AppDynamicsConnector(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://appdynamics.com/\",\n        AccountName = \"myaccount\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        UsernamePassword = new Harness.Platform.Inputs.AppDynamicsConnectorUsernamePasswordArgs\n        {\n            Username = \"username\",\n            PasswordRef = \"account.secret_id\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Authentication mechanism as api token\n\t\t_, err := platform.NewAppDynamicsConnector(ctx, \"token\", \u0026platform.AppDynamicsConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl:         pulumi.String(\"https://appdynamics.com/\"),\n\t\t\tAccountName: pulumi.String(\"myaccount\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tApiToken: \u0026platform.AppDynamicsConnectorApiTokenArgs{\n\t\t\t\tClientId:        pulumi.String(\"client_id\"),\n\t\t\t\tClientSecretRef: pulumi.String(\"account.secret_id\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Authentication mechanism as username and password\n\t\t_, err = platform.NewAppDynamicsConnector(ctx, \"test\", \u0026platform.AppDynamicsConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl:         pulumi.String(\"https://appdynamics.com/\"),\n\t\t\tAccountName: pulumi.String(\"myaccount\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tUsernamePassword: \u0026platform.AppDynamicsConnectorUsernamePasswordArgs{\n\t\t\t\tUsername:    pulumi.String(\"username\"),\n\t\t\t\tPasswordRef: pulumi.String(\"account.secret_id\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.AppDynamicsConnector;\nimport com.pulumi.harness.platform.AppDynamicsConnectorArgs;\nimport com.pulumi.harness.platform.inputs.AppDynamicsConnectorApiTokenArgs;\nimport com.pulumi.harness.platform.inputs.AppDynamicsConnectorUsernamePasswordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Authentication mechanism as api token\n        var token = new AppDynamicsConnector(\"token\", AppDynamicsConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .url(\"https://appdynamics.com/\")\n            .accountName(\"myaccount\")\n            .delegateSelectors(\"harness-delegate\")\n            .apiToken(AppDynamicsConnectorApiTokenArgs.builder()\n                .clientId(\"client_id\")\n                .clientSecretRef(\"account.secret_id\")\n                .build())\n            .build());\n\n        // Authentication mechanism as username and password\n        var test = new AppDynamicsConnector(\"test\", AppDynamicsConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .url(\"https://appdynamics.com/\")\n            .accountName(\"myaccount\")\n            .delegateSelectors(\"harness-delegate\")\n            .usernamePassword(AppDynamicsConnectorUsernamePasswordArgs.builder()\n                .username(\"username\")\n                .passwordRef(\"account.secret_id\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Authentication mechanism as api token\n  token:\n    type: harness:platform:AppDynamicsConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      url: https://appdynamics.com/\n      accountName: myaccount\n      delegateSelectors:\n        - harness-delegate\n      apiToken:\n        clientId: client_id\n        clientSecretRef: account.secret_id\n  # Authentication mechanism as username and password\n  test:\n    type: harness:platform:AppDynamicsConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      url: https://appdynamics.com/\n      accountName: myaccount\n      delegateSelectors:\n        - harness-delegate\n      usernamePassword:\n        username: username\n        passwordRef: account.secret_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level appdynamics connector \n\n```sh\n$ pulumi import harness:platform/appDynamicsConnector:AppDynamicsConnector example \u003cconnector_id\u003e\n```\n\nImport org level appdynamics connector \n\n```sh\n$ pulumi import harness:platform/appDynamicsConnector:AppDynamicsConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level appdynamics connector \n\n```sh\n$ pulumi import harness:platform/appDynamicsConnector:AppDynamicsConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "The App Dynamics account name.\n"
                },
                "apiToken": {
                    "$ref": "#/types/harness:platform/AppDynamicsConnectorApiToken:AppDynamicsConnectorApiToken",
                    "description": "Authenticate to App Dynamics using api token.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the App Dynamics controller.\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:platform/AppDynamicsConnectorUsernamePassword:AppDynamicsConnectorUsernamePassword",
                    "description": "Authenticate to App Dynamics using username and password.\n"
                }
            },
            "required": [
                "accountName",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "accountName": {
                    "type": "string",
                    "description": "The App Dynamics account name.\n"
                },
                "apiToken": {
                    "$ref": "#/types/harness:platform/AppDynamicsConnectorApiToken:AppDynamicsConnectorApiToken",
                    "description": "Authenticate to App Dynamics using api token.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the App Dynamics controller.\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:platform/AppDynamicsConnectorUsernamePassword:AppDynamicsConnectorUsernamePassword",
                    "description": "Authenticate to App Dynamics using username and password.\n"
                }
            },
            "requiredInputs": [
                "accountName",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppDynamicsConnector resources.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "The App Dynamics account name.\n"
                    },
                    "apiToken": {
                        "$ref": "#/types/harness:platform/AppDynamicsConnectorApiToken:AppDynamicsConnectorApiToken",
                        "description": "Authenticate to App Dynamics using api token.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the App Dynamics controller.\n"
                    },
                    "usernamePassword": {
                        "$ref": "#/types/harness:platform/AppDynamicsConnectorUsernamePassword:AppDynamicsConnectorUsernamePassword",
                        "description": "Authenticate to App Dynamics using username and password.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/artifactoryConnector:ArtifactoryConnector": {
            "description": "Resource for creating an Artifactory connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\n// Authentication mechanism as username and password\nconst example = new harness.platform.ArtifactoryConnector(\"example\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    orgId: testHarnessPlatformProject.orgId,\n    projectId: testHarnessPlatformProject.id,\n    url: \"https://artifactory.example.com\",\n    delegateSelectors: [\"harness-delegate\"],\n    credentials: {\n        username: \"admin\",\n        passwordRef: \"account.secret_id\",\n    },\n});\n// Authentication mechanism as anonymous\nconst test = new harness.platform.ArtifactoryConnector(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    orgId: testHarnessPlatformProject.orgId,\n    projectId: testHarnessPlatformProject.id,\n    url: \"https://artifactory.example.com\",\n    delegateSelectors: [\"harness-delegate\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\n# Authentication mechanism as username and password\nexample = harness.platform.ArtifactoryConnector(\"example\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    org_id=test_harness_platform_project[\"orgId\"],\n    project_id=test_harness_platform_project[\"id\"],\n    url=\"https://artifactory.example.com\",\n    delegate_selectors=[\"harness-delegate\"],\n    credentials=harness.platform.ArtifactoryConnectorCredentialsArgs(\n        username=\"admin\",\n        password_ref=\"account.secret_id\",\n    ))\n# Authentication mechanism as anonymous\ntest = harness.platform.ArtifactoryConnector(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    org_id=test_harness_platform_project[\"orgId\"],\n    project_id=test_harness_platform_project[\"id\"],\n    url=\"https://artifactory.example.com\",\n    delegate_selectors=[\"harness-delegate\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Authentication mechanism as username and password\n    var example = new Harness.Platform.ArtifactoryConnector(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        OrgId = testHarnessPlatformProject.OrgId,\n        ProjectId = testHarnessPlatformProject.Id,\n        Url = \"https://artifactory.example.com\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Credentials = new Harness.Platform.Inputs.ArtifactoryConnectorCredentialsArgs\n        {\n            Username = \"admin\",\n            PasswordRef = \"account.secret_id\",\n        },\n    });\n\n    // Authentication mechanism as anonymous\n    var test = new Harness.Platform.ArtifactoryConnector(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        OrgId = testHarnessPlatformProject.OrgId,\n        ProjectId = testHarnessPlatformProject.Id,\n        Url = \"https://artifactory.example.com\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Authentication mechanism as username and password\n\t\t_, err := platform.NewArtifactoryConnector(ctx, \"example\", \u0026platform.ArtifactoryConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tOrgId:     pulumi.Any(testHarnessPlatformProject.OrgId),\n\t\t\tProjectId: pulumi.Any(testHarnessPlatformProject.Id),\n\t\t\tUrl:       pulumi.String(\"https://artifactory.example.com\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tCredentials: \u0026platform.ArtifactoryConnectorCredentialsArgs{\n\t\t\t\tUsername:    pulumi.String(\"admin\"),\n\t\t\t\tPasswordRef: pulumi.String(\"account.secret_id\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Authentication mechanism as anonymous\n\t\t_, err = platform.NewArtifactoryConnector(ctx, \"test\", \u0026platform.ArtifactoryConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tOrgId:     pulumi.Any(testHarnessPlatformProject.OrgId),\n\t\t\tProjectId: pulumi.Any(testHarnessPlatformProject.Id),\n\t\t\tUrl:       pulumi.String(\"https://artifactory.example.com\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ArtifactoryConnector;\nimport com.pulumi.harness.platform.ArtifactoryConnectorArgs;\nimport com.pulumi.harness.platform.inputs.ArtifactoryConnectorCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Authentication mechanism as username and password\n        var example = new ArtifactoryConnector(\"example\", ArtifactoryConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .orgId(testHarnessPlatformProject.orgId())\n            .projectId(testHarnessPlatformProject.id())\n            .url(\"https://artifactory.example.com\")\n            .delegateSelectors(\"harness-delegate\")\n            .credentials(ArtifactoryConnectorCredentialsArgs.builder()\n                .username(\"admin\")\n                .passwordRef(\"account.secret_id\")\n                .build())\n            .build());\n\n        // Authentication mechanism as anonymous\n        var test = new ArtifactoryConnector(\"test\", ArtifactoryConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .orgId(testHarnessPlatformProject.orgId())\n            .projectId(testHarnessPlatformProject.id())\n            .url(\"https://artifactory.example.com\")\n            .delegateSelectors(\"harness-delegate\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Authentication mechanism as username and password\n  example:\n    type: harness:platform:ArtifactoryConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      orgId: ${testHarnessPlatformProject.orgId}\n      projectId: ${testHarnessPlatformProject.id}\n      url: https://artifactory.example.com\n      delegateSelectors:\n        - harness-delegate\n      credentials:\n        username: admin\n        passwordRef: account.secret_id\n  # Authentication mechanism as anonymous\n  test:\n    type: harness:platform:ArtifactoryConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      orgId: ${testHarnessPlatformProject.orgId}\n      projectId: ${testHarnessPlatformProject.id}\n      url: https://artifactory.example.com\n      delegateSelectors:\n        - harness-delegate\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level artifactory connector \n\n```sh\n$ pulumi import harness:platform/artifactoryConnector:ArtifactoryConnector example \u003cconnector_id\u003e\n```\n\nImport org level artifactory connector \n\n```sh\n$ pulumi import harness:platform/artifactoryConnector:ArtifactoryConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level artifactory connector \n\n```sh\n$ pulumi import harness:platform/artifactoryConnector:ArtifactoryConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/ArtifactoryConnectorCredentials:ArtifactoryConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Artifactory server.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/ArtifactoryConnectorCredentials:ArtifactoryConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Artifactory server.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ArtifactoryConnector resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/ArtifactoryConnectorCredentials:ArtifactoryConnectorCredentials",
                        "description": "Credentials to use for authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Artifactory server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/awsCCConnector:AwsCCConnector": {
            "description": "Resource for creating an AWS Cloud Cost connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.platform.AwsCCConnector(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    accountId: \"account_id\",\n    reportName: \"report_name\",\n    s3Bucket: \"s3bucket\",\n    featuresEnableds: [\n        \"OPTIMIZATION\",\n        \"VISIBILITY\",\n        \"BILLING\",\n    ],\n    crossAccountAccess: {\n        roleArn: \"role_arn\",\n        externalId: \"external_id\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.AwsCCConnector(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    account_id=\"account_id\",\n    report_name=\"report_name\",\n    s3_bucket=\"s3bucket\",\n    features_enableds=[\n        \"OPTIMIZATION\",\n        \"VISIBILITY\",\n        \"BILLING\",\n    ],\n    cross_account_access=harness.platform.AwsCCConnectorCrossAccountAccessArgs(\n        role_arn=\"role_arn\",\n        external_id=\"external_id\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.AwsCCConnector(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        AccountId = \"account_id\",\n        ReportName = \"report_name\",\n        S3Bucket = \"s3bucket\",\n        FeaturesEnableds = new[]\n        {\n            \"OPTIMIZATION\",\n            \"VISIBILITY\",\n            \"BILLING\",\n        },\n        CrossAccountAccess = new Harness.Platform.Inputs.AwsCCConnectorCrossAccountAccessArgs\n        {\n            RoleArn = \"role_arn\",\n            ExternalId = \"external_id\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewAwsCCConnector(ctx, \"test\", \u0026platform.AwsCCConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tAccountId:  pulumi.String(\"account_id\"),\n\t\t\tReportName: pulumi.String(\"report_name\"),\n\t\t\tS3Bucket:   pulumi.String(\"s3bucket\"),\n\t\t\tFeaturesEnableds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"OPTIMIZATION\"),\n\t\t\t\tpulumi.String(\"VISIBILITY\"),\n\t\t\t\tpulumi.String(\"BILLING\"),\n\t\t\t},\n\t\t\tCrossAccountAccess: \u0026platform.AwsCCConnectorCrossAccountAccessArgs{\n\t\t\t\tRoleArn:    pulumi.String(\"role_arn\"),\n\t\t\t\tExternalId: pulumi.String(\"external_id\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.AwsCCConnector;\nimport com.pulumi.harness.platform.AwsCCConnectorArgs;\nimport com.pulumi.harness.platform.inputs.AwsCCConnectorCrossAccountAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new AwsCCConnector(\"test\", AwsCCConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .accountId(\"account_id\")\n            .reportName(\"report_name\")\n            .s3Bucket(\"s3bucket\")\n            .featuresEnableds(            \n                \"OPTIMIZATION\",\n                \"VISIBILITY\",\n                \"BILLING\")\n            .crossAccountAccess(AwsCCConnectorCrossAccountAccessArgs.builder()\n                .roleArn(\"role_arn\")\n                .externalId(\"external_id\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:AwsCCConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      accountId: account_id\n      reportName: report_name\n      s3Bucket: s3bucket\n      featuresEnableds:\n        - OPTIMIZATION\n        - VISIBILITY\n        - BILLING\n      crossAccountAccess:\n        roleArn: role_arn\n        externalId: external_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level aws cloud cost connector \n\n```sh\n$ pulumi import harness:platform/awsCCConnector:AwsCCConnector example \u003cconnector_id\u003e\n```\n\nImport org level aws cloud cost connector \n\n```sh\n$ pulumi import harness:platform/awsCCConnector:AwsCCConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level aws cloud cost connector \n\n```sh\n$ pulumi import harness:platform/awsCCConnector:AwsCCConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The AWS account id.\n"
                },
                "crossAccountAccess": {
                    "$ref": "#/types/harness:platform/AwsCCConnectorCrossAccountAccess:AwsCCConnectorCrossAccountAccess",
                    "description": "Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "featuresEnableds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The features enabled for the connector. Valid values are BILLING, OPTIMIZATION, VISIBILITY.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "reportName": {
                    "type": "string",
                    "description": "The cost and usage report name. Provided in the delivery options when the template is opened in the AWS console.\n"
                },
                "s3Bucket": {
                    "type": "string",
                    "description": "The name of s3 bucket.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "accountId",
                "crossAccountAccess",
                "featuresEnableds",
                "identifier",
                "name",
                "reportName",
                "s3Bucket"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "The AWS account id.\n"
                },
                "crossAccountAccess": {
                    "$ref": "#/types/harness:platform/AwsCCConnectorCrossAccountAccess:AwsCCConnectorCrossAccountAccess",
                    "description": "Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "featuresEnableds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The features enabled for the connector. Valid values are BILLING, OPTIMIZATION, VISIBILITY.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "reportName": {
                    "type": "string",
                    "description": "The cost and usage report name. Provided in the delivery options when the template is opened in the AWS console.\n"
                },
                "s3Bucket": {
                    "type": "string",
                    "description": "The name of s3 bucket.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "crossAccountAccess",
                "featuresEnableds",
                "identifier",
                "reportName",
                "s3Bucket"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsCCConnector resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The AWS account id.\n"
                    },
                    "crossAccountAccess": {
                        "$ref": "#/types/harness:platform/AwsCCConnectorCrossAccountAccess:AwsCCConnectorCrossAccountAccess",
                        "description": "Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "featuresEnableds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The features enabled for the connector. Valid values are BILLING, OPTIMIZATION, VISIBILITY.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "reportName": {
                        "type": "string",
                        "description": "The cost and usage report name. Provided in the delivery options when the template is opened in the AWS console.\n"
                    },
                    "s3Bucket": {
                        "type": "string",
                        "description": "The name of s3 bucket.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/awsConnector:AwsConnector": {
            "description": "Resource for creating an AWS connector.\n\n## Import\n\nImport account level aws connector\n\n```sh\n$ pulumi import harness:platform/awsConnector:AwsConnector example \u003cconnector_id\u003e\n```\n\nImport organization level aws connector\n\n```sh\n$ pulumi import harness:platform/awsConnector:AwsConnector example \u003corganization_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level aws connector\n\n```sh\n$ pulumi import harness:platform/awsConnector:AwsConnector example \u003corganization_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "crossAccountAccess": {
                    "$ref": "#/types/harness:platform/AwsConnectorCrossAccountAccess:AwsConnectorCrossAccountAccess",
                    "description": "Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "equalJitterBackoffStrategy": {
                    "$ref": "#/types/harness:platform/AwsConnectorEqualJitterBackoffStrategy:AwsConnectorEqualJitterBackoffStrategy",
                    "description": "Equal Jitter BackOff Strategy.\n"
                },
                "fixedDelayBackoffStrategy": {
                    "$ref": "#/types/harness:platform/AwsConnectorFixedDelayBackoffStrategy:AwsConnectorFixedDelayBackoffStrategy",
                    "description": "Fixed Delay BackOff Strategy.\n"
                },
                "fullJitterBackoffStrategy": {
                    "$ref": "#/types/harness:platform/AwsConnectorFullJitterBackoffStrategy:AwsConnectorFullJitterBackoffStrategy",
                    "description": "Full Jitter BackOff Strategy.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "inheritFromDelegate": {
                    "$ref": "#/types/harness:platform/AwsConnectorInheritFromDelegate:AwsConnectorInheritFromDelegate",
                    "description": "Inherit credentials from the delegate.\n"
                },
                "irsa": {
                    "$ref": "#/types/harness:platform/AwsConnectorIrsa:AwsConnectorIrsa",
                    "description": "Use IAM role for service accounts.\n"
                },
                "manual": {
                    "$ref": "#/types/harness:platform/AwsConnectorManual:AwsConnectorManual",
                    "description": "Use IAM role for service accounts.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "identifier",
                "name"
            ],
            "inputProperties": {
                "crossAccountAccess": {
                    "$ref": "#/types/harness:platform/AwsConnectorCrossAccountAccess:AwsConnectorCrossAccountAccess",
                    "description": "Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "equalJitterBackoffStrategy": {
                    "$ref": "#/types/harness:platform/AwsConnectorEqualJitterBackoffStrategy:AwsConnectorEqualJitterBackoffStrategy",
                    "description": "Equal Jitter BackOff Strategy.\n"
                },
                "fixedDelayBackoffStrategy": {
                    "$ref": "#/types/harness:platform/AwsConnectorFixedDelayBackoffStrategy:AwsConnectorFixedDelayBackoffStrategy",
                    "description": "Fixed Delay BackOff Strategy.\n"
                },
                "fullJitterBackoffStrategy": {
                    "$ref": "#/types/harness:platform/AwsConnectorFullJitterBackoffStrategy:AwsConnectorFullJitterBackoffStrategy",
                    "description": "Full Jitter BackOff Strategy.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "inheritFromDelegate": {
                    "$ref": "#/types/harness:platform/AwsConnectorInheritFromDelegate:AwsConnectorInheritFromDelegate",
                    "description": "Inherit credentials from the delegate.\n"
                },
                "irsa": {
                    "$ref": "#/types/harness:platform/AwsConnectorIrsa:AwsConnectorIrsa",
                    "description": "Use IAM role for service accounts.\n"
                },
                "manual": {
                    "$ref": "#/types/harness:platform/AwsConnectorManual:AwsConnectorManual",
                    "description": "Use IAM role for service accounts.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsConnector resources.\n",
                "properties": {
                    "crossAccountAccess": {
                        "$ref": "#/types/harness:platform/AwsConnectorCrossAccountAccess:AwsConnectorCrossAccountAccess",
                        "description": "Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "equalJitterBackoffStrategy": {
                        "$ref": "#/types/harness:platform/AwsConnectorEqualJitterBackoffStrategy:AwsConnectorEqualJitterBackoffStrategy",
                        "description": "Equal Jitter BackOff Strategy.\n"
                    },
                    "fixedDelayBackoffStrategy": {
                        "$ref": "#/types/harness:platform/AwsConnectorFixedDelayBackoffStrategy:AwsConnectorFixedDelayBackoffStrategy",
                        "description": "Fixed Delay BackOff Strategy.\n"
                    },
                    "fullJitterBackoffStrategy": {
                        "$ref": "#/types/harness:platform/AwsConnectorFullJitterBackoffStrategy:AwsConnectorFullJitterBackoffStrategy",
                        "description": "Full Jitter BackOff Strategy.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "inheritFromDelegate": {
                        "$ref": "#/types/harness:platform/AwsConnectorInheritFromDelegate:AwsConnectorInheritFromDelegate",
                        "description": "Inherit credentials from the delegate.\n"
                    },
                    "irsa": {
                        "$ref": "#/types/harness:platform/AwsConnectorIrsa:AwsConnectorIrsa",
                        "description": "Use IAM role for service accounts.\n"
                    },
                    "manual": {
                        "$ref": "#/types/harness:platform/AwsConnectorManual:AwsConnectorManual",
                        "description": "Use IAM role for service accounts.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/awsKmsConnector:AwsKmsConnector": {
            "description": "Resource for creating an AWS KMS connector.\n\n## Import\n\nImport account level awskms connector \n\n```sh\n$ pulumi import harness:platform/awsKmsConnector:AwsKmsConnector example \u003cconnector_id\u003e\n```\n\nImport org level awskms connector \n\n```sh\n$ pulumi import harness:platform/awsKmsConnector:AwsKmsConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level awskms connector \n\n```sh\n$ pulumi import harness:platform/awsKmsConnector:AwsKmsConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "arnRef": {
                    "type": "string",
                    "description": "A reference to the Harness secret containing the ARN of the AWS KMS. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/AwsKmsConnectorCredentials:AwsKmsConnectorCredentials",
                    "description": "Credentials to connect to AWS.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region where the AWS Secret Manager is.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "arnRef",
                "credentials",
                "identifier",
                "name",
                "region"
            ],
            "inputProperties": {
                "arnRef": {
                    "type": "string",
                    "description": "A reference to the Harness secret containing the ARN of the AWS KMS. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/AwsKmsConnectorCredentials:AwsKmsConnectorCredentials",
                    "description": "Credentials to connect to AWS.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region where the AWS Secret Manager is.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "arnRef",
                "credentials",
                "identifier",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsKmsConnector resources.\n",
                "properties": {
                    "arnRef": {
                        "type": "string",
                        "description": "A reference to the Harness secret containing the ARN of the AWS KMS. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/harness:platform/AwsKmsConnectorCredentials:AwsKmsConnectorCredentials",
                        "description": "Credentials to connect to AWS.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The AWS region where the AWS Secret Manager is.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/awsSecretManagerConnector:AwsSecretManagerConnector": {
            "description": "Resource for creating an AWS Secret Manager connector.\n\n## Import\n\nImport account level aws secret manager connector \n\n```sh\n$ pulumi import harness:platform/awsSecretManagerConnector:AwsSecretManagerConnector example \u003cconnector_id\u003e\n```\n\nImport org level aws secret manager connector \n\n```sh\n$ pulumi import harness:platform/awsSecretManagerConnector:AwsSecretManagerConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level aws secret manager connector \n\n```sh\n$ pulumi import harness:platform/awsSecretManagerConnector:AwsSecretManagerConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/AwsSecretManagerConnectorCredentials:AwsSecretManagerConnectorCredentials",
                    "description": "Credentials to connect to AWS.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region where the AWS Secret Manager is.\n"
                },
                "secretNamePrefix": {
                    "type": "string",
                    "description": "A prefix to be added to all secrets.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "credentials",
                "identifier",
                "name",
                "region"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/AwsSecretManagerConnectorCredentials:AwsSecretManagerConnectorCredentials",
                    "description": "Credentials to connect to AWS.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region where the AWS Secret Manager is.\n"
                },
                "secretNamePrefix": {
                    "type": "string",
                    "description": "A prefix to be added to all secrets.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "credentials",
                "identifier",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsSecretManagerConnector resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/AwsSecretManagerConnectorCredentials:AwsSecretManagerConnectorCredentials",
                        "description": "Credentials to connect to AWS.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The AWS region where the AWS Secret Manager is.\n"
                    },
                    "secretNamePrefix": {
                        "type": "string",
                        "description": "A prefix to be added to all secrets.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/azureCloudCostConnector:AzureCloudCostConnector": {
            "description": "Resource for creating an Azure Cloud Cost connector in Harness.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.AzureCloudCostConnector(\"example\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"example\",\n    tags: [\"foo:bar\"],\n    featuresEnableds: [\n        \"BILLING\",\n        \"VISIBILITY\",\n        \"OPTIMIZATION\",\n    ],\n    tenantId: \"tenant_id\",\n    subscriptionId: \"subscription_id\",\n    billingExportSpec: {\n        storageAccountName: \"storage_account_name\",\n        containerName: \"container_name\",\n        directoryName: \"directory_name\",\n        reportName: \"report_name\",\n        subscriptionId: \"subscription_id\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.AzureCloudCostConnector(\"example\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"example\",\n    tags=[\"foo:bar\"],\n    features_enableds=[\n        \"BILLING\",\n        \"VISIBILITY\",\n        \"OPTIMIZATION\",\n    ],\n    tenant_id=\"tenant_id\",\n    subscription_id=\"subscription_id\",\n    billing_export_spec=harness.platform.AzureCloudCostConnectorBillingExportSpecArgs(\n        storage_account_name=\"storage_account_name\",\n        container_name=\"container_name\",\n        directory_name=\"directory_name\",\n        report_name=\"report_name\",\n        subscription_id=\"subscription_id\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.AzureCloudCostConnector(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"example\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        FeaturesEnableds = new[]\n        {\n            \"BILLING\",\n            \"VISIBILITY\",\n            \"OPTIMIZATION\",\n        },\n        TenantId = \"tenant_id\",\n        SubscriptionId = \"subscription_id\",\n        BillingExportSpec = new Harness.Platform.Inputs.AzureCloudCostConnectorBillingExportSpecArgs\n        {\n            StorageAccountName = \"storage_account_name\",\n            ContainerName = \"container_name\",\n            DirectoryName = \"directory_name\",\n            ReportName = \"report_name\",\n            SubscriptionId = \"subscription_id\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewAzureCloudCostConnector(ctx, \"example\", \u0026platform.AzureCloudCostConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tFeaturesEnableds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"BILLING\"),\n\t\t\t\tpulumi.String(\"VISIBILITY\"),\n\t\t\t\tpulumi.String(\"OPTIMIZATION\"),\n\t\t\t},\n\t\t\tTenantId:       pulumi.String(\"tenant_id\"),\n\t\t\tSubscriptionId: pulumi.String(\"subscription_id\"),\n\t\t\tBillingExportSpec: \u0026platform.AzureCloudCostConnectorBillingExportSpecArgs{\n\t\t\t\tStorageAccountName: pulumi.String(\"storage_account_name\"),\n\t\t\t\tContainerName:      pulumi.String(\"container_name\"),\n\t\t\t\tDirectoryName:      pulumi.String(\"directory_name\"),\n\t\t\t\tReportName:         pulumi.String(\"report_name\"),\n\t\t\t\tSubscriptionId:     pulumi.String(\"subscription_id\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.AzureCloudCostConnector;\nimport com.pulumi.harness.platform.AzureCloudCostConnectorArgs;\nimport com.pulumi.harness.platform.inputs.AzureCloudCostConnectorBillingExportSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new AzureCloudCostConnector(\"example\", AzureCloudCostConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"example\")\n            .tags(\"foo:bar\")\n            .featuresEnableds(            \n                \"BILLING\",\n                \"VISIBILITY\",\n                \"OPTIMIZATION\")\n            .tenantId(\"tenant_id\")\n            .subscriptionId(\"subscription_id\")\n            .billingExportSpec(AzureCloudCostConnectorBillingExportSpecArgs.builder()\n                .storageAccountName(\"storage_account_name\")\n                .containerName(\"container_name\")\n                .directoryName(\"directory_name\")\n                .reportName(\"report_name\")\n                .subscriptionId(\"subscription_id\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:AzureCloudCostConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: example\n      tags:\n        - foo:bar\n      featuresEnableds:\n        - BILLING\n        - VISIBILITY\n        - OPTIMIZATION\n      tenantId: tenant_id\n      subscriptionId: subscription_id\n      billingExportSpec:\n        storageAccountName: storage_account_name\n        containerName: container_name\n        directoryName: directory_name\n        reportName: report_name\n        subscriptionId: subscription_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level azure cloud cost connector \n\n```sh\n$ pulumi import harness:platform/azureCloudCostConnector:AzureCloudCostConnector example \u003cconnector_id\u003e\n```\n\nImport org level azure cloud cost connector \n\n```sh\n$ pulumi import harness:platform/azureCloudCostConnector:AzureCloudCostConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level azure cloud cost connector \n\n```sh\n$ pulumi import harness:platform/azureCloudCostConnector:AzureCloudCostConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "billingExportSpec": {
                    "$ref": "#/types/harness:platform/AzureCloudCostConnectorBillingExportSpec:AzureCloudCostConnectorBillingExportSpec",
                    "description": "Returns billing details for the Azure account.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "featuresEnableds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates which feature to enable among Billing, Optimization, and Visibility.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Subsription id.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Tenant id.\n"
                }
            },
            "required": [
                "featuresEnableds",
                "identifier",
                "name",
                "subscriptionId",
                "tenantId"
            ],
            "inputProperties": {
                "billingExportSpec": {
                    "$ref": "#/types/harness:platform/AzureCloudCostConnectorBillingExportSpec:AzureCloudCostConnectorBillingExportSpec",
                    "description": "Returns billing details for the Azure account.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "featuresEnableds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates which feature to enable among Billing, Optimization, and Visibility.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Subsription id.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Tenant id.\n"
                }
            },
            "requiredInputs": [
                "featuresEnableds",
                "identifier",
                "subscriptionId",
                "tenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureCloudCostConnector resources.\n",
                "properties": {
                    "billingExportSpec": {
                        "$ref": "#/types/harness:platform/AzureCloudCostConnectorBillingExportSpec:AzureCloudCostConnectorBillingExportSpec",
                        "description": "Returns billing details for the Azure account.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "featuresEnableds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates which feature to enable among Billing, Optimization, and Visibility.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "subscriptionId": {
                        "type": "string",
                        "description": "Subsription id.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "Tenant id.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/azureCloudProviderConnector:AzureCloudProviderConnector": {
            "description": "Resource for creating an Azure Cloud Provider in Harness.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst manualConfigSecret = new harness.platform.AzureCloudProviderConnector(\"manual_config_secret\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"example\",\n    tags: [\"foo:bar\"],\n    credentials: {\n        type: \"ManualConfig\",\n        azureManualDetails: {\n            applicationId: \"application_id\",\n            tenantId: \"tenant_id\",\n            auth: {\n                type: \"Secret\",\n                azureClientSecretKey: {\n                    secretRef: `account.${test.id}`,\n                },\n            },\n        },\n    },\n    azureEnvironmentType: \"AZURE\",\n    delegateSelectors: [\"harness-delegate\"],\n});\nconst manualConfigCertificate = new harness.platform.AzureCloudProviderConnector(\"manual_config_certificate\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"example\",\n    tags: [\"foo:bar\"],\n    credentials: {\n        type: \"ManualConfig\",\n        azureManualDetails: {\n            applicationId: \"application_id\",\n            tenantId: \"tenant_id\",\n            auth: {\n                type: \"Certificate\",\n                azureClientKeyCert: {\n                    certificateRef: `account.${test.id}`,\n                },\n            },\n        },\n    },\n    azureEnvironmentType: \"AZURE\",\n    delegateSelectors: [\"harness-delegate\"],\n});\nconst inheritFromDelegateUserAssignedManagedIdentity = new harness.platform.AzureCloudProviderConnector(\"inherit_from_delegate_user_assigned_managed_identity\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"example\",\n    tags: [\"foo:bar\"],\n    credentials: {\n        type: \"InheritFromDelegate\",\n        azureInheritFromDelegateDetails: {\n            auth: {\n                azureMsiAuthUa: {\n                    clientId: \"client_id\",\n                },\n                type: \"UserAssignedManagedIdentity\",\n            },\n        },\n    },\n    azureEnvironmentType: \"AZURE\",\n    delegateSelectors: [\"harness-delegate\"],\n});\nconst inheritFromDelegateSystemAssignedManagedIdentity = new harness.platform.AzureCloudProviderConnector(\"inherit_from_delegate_system_assigned_managed_identity\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"example\",\n    tags: [\"foo:bar\"],\n    credentials: {\n        type: \"InheritFromDelegate\",\n        azureInheritFromDelegateDetails: {\n            auth: {\n                type: \"SystemAssignedManagedIdentity\",\n            },\n        },\n    },\n    azureEnvironmentType: \"AZURE\",\n    delegateSelectors: [\"harness-delegate\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nmanual_config_secret = harness.platform.AzureCloudProviderConnector(\"manual_config_secret\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"example\",\n    tags=[\"foo:bar\"],\n    credentials=harness.platform.AzureCloudProviderConnectorCredentialsArgs(\n        type=\"ManualConfig\",\n        azure_manual_details=harness.platform.AzureCloudProviderConnectorCredentialsAzureManualDetailsArgs(\n            application_id=\"application_id\",\n            tenant_id=\"tenant_id\",\n            auth=harness.platform.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthArgs(\n                type=\"Secret\",\n                azure_client_secret_key=harness.platform.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientSecretKeyArgs(\n                    secret_ref=f\"account.{test['id']}\",\n                ),\n            ),\n        ),\n    ),\n    azure_environment_type=\"AZURE\",\n    delegate_selectors=[\"harness-delegate\"])\nmanual_config_certificate = harness.platform.AzureCloudProviderConnector(\"manual_config_certificate\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"example\",\n    tags=[\"foo:bar\"],\n    credentials=harness.platform.AzureCloudProviderConnectorCredentialsArgs(\n        type=\"ManualConfig\",\n        azure_manual_details=harness.platform.AzureCloudProviderConnectorCredentialsAzureManualDetailsArgs(\n            application_id=\"application_id\",\n            tenant_id=\"tenant_id\",\n            auth=harness.platform.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthArgs(\n                type=\"Certificate\",\n                azure_client_key_cert=harness.platform.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientKeyCertArgs(\n                    certificate_ref=f\"account.{test['id']}\",\n                ),\n            ),\n        ),\n    ),\n    azure_environment_type=\"AZURE\",\n    delegate_selectors=[\"harness-delegate\"])\ninherit_from_delegate_user_assigned_managed_identity = harness.platform.AzureCloudProviderConnector(\"inherit_from_delegate_user_assigned_managed_identity\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"example\",\n    tags=[\"foo:bar\"],\n    credentials=harness.platform.AzureCloudProviderConnectorCredentialsArgs(\n        type=\"InheritFromDelegate\",\n        azure_inherit_from_delegate_details=harness.platform.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsArgs(\n            auth=harness.platform.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthArgs(\n                azure_msi_auth_ua=harness.platform.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUaArgs(\n                    client_id=\"client_id\",\n                ),\n                type=\"UserAssignedManagedIdentity\",\n            ),\n        ),\n    ),\n    azure_environment_type=\"AZURE\",\n    delegate_selectors=[\"harness-delegate\"])\ninherit_from_delegate_system_assigned_managed_identity = harness.platform.AzureCloudProviderConnector(\"inherit_from_delegate_system_assigned_managed_identity\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"example\",\n    tags=[\"foo:bar\"],\n    credentials=harness.platform.AzureCloudProviderConnectorCredentialsArgs(\n        type=\"InheritFromDelegate\",\n        azure_inherit_from_delegate_details=harness.platform.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsArgs(\n            auth=harness.platform.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthArgs(\n                type=\"SystemAssignedManagedIdentity\",\n            ),\n        ),\n    ),\n    azure_environment_type=\"AZURE\",\n    delegate_selectors=[\"harness-delegate\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var manualConfigSecret = new Harness.Platform.AzureCloudProviderConnector(\"manual_config_secret\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"example\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Credentials = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsArgs\n        {\n            Type = \"ManualConfig\",\n            AzureManualDetails = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureManualDetailsArgs\n            {\n                ApplicationId = \"application_id\",\n                TenantId = \"tenant_id\",\n                Auth = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthArgs\n                {\n                    Type = \"Secret\",\n                    AzureClientSecretKey = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientSecretKeyArgs\n                    {\n                        SecretRef = $\"account.{test.Id}\",\n                    },\n                },\n            },\n        },\n        AzureEnvironmentType = \"AZURE\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n    });\n\n    var manualConfigCertificate = new Harness.Platform.AzureCloudProviderConnector(\"manual_config_certificate\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"example\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Credentials = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsArgs\n        {\n            Type = \"ManualConfig\",\n            AzureManualDetails = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureManualDetailsArgs\n            {\n                ApplicationId = \"application_id\",\n                TenantId = \"tenant_id\",\n                Auth = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthArgs\n                {\n                    Type = \"Certificate\",\n                    AzureClientKeyCert = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientKeyCertArgs\n                    {\n                        CertificateRef = $\"account.{test.Id}\",\n                    },\n                },\n            },\n        },\n        AzureEnvironmentType = \"AZURE\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n    });\n\n    var inheritFromDelegateUserAssignedManagedIdentity = new Harness.Platform.AzureCloudProviderConnector(\"inherit_from_delegate_user_assigned_managed_identity\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"example\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Credentials = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsArgs\n        {\n            Type = \"InheritFromDelegate\",\n            AzureInheritFromDelegateDetails = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsArgs\n            {\n                Auth = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthArgs\n                {\n                    AzureMsiAuthUa = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUaArgs\n                    {\n                        ClientId = \"client_id\",\n                    },\n                    Type = \"UserAssignedManagedIdentity\",\n                },\n            },\n        },\n        AzureEnvironmentType = \"AZURE\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n    });\n\n    var inheritFromDelegateSystemAssignedManagedIdentity = new Harness.Platform.AzureCloudProviderConnector(\"inherit_from_delegate_system_assigned_managed_identity\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"example\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Credentials = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsArgs\n        {\n            Type = \"InheritFromDelegate\",\n            AzureInheritFromDelegateDetails = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsArgs\n            {\n                Auth = new Harness.Platform.Inputs.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthArgs\n                {\n                    Type = \"SystemAssignedManagedIdentity\",\n                },\n            },\n        },\n        AzureEnvironmentType = \"AZURE\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewAzureCloudProviderConnector(ctx, \"manual_config_secret\", \u0026platform.AzureCloudProviderConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tCredentials: \u0026platform.AzureCloudProviderConnectorCredentialsArgs{\n\t\t\t\tType: pulumi.String(\"ManualConfig\"),\n\t\t\t\tAzureManualDetails: \u0026platform.AzureCloudProviderConnectorCredentialsAzureManualDetailsArgs{\n\t\t\t\t\tApplicationId: pulumi.String(\"application_id\"),\n\t\t\t\t\tTenantId:      pulumi.String(\"tenant_id\"),\n\t\t\t\t\tAuth: \u0026platform.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthArgs{\n\t\t\t\t\t\tType: pulumi.String(\"Secret\"),\n\t\t\t\t\t\tAzureClientSecretKey: \u0026platform.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientSecretKeyArgs{\n\t\t\t\t\t\t\tSecretRef: pulumi.String(fmt.Sprintf(\"account.%v\", test.Id)),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tAzureEnvironmentType: pulumi.String(\"AZURE\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewAzureCloudProviderConnector(ctx, \"manual_config_certificate\", \u0026platform.AzureCloudProviderConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tCredentials: \u0026platform.AzureCloudProviderConnectorCredentialsArgs{\n\t\t\t\tType: pulumi.String(\"ManualConfig\"),\n\t\t\t\tAzureManualDetails: \u0026platform.AzureCloudProviderConnectorCredentialsAzureManualDetailsArgs{\n\t\t\t\t\tApplicationId: pulumi.String(\"application_id\"),\n\t\t\t\t\tTenantId:      pulumi.String(\"tenant_id\"),\n\t\t\t\t\tAuth: \u0026platform.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthArgs{\n\t\t\t\t\t\tType: pulumi.String(\"Certificate\"),\n\t\t\t\t\t\tAzureClientKeyCert: \u0026platform.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientKeyCertArgs{\n\t\t\t\t\t\t\tCertificateRef: pulumi.String(fmt.Sprintf(\"account.%v\", test.Id)),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tAzureEnvironmentType: pulumi.String(\"AZURE\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewAzureCloudProviderConnector(ctx, \"inherit_from_delegate_user_assigned_managed_identity\", \u0026platform.AzureCloudProviderConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tCredentials: \u0026platform.AzureCloudProviderConnectorCredentialsArgs{\n\t\t\t\tType: pulumi.String(\"InheritFromDelegate\"),\n\t\t\t\tAzureInheritFromDelegateDetails: \u0026platform.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsArgs{\n\t\t\t\t\tAuth: \u0026platform.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthArgs{\n\t\t\t\t\t\tAzureMsiAuthUa: \u0026platform.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUaArgs{\n\t\t\t\t\t\t\tClientId: pulumi.String(\"client_id\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tType: pulumi.String(\"UserAssignedManagedIdentity\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tAzureEnvironmentType: pulumi.String(\"AZURE\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewAzureCloudProviderConnector(ctx, \"inherit_from_delegate_system_assigned_managed_identity\", \u0026platform.AzureCloudProviderConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tCredentials: \u0026platform.AzureCloudProviderConnectorCredentialsArgs{\n\t\t\t\tType: pulumi.String(\"InheritFromDelegate\"),\n\t\t\t\tAzureInheritFromDelegateDetails: \u0026platform.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsArgs{\n\t\t\t\t\tAuth: \u0026platform.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthArgs{\n\t\t\t\t\t\tType: pulumi.String(\"SystemAssignedManagedIdentity\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tAzureEnvironmentType: pulumi.String(\"AZURE\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.AzureCloudProviderConnector;\nimport com.pulumi.harness.platform.AzureCloudProviderConnectorArgs;\nimport com.pulumi.harness.platform.inputs.AzureCloudProviderConnectorCredentialsArgs;\nimport com.pulumi.harness.platform.inputs.AzureCloudProviderConnectorCredentialsAzureManualDetailsArgs;\nimport com.pulumi.harness.platform.inputs.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthArgs;\nimport com.pulumi.harness.platform.inputs.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientSecretKeyArgs;\nimport com.pulumi.harness.platform.inputs.AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientKeyCertArgs;\nimport com.pulumi.harness.platform.inputs.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsArgs;\nimport com.pulumi.harness.platform.inputs.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthArgs;\nimport com.pulumi.harness.platform.inputs.AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var manualConfigSecret = new AzureCloudProviderConnector(\"manualConfigSecret\", AzureCloudProviderConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"example\")\n            .tags(\"foo:bar\")\n            .credentials(AzureCloudProviderConnectorCredentialsArgs.builder()\n                .type(\"ManualConfig\")\n                .azureManualDetails(AzureCloudProviderConnectorCredentialsAzureManualDetailsArgs.builder()\n                    .applicationId(\"application_id\")\n                    .tenantId(\"tenant_id\")\n                    .auth(AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthArgs.builder()\n                        .type(\"Secret\")\n                        .azureClientSecretKey(AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientSecretKeyArgs.builder()\n                            .secretRef(String.format(\"account.%s\", test.id()))\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .azureEnvironmentType(\"AZURE\")\n            .delegateSelectors(\"harness-delegate\")\n            .build());\n\n        var manualConfigCertificate = new AzureCloudProviderConnector(\"manualConfigCertificate\", AzureCloudProviderConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"example\")\n            .tags(\"foo:bar\")\n            .credentials(AzureCloudProviderConnectorCredentialsArgs.builder()\n                .type(\"ManualConfig\")\n                .azureManualDetails(AzureCloudProviderConnectorCredentialsAzureManualDetailsArgs.builder()\n                    .applicationId(\"application_id\")\n                    .tenantId(\"tenant_id\")\n                    .auth(AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthArgs.builder()\n                        .type(\"Certificate\")\n                        .azureClientKeyCert(AzureCloudProviderConnectorCredentialsAzureManualDetailsAuthAzureClientKeyCertArgs.builder()\n                            .certificateRef(String.format(\"account.%s\", test.id()))\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .azureEnvironmentType(\"AZURE\")\n            .delegateSelectors(\"harness-delegate\")\n            .build());\n\n        var inheritFromDelegateUserAssignedManagedIdentity = new AzureCloudProviderConnector(\"inheritFromDelegateUserAssignedManagedIdentity\", AzureCloudProviderConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"example\")\n            .tags(\"foo:bar\")\n            .credentials(AzureCloudProviderConnectorCredentialsArgs.builder()\n                .type(\"InheritFromDelegate\")\n                .azureInheritFromDelegateDetails(AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsArgs.builder()\n                    .auth(AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthArgs.builder()\n                        .azureMsiAuthUa(AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthAzureMsiAuthUaArgs.builder()\n                            .clientId(\"client_id\")\n                            .build())\n                        .type(\"UserAssignedManagedIdentity\")\n                        .build())\n                    .build())\n                .build())\n            .azureEnvironmentType(\"AZURE\")\n            .delegateSelectors(\"harness-delegate\")\n            .build());\n\n        var inheritFromDelegateSystemAssignedManagedIdentity = new AzureCloudProviderConnector(\"inheritFromDelegateSystemAssignedManagedIdentity\", AzureCloudProviderConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"example\")\n            .tags(\"foo:bar\")\n            .credentials(AzureCloudProviderConnectorCredentialsArgs.builder()\n                .type(\"InheritFromDelegate\")\n                .azureInheritFromDelegateDetails(AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsArgs.builder()\n                    .auth(AzureCloudProviderConnectorCredentialsAzureInheritFromDelegateDetailsAuthArgs.builder()\n                        .type(\"SystemAssignedManagedIdentity\")\n                        .build())\n                    .build())\n                .build())\n            .azureEnvironmentType(\"AZURE\")\n            .delegateSelectors(\"harness-delegate\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  manualConfigSecret:\n    type: harness:platform:AzureCloudProviderConnector\n    name: manual_config_secret\n    properties:\n      identifier: identifier\n      name: name\n      description: example\n      tags:\n        - foo:bar\n      credentials:\n        type: ManualConfig\n        azureManualDetails:\n          applicationId: application_id\n          tenantId: tenant_id\n          auth:\n            type: Secret\n            azureClientSecretKey:\n              secretRef: account.${test.id}\n      azureEnvironmentType: AZURE\n      delegateSelectors:\n        - harness-delegate\n  manualConfigCertificate:\n    type: harness:platform:AzureCloudProviderConnector\n    name: manual_config_certificate\n    properties:\n      identifier: identifier\n      name: name\n      description: example\n      tags:\n        - foo:bar\n      credentials:\n        type: ManualConfig\n        azureManualDetails:\n          applicationId: application_id\n          tenantId: tenant_id\n          auth:\n            type: Certificate\n            azureClientKeyCert:\n              certificateRef: account.${test.id}\n      azureEnvironmentType: AZURE\n      delegateSelectors:\n        - harness-delegate\n  inheritFromDelegateUserAssignedManagedIdentity:\n    type: harness:platform:AzureCloudProviderConnector\n    name: inherit_from_delegate_user_assigned_managed_identity\n    properties:\n      identifier: identifier\n      name: name\n      description: example\n      tags:\n        - foo:bar\n      credentials:\n        type: InheritFromDelegate\n        azureInheritFromDelegateDetails:\n          auth:\n            azureMsiAuthUa:\n              clientId: client_id\n            type: UserAssignedManagedIdentity\n      azureEnvironmentType: AZURE\n      delegateSelectors:\n        - harness-delegate\n  inheritFromDelegateSystemAssignedManagedIdentity:\n    type: harness:platform:AzureCloudProviderConnector\n    name: inherit_from_delegate_system_assigned_managed_identity\n    properties:\n      identifier: identifier\n      name: name\n      description: example\n      tags:\n        - foo:bar\n      credentials:\n        type: InheritFromDelegate\n        azureInheritFromDelegateDetails:\n          auth:\n            type: SystemAssignedManagedIdentity\n      azureEnvironmentType: AZURE\n      delegateSelectors:\n        - harness-delegate\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level azure cloud provider connector \n\n```sh\n$ pulumi import harness:platform/azureCloudProviderConnector:AzureCloudProviderConnector example \u003cconnector_id\u003e\n```\n\nImport org level azure cloud provider connector \n\n```sh\n$ pulumi import harness:platform/azureCloudProviderConnector:AzureCloudProviderConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level azure cloud provider connector \n\n```sh\n$ pulumi import harness:platform/azureCloudProviderConnector:AzureCloudProviderConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "azureEnvironmentType": {
                    "type": "string",
                    "description": "Specifies the Azure Environment type, which is AZURE by default. Can either be AZURE or AZURE*US*GOVERNMENT\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/AzureCloudProviderConnectorCredentials:AzureCloudProviderConnectorCredentials",
                    "description": "Contains Azure connector credentials.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "executeOnDelegate": {
                    "type": "boolean",
                    "description": "Execute on delegate or not.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "azureEnvironmentType",
                "credentials",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "azureEnvironmentType": {
                    "type": "string",
                    "description": "Specifies the Azure Environment type, which is AZURE by default. Can either be AZURE or AZURE*US*GOVERNMENT\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/AzureCloudProviderConnectorCredentials:AzureCloudProviderConnectorCredentials",
                    "description": "Contains Azure connector credentials.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "executeOnDelegate": {
                    "type": "boolean",
                    "description": "Execute on delegate or not.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "credentials",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureCloudProviderConnector resources.\n",
                "properties": {
                    "azureEnvironmentType": {
                        "type": "string",
                        "description": "Specifies the Azure Environment type, which is AZURE by default. Can either be AZURE or AZURE*US*GOVERNMENT\n"
                    },
                    "credentials": {
                        "$ref": "#/types/harness:platform/AzureCloudProviderConnectorCredentials:AzureCloudProviderConnectorCredentials",
                        "description": "Contains Azure connector credentials.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "executeOnDelegate": {
                        "type": "boolean",
                        "description": "Execute on delegate or not.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/azureKeyVaultConnector:AzureKeyVaultConnector": {
            "description": "Resource for creating an Azure key vault in Harness.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.AzureKeyVaultConnector(\"example\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"example\",\n    tags: [\"foo:bar\"],\n    clientId: \"client_id\",\n    secretKey: \"account.secret_key\",\n    tenantId: \"tenant_id\",\n    vaultName: \"vault_name\",\n    subscription: \"subscription\",\n    isDefault: false,\n    azureEnvironmentType: \"AZURE\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.AzureKeyVaultConnector(\"example\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"example\",\n    tags=[\"foo:bar\"],\n    client_id=\"client_id\",\n    secret_key=\"account.secret_key\",\n    tenant_id=\"tenant_id\",\n    vault_name=\"vault_name\",\n    subscription=\"subscription\",\n    is_default=False,\n    azure_environment_type=\"AZURE\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.AzureKeyVaultConnector(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"example\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        ClientId = \"client_id\",\n        SecretKey = \"account.secret_key\",\n        TenantId = \"tenant_id\",\n        VaultName = \"vault_name\",\n        Subscription = \"subscription\",\n        IsDefault = false,\n        AzureEnvironmentType = \"AZURE\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewAzureKeyVaultConnector(ctx, \"example\", \u0026platform.AzureKeyVaultConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tClientId:             pulumi.String(\"client_id\"),\n\t\t\tSecretKey:            pulumi.String(\"account.secret_key\"),\n\t\t\tTenantId:             pulumi.String(\"tenant_id\"),\n\t\t\tVaultName:            pulumi.String(\"vault_name\"),\n\t\t\tSubscription:         pulumi.String(\"subscription\"),\n\t\t\tIsDefault:            pulumi.Bool(false),\n\t\t\tAzureEnvironmentType: pulumi.String(\"AZURE\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.AzureKeyVaultConnector;\nimport com.pulumi.harness.platform.AzureKeyVaultConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new AzureKeyVaultConnector(\"example\", AzureKeyVaultConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"example\")\n            .tags(\"foo:bar\")\n            .clientId(\"client_id\")\n            .secretKey(\"account.secret_key\")\n            .tenantId(\"tenant_id\")\n            .vaultName(\"vault_name\")\n            .subscription(\"subscription\")\n            .isDefault(false)\n            .azureEnvironmentType(\"AZURE\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:AzureKeyVaultConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: example\n      tags:\n        - foo:bar\n      clientId: client_id\n      secretKey: account.secret_key\n      tenantId: tenant_id\n      vaultName: vault_name\n      subscription: subscription\n      isDefault: false\n      azureEnvironmentType: AZURE\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level azure key vault connector \n\n```sh\n$ pulumi import harness:platform/azureKeyVaultConnector:AzureKeyVaultConnector example \u003cconnector_id\u003e\n```\n\nImport org level azure key vault connector \n\n```sh\n$ pulumi import harness:platform/azureKeyVaultConnector:AzureKeyVaultConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level azure key vault connector \n\n```sh\n$ pulumi import harness:platform/azureKeyVaultConnector:AzureKeyVaultConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "azureEnvironmentType": {
                    "type": "string",
                    "description": "Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Application ID of the Azure App.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Specifies whether or not is the default value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The Harness text secret with the Azure authentication key as its value.\n"
                },
                "subscription": {
                    "type": "string",
                    "description": "Azure subscription ID.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The Azure Active Directory (Azure AD) directory ID where you created your application.\n"
                },
                "vaultName": {
                    "type": "string",
                    "description": "Name of the vault.\n"
                }
            },
            "required": [
                "azureEnvironmentType",
                "clientId",
                "identifier",
                "name",
                "secretKey",
                "subscription",
                "tenantId",
                "vaultName"
            ],
            "inputProperties": {
                "azureEnvironmentType": {
                    "type": "string",
                    "description": "Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Application ID of the Azure App.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Specifies whether or not is the default value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The Harness text secret with the Azure authentication key as its value.\n"
                },
                "subscription": {
                    "type": "string",
                    "description": "Azure subscription ID.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The Azure Active Directory (Azure AD) directory ID where you created your application.\n"
                },
                "vaultName": {
                    "type": "string",
                    "description": "Name of the vault.\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "identifier",
                "secretKey",
                "subscription",
                "tenantId",
                "vaultName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureKeyVaultConnector resources.\n",
                "properties": {
                    "azureEnvironmentType": {
                        "type": "string",
                        "description": "Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "Application ID of the Azure App.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Specifies whether or not is the default value.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The Harness text secret with the Azure authentication key as its value.\n"
                    },
                    "subscription": {
                        "type": "string",
                        "description": "Azure subscription ID.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "The Azure Active Directory (Azure AD) directory ID where you created your application.\n"
                    },
                    "vaultName": {
                        "type": "string",
                        "description": "Name of the vault.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/bitbucketConnector:BitbucketConnector": {
            "description": "Resource for creating a Bitbucket connector.\n\n## Import\n\nImport account level bitbucket connector \n\n```sh\n$ pulumi import harness:platform/bitbucketConnector:BitbucketConnector example \u003cconnector_id\u003e\n```\n\nImport org level bitbucket connector \n\n```sh\n$ pulumi import harness:platform/bitbucketConnector:BitbucketConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level bitbucket connector \n\n```sh\n$ pulumi import harness:platform/bitbucketConnector:BitbucketConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "apiAuthentication": {
                    "$ref": "#/types/harness:platform/BitbucketConnectorApiAuthentication:BitbucketConnectorApiAuthentication",
                    "description": "Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/BitbucketConnectorCredentials:BitbucketConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the BitBucket repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "required": [
                "connectionType",
                "credentials",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "apiAuthentication": {
                    "$ref": "#/types/harness:platform/BitbucketConnectorApiAuthentication:BitbucketConnectorApiAuthentication",
                    "description": "Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/BitbucketConnectorCredentials:BitbucketConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the BitBucket repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "requiredInputs": [
                "connectionType",
                "credentials",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BitbucketConnector resources.\n",
                "properties": {
                    "apiAuthentication": {
                        "$ref": "#/types/harness:platform/BitbucketConnectorApiAuthentication:BitbucketConnectorApiAuthentication",
                        "description": "Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/harness:platform/BitbucketConnectorCredentials:BitbucketConnectorCredentials",
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the BitBucket repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/datadogConnector:DatadogConnector": {
            "description": "Resource for creating a Datadog connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.platform.DatadogConnector(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    url: \"https://datadog.com\",\n    delegateSelectors: [\"harness-delegate\"],\n    applicationKeyRef: \"account.secret_id\",\n    apiKeyRef: \"account.secret_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.DatadogConnector(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    url=\"https://datadog.com\",\n    delegate_selectors=[\"harness-delegate\"],\n    application_key_ref=\"account.secret_id\",\n    api_key_ref=\"account.secret_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.DatadogConnector(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://datadog.com\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        ApplicationKeyRef = \"account.secret_id\",\n        ApiKeyRef = \"account.secret_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewDatadogConnector(ctx, \"test\", \u0026platform.DatadogConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://datadog.com\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tApplicationKeyRef: pulumi.String(\"account.secret_id\"),\n\t\t\tApiKeyRef:         pulumi.String(\"account.secret_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.DatadogConnector;\nimport com.pulumi.harness.platform.DatadogConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new DatadogConnector(\"test\", DatadogConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .url(\"https://datadog.com\")\n            .delegateSelectors(\"harness-delegate\")\n            .applicationKeyRef(\"account.secret_id\")\n            .apiKeyRef(\"account.secret_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:DatadogConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      url: https://datadog.com\n      delegateSelectors:\n        - harness-delegate\n      applicationKeyRef: account.secret_id\n      apiKeyRef: account.secret_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level datadog connector \n\n```sh\n$ pulumi import harness:platform/datadogConnector:DatadogConnector example \u003cconnector_id\u003e\n```\n\nImport org level datadog connector \n\n```sh\n$ pulumi import harness:platform/datadogConnector:DatadogConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level datadog connector \n\n```sh\n$ pulumi import harness:platform/datadogConnector:DatadogConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "apiKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the api key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "applicationKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the application key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Datadog server.\n"
                }
            },
            "required": [
                "apiKeyRef",
                "applicationKeyRef",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "apiKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the api key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "applicationKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the application key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Datadog server.\n"
                }
            },
            "requiredInputs": [
                "apiKeyRef",
                "applicationKeyRef",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatadogConnector resources.\n",
                "properties": {
                    "apiKeyRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the api key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "applicationKeyRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the application key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Datadog server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/dockerConnector:DockerConnector": {
            "description": "Resource for creating a Docker connector.\n\n## Import\n\nImport account level docker connector \n\n```sh\n$ pulumi import harness:platform/dockerConnector:DockerConnector example \u003cconnector_id\u003e\n```\n\nImport org level docker connector \n\n```sh\n$ pulumi import harness:platform/dockerConnector:DockerConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level docker connector \n\n```sh\n$ pulumi import harness:platform/dockerConnector:DockerConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/DockerConnectorCredentials:DockerConnectorCredentials",
                    "description": "The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the docker registry.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "type",
                "url"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/DockerConnectorCredentials:DockerConnectorCredentials",
                    "description": "The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the docker registry.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "type",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DockerConnector resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/DockerConnectorCredentials:DockerConnectorCredentials",
                        "description": "The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the docker registry.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/dynatraceConnector:DynatraceConnector": {
            "description": "Resource for creating a Dynatrace connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.platform.DynatraceConnector(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    url: \"https://dynatrace.com/\",\n    delegateSelectors: [\"harness-delegate\"],\n    apiTokenRef: \"account.secret_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.DynatraceConnector(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    url=\"https://dynatrace.com/\",\n    delegate_selectors=[\"harness-delegate\"],\n    api_token_ref=\"account.secret_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.DynatraceConnector(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://dynatrace.com/\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        ApiTokenRef = \"account.secret_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewDynatraceConnector(ctx, \"test\", \u0026platform.DynatraceConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://dynatrace.com/\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tApiTokenRef: pulumi.String(\"account.secret_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.DynatraceConnector;\nimport com.pulumi.harness.platform.DynatraceConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new DynatraceConnector(\"test\", DynatraceConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .url(\"https://dynatrace.com/\")\n            .delegateSelectors(\"harness-delegate\")\n            .apiTokenRef(\"account.secret_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:DynatraceConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      url: https://dynatrace.com/\n      delegateSelectors:\n        - harness-delegate\n      apiTokenRef: account.secret_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level dynatrace connector \n\n```sh\n$ pulumi import harness:platform/dynatraceConnector:DynatraceConnector example \u003cconnector_id\u003e\n```\n\nImport org level dynatrace connector \n\n```sh\n$ pulumi import harness:platform/dynatraceConnector:DynatraceConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level dynatrace connector \n\n```sh\n$ pulumi import harness:platform/dynatraceConnector:DynatraceConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "apiTokenRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Dynatrace server.\n"
                }
            },
            "required": [
                "apiTokenRef",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "apiTokenRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Dynatrace server.\n"
                }
            },
            "requiredInputs": [
                "apiTokenRef",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DynatraceConnector resources.\n",
                "properties": {
                    "apiTokenRef": {
                        "type": "string",
                        "description": "The reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Dynatrace server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/elasticsearchConnector:ElasticsearchConnector": {
            "description": "Resource for creating an ElasticSearch connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\n// Authentication mechanism as api token\nconst token = new harness.platform.ElasticsearchConnector(\"token\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    url: \"https://elasticsearch.com/\",\n    delegateSelectors: [\"harness-delegate\"],\n    apiToken: {\n        clientId: \"client_id\",\n        clientSecretRef: \"account.secret_id\",\n    },\n});\n// Authentication mechanism as username and password\nconst test = new harness.platform.ElasticsearchConnector(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    url: \"https://elasticsearch.com/\",\n    delegateSelectors: [\"harness-delegate\"],\n    usernamePassword: {\n        username: \"username\",\n        passwordRef: \"account.secret_id\",\n    },\n});\n// Authentication mechanism as username and password\nconst noAuthentication = new harness.platform.ElasticsearchConnector(\"no_authentication\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    url: \"https://elasticsearch.com/\",\n    delegateSelectors: [\"harness-delegate\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\n# Authentication mechanism as api token\ntoken = harness.platform.ElasticsearchConnector(\"token\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    url=\"https://elasticsearch.com/\",\n    delegate_selectors=[\"harness-delegate\"],\n    api_token=harness.platform.ElasticsearchConnectorApiTokenArgs(\n        client_id=\"client_id\",\n        client_secret_ref=\"account.secret_id\",\n    ))\n# Authentication mechanism as username and password\ntest = harness.platform.ElasticsearchConnector(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    url=\"https://elasticsearch.com/\",\n    delegate_selectors=[\"harness-delegate\"],\n    username_password=harness.platform.ElasticsearchConnectorUsernamePasswordArgs(\n        username=\"username\",\n        password_ref=\"account.secret_id\",\n    ))\n# Authentication mechanism as username and password\nno_authentication = harness.platform.ElasticsearchConnector(\"no_authentication\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    url=\"https://elasticsearch.com/\",\n    delegate_selectors=[\"harness-delegate\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Authentication mechanism as api token\n    var token = new Harness.Platform.ElasticsearchConnector(\"token\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://elasticsearch.com/\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        ApiToken = new Harness.Platform.Inputs.ElasticsearchConnectorApiTokenArgs\n        {\n            ClientId = \"client_id\",\n            ClientSecretRef = \"account.secret_id\",\n        },\n    });\n\n    // Authentication mechanism as username and password\n    var test = new Harness.Platform.ElasticsearchConnector(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://elasticsearch.com/\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        UsernamePassword = new Harness.Platform.Inputs.ElasticsearchConnectorUsernamePasswordArgs\n        {\n            Username = \"username\",\n            PasswordRef = \"account.secret_id\",\n        },\n    });\n\n    // Authentication mechanism as username and password\n    var noAuthentication = new Harness.Platform.ElasticsearchConnector(\"no_authentication\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://elasticsearch.com/\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Authentication mechanism as api token\n\t\t_, err := platform.NewElasticsearchConnector(ctx, \"token\", \u0026platform.ElasticsearchConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://elasticsearch.com/\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tApiToken: \u0026platform.ElasticsearchConnectorApiTokenArgs{\n\t\t\t\tClientId:        pulumi.String(\"client_id\"),\n\t\t\t\tClientSecretRef: pulumi.String(\"account.secret_id\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Authentication mechanism as username and password\n\t\t_, err = platform.NewElasticsearchConnector(ctx, \"test\", \u0026platform.ElasticsearchConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://elasticsearch.com/\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tUsernamePassword: \u0026platform.ElasticsearchConnectorUsernamePasswordArgs{\n\t\t\t\tUsername:    pulumi.String(\"username\"),\n\t\t\t\tPasswordRef: pulumi.String(\"account.secret_id\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Authentication mechanism as username and password\n\t\t_, err = platform.NewElasticsearchConnector(ctx, \"no_authentication\", \u0026platform.ElasticsearchConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://elasticsearch.com/\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ElasticsearchConnector;\nimport com.pulumi.harness.platform.ElasticsearchConnectorArgs;\nimport com.pulumi.harness.platform.inputs.ElasticsearchConnectorApiTokenArgs;\nimport com.pulumi.harness.platform.inputs.ElasticsearchConnectorUsernamePasswordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Authentication mechanism as api token\n        var token = new ElasticsearchConnector(\"token\", ElasticsearchConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .url(\"https://elasticsearch.com/\")\n            .delegateSelectors(\"harness-delegate\")\n            .apiToken(ElasticsearchConnectorApiTokenArgs.builder()\n                .clientId(\"client_id\")\n                .clientSecretRef(\"account.secret_id\")\n                .build())\n            .build());\n\n        // Authentication mechanism as username and password\n        var test = new ElasticsearchConnector(\"test\", ElasticsearchConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .url(\"https://elasticsearch.com/\")\n            .delegateSelectors(\"harness-delegate\")\n            .usernamePassword(ElasticsearchConnectorUsernamePasswordArgs.builder()\n                .username(\"username\")\n                .passwordRef(\"account.secret_id\")\n                .build())\n            .build());\n\n        // Authentication mechanism as username and password\n        var noAuthentication = new ElasticsearchConnector(\"noAuthentication\", ElasticsearchConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .url(\"https://elasticsearch.com/\")\n            .delegateSelectors(\"harness-delegate\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Authentication mechanism as api token\n  token:\n    type: harness:platform:ElasticsearchConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      url: https://elasticsearch.com/\n      delegateSelectors:\n        - harness-delegate\n      apiToken:\n        clientId: client_id\n        clientSecretRef: account.secret_id\n  # Authentication mechanism as username and password\n  test:\n    type: harness:platform:ElasticsearchConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      url: https://elasticsearch.com/\n      delegateSelectors:\n        - harness-delegate\n      usernamePassword:\n        username: username\n        passwordRef: account.secret_id\n  # Authentication mechanism as username and password\n  noAuthentication:\n    type: harness:platform:ElasticsearchConnector\n    name: no_authentication\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      url: https://elasticsearch.com/\n      delegateSelectors:\n        - harness-delegate\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level elasticsearch connector \n\n```sh\n$ pulumi import harness:platform/elasticsearchConnector:ElasticsearchConnector example \u003cconnector_id\u003e\n```\n\nImport org level elasticsearch connector \n\n```sh\n$ pulumi import harness:platform/elasticsearchConnector:ElasticsearchConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level elasticsearch connector \n\n```sh\n$ pulumi import harness:platform/elasticsearchConnector:ElasticsearchConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "apiToken": {
                    "$ref": "#/types/harness:platform/ElasticsearchConnectorApiToken:ElasticsearchConnectorApiToken",
                    "description": "Authenticate to ElasticSearch using api token.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "noAuthentication": {
                    "$ref": "#/types/harness:platform/ElasticsearchConnectorNoAuthentication:ElasticsearchConnectorNoAuthentication",
                    "description": "No Authentication to ElasticSearch\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the ElasticSearch controller.\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:platform/ElasticsearchConnectorUsernamePassword:ElasticsearchConnectorUsernamePassword",
                    "description": "Authenticate to ElasticSearch using username and password.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "apiToken": {
                    "$ref": "#/types/harness:platform/ElasticsearchConnectorApiToken:ElasticsearchConnectorApiToken",
                    "description": "Authenticate to ElasticSearch using api token.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "noAuthentication": {
                    "$ref": "#/types/harness:platform/ElasticsearchConnectorNoAuthentication:ElasticsearchConnectorNoAuthentication",
                    "description": "No Authentication to ElasticSearch\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the ElasticSearch controller.\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:platform/ElasticsearchConnectorUsernamePassword:ElasticsearchConnectorUsernamePassword",
                    "description": "Authenticate to ElasticSearch using username and password.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ElasticsearchConnector resources.\n",
                "properties": {
                    "apiToken": {
                        "$ref": "#/types/harness:platform/ElasticsearchConnectorApiToken:ElasticsearchConnectorApiToken",
                        "description": "Authenticate to ElasticSearch using api token.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "noAuthentication": {
                        "$ref": "#/types/harness:platform/ElasticsearchConnectorNoAuthentication:ElasticsearchConnectorNoAuthentication",
                        "description": "No Authentication to ElasticSearch\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the ElasticSearch controller.\n"
                    },
                    "usernamePassword": {
                        "$ref": "#/types/harness:platform/ElasticsearchConnectorUsernamePassword:ElasticsearchConnectorUsernamePassword",
                        "description": "Authenticate to ElasticSearch using username and password.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/environment:Environment": {
            "description": "Resource for creating a Harness environment.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.Environment(\"example\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    tags: [\n        \"foo:bar\",\n        \"baz\",\n    ],\n    type: \"PreProduction\",\n    yaml: `environment:\n   name: name\n   identifier: identifier\n   orgIdentifier: org_id\n   projectIdentifier: project_id\n   type: PreProduction\n   tags:\n     foo: bar\n     baz: \"\"\n   variables:\n     - name: envVar1\n       type: String\n       value: v1\n       description: \"\"\n     - name: envVar2\n       type: String\n       value: v2\n       description: \"\"\n   overrides:\n     manifests:\n       - manifest:\n           identifier: manifestEnv\n           type: Values\n           spec:\n             store:\n               type: Git\n               spec:\n                 connectorRef: \u003c+input\u003e\n                 gitFetchType: Branch\n                 paths:\n                   - file1\n                 repoName: \u003c+input\u003e\n                 branch: master\n     configFiles:\n       - configFile:\n           identifier: configFileEnv\n           spec:\n             store:\n               type: Harness\n               spec:\n                 files:\n                   - account:/Add-ons/svcOverrideTest\n                 secretFiles: []\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.Environment(\"example\",\n    identifier=\"identifier\",\n    name=\"name\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    tags=[\n        \"foo:bar\",\n        \"baz\",\n    ],\n    type=\"PreProduction\",\n    yaml=\"\"\"environment:\n   name: name\n   identifier: identifier\n   orgIdentifier: org_id\n   projectIdentifier: project_id\n   type: PreProduction\n   tags:\n     foo: bar\n     baz: \"\"\n   variables:\n     - name: envVar1\n       type: String\n       value: v1\n       description: \"\"\n     - name: envVar2\n       type: String\n       value: v2\n       description: \"\"\n   overrides:\n     manifests:\n       - manifest:\n           identifier: manifestEnv\n           type: Values\n           spec:\n             store:\n               type: Git\n               spec:\n                 connectorRef: \u003c+input\u003e\n                 gitFetchType: Branch\n                 paths:\n                   - file1\n                 repoName: \u003c+input\u003e\n                 branch: master\n     configFiles:\n       - configFile:\n           identifier: configFileEnv\n           spec:\n             store:\n               type: Harness\n               spec:\n                 files:\n                   - account:/Add-ons/svcOverrideTest\n                 secretFiles: []\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.Environment(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n            \"baz\",\n        },\n        Type = \"PreProduction\",\n        Yaml = @\"environment:\n   name: name\n   identifier: identifier\n   orgIdentifier: org_id\n   projectIdentifier: project_id\n   type: PreProduction\n   tags:\n     foo: bar\n     baz: \"\"\"\"\n   variables:\n     - name: envVar1\n       type: String\n       value: v1\n       description: \"\"\"\"\n     - name: envVar2\n       type: String\n       value: v2\n       description: \"\"\"\"\n   overrides:\n     manifests:\n       - manifest:\n           identifier: manifestEnv\n           type: Values\n           spec:\n             store:\n               type: Git\n               spec:\n                 connectorRef: \u003c+input\u003e\n                 gitFetchType: Branch\n                 paths:\n                   - file1\n                 repoName: \u003c+input\u003e\n                 branch: master\n     configFiles:\n       - configFile:\n           identifier: configFileEnv\n           spec:\n             store:\n               type: Harness\n               spec:\n                 files:\n                   - account:/Add-ons/svcOverrideTest\n                 secretFiles: []\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewEnvironment(ctx, \"example\", \u0026platform.EnvironmentArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tName:       pulumi.String(\"name\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t\tpulumi.String(\"baz\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"PreProduction\"),\n\t\t\tYaml: pulumi.String(`environment:\n   name: name\n   identifier: identifier\n   orgIdentifier: org_id\n   projectIdentifier: project_id\n   type: PreProduction\n   tags:\n     foo: bar\n     baz: \"\"\n   variables:\n     - name: envVar1\n       type: String\n       value: v1\n       description: \"\"\n     - name: envVar2\n       type: String\n       value: v2\n       description: \"\"\n   overrides:\n     manifests:\n       - manifest:\n           identifier: manifestEnv\n           type: Values\n           spec:\n             store:\n               type: Git\n               spec:\n                 connectorRef: \u003c+input\u003e\n                 gitFetchType: Branch\n                 paths:\n                   - file1\n                 repoName: \u003c+input\u003e\n                 branch: master\n     configFiles:\n       - configFile:\n           identifier: configFileEnv\n           spec:\n             store:\n               type: Harness\n               spec:\n                 files:\n                   - account:/Add-ons/svcOverrideTest\n                 secretFiles: []\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Environment;\nimport com.pulumi.harness.platform.EnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Environment(\"example\", EnvironmentArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .tags(            \n                \"foo:bar\",\n                \"baz\")\n            .type(\"PreProduction\")\n            .yaml(\"\"\"\nenvironment:\n   name: name\n   identifier: identifier\n   orgIdentifier: org_id\n   projectIdentifier: project_id\n   type: PreProduction\n   tags:\n     foo: bar\n     baz: \"\"\n   variables:\n     - name: envVar1\n       type: String\n       value: v1\n       description: \"\"\n     - name: envVar2\n       type: String\n       value: v2\n       description: \"\"\n   overrides:\n     manifests:\n       - manifest:\n           identifier: manifestEnv\n           type: Values\n           spec:\n             store:\n               type: Git\n               spec:\n                 connectorRef: \u003c+input\u003e\n                 gitFetchType: Branch\n                 paths:\n                   - file1\n                 repoName: \u003c+input\u003e\n                 branch: master\n     configFiles:\n       - configFile:\n           identifier: configFileEnv\n           spec:\n             store:\n               type: Harness\n               spec:\n                 files:\n                   - account:/Add-ons/svcOverrideTest\n                 secretFiles: []\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:Environment\n    properties:\n      identifier: identifier\n      name: name\n      orgId: org_id\n      projectId: project_id\n      tags:\n        - foo:bar\n        - baz\n      type: PreProduction\n      yaml: |\n        environment:\n           name: name\n           identifier: identifier\n           orgIdentifier: org_id\n           projectIdentifier: project_id\n           type: PreProduction\n           tags:\n             foo: bar\n             baz: \"\"\n           variables:\n             - name: envVar1\n               type: String\n               value: v1\n               description: \"\"\n             - name: envVar2\n               type: String\n               value: v2\n               description: \"\"\n           overrides:\n             manifests:\n               - manifest:\n                   identifier: manifestEnv\n                   type: Values\n                   spec:\n                     store:\n                       type: Git\n                       spec:\n                         connectorRef: \u003c+input\u003e\n                         gitFetchType: Branch\n                         paths:\n                           - file1\n                         repoName: \u003c+input\u003e\n                         branch: master\n             configFiles:\n               - configFile:\n                   identifier: configFileEnv\n                   spec:\n                     store:\n                       type: Harness\n                       spec:\n                         files:\n                           - account:/Add-ons/svcOverrideTest\n                         secretFiles: []\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level environment id\n\n```sh\n$ pulumi import harness:platform/environment:Environment example \u003cenvironment_id\u003e\n```\n\nImport org level environment id\n\n```sh\n$ pulumi import harness:platform/environment:Environment example \u003corg_id\u003e/\u003cenvironment_id\u003e\n```\n\nImport project level environment id\n\n```sh\n$ pulumi import harness:platform/environment:Environment example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cenvironment_id\u003e\n```\n\n",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Color of the environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of environment\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of environment. Valid values are PreProduction, Production\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Environment YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "required": [
                "color",
                "forceDelete",
                "identifier",
                "name",
                "type"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "Color of the environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of environment\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of environment. Valid values are PreProduction, Production\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Environment YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Color of the environment.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "forceDelete": {
                        "type": "string",
                        "description": "Enable this flag for force deletion of environment\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of environment. Valid values are PreProduction, Production\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Environment YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/environmentClustersMapping:EnvironmentClustersMapping": {
            "description": "Resource for mapping environment with Harness Clusters.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.EnvironmentClustersMapping(\"example\", {\n    identifier: \"identifier\",\n    orgId: \"orgIdentifer\",\n    projectId: \"projectIdentifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.EnvironmentClustersMapping(\"example\",\n    identifier=\"identifier\",\n    org_id=\"orgIdentifer\",\n    project_id=\"projectIdentifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.EnvironmentClustersMapping(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"orgIdentifer\",\n        ProjectId = \"projectIdentifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewEnvironmentClustersMapping(ctx, \"example\", \u0026platform.EnvironmentClustersMappingArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tOrgId:      pulumi.String(\"orgIdentifer\"),\n\t\t\tProjectId:  pulumi.String(\"projectIdentifier\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.EnvironmentClustersMapping;\nimport com.pulumi.harness.platform.EnvironmentClustersMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new EnvironmentClustersMapping(\"example\", EnvironmentClustersMappingArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"orgIdentifer\")\n            .projectId(\"projectIdentifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:EnvironmentClustersMapping\n    properties:\n      identifier: identifier\n      orgId: orgIdentifer\n      projectId: projectIdentifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the cluster.\n\n```sh\n$ pulumi import harness:platform/environmentClustersMapping:EnvironmentClustersMapping example \u003ccluster_id\u003e\n```\n\n",
            "properties": {
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/EnvironmentClustersMappingCluster:EnvironmentClustersMappingCluster"
                    },
                    "description": "list of cluster identifiers and names\n"
                },
                "envId": {
                    "type": "string",
                    "description": "environment identifier.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "identifier of the cluster.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "org_id of the cluster.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "project_id of the cluster.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "scope at which the cluster exists in harness gitops\n"
                }
            },
            "required": [
                "envId",
                "identifier",
                "scope"
            ],
            "inputProperties": {
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/EnvironmentClustersMappingCluster:EnvironmentClustersMappingCluster"
                    },
                    "description": "list of cluster identifiers and names\n"
                },
                "envId": {
                    "type": "string",
                    "description": "environment identifier.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "identifier of the cluster.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "org_id of the cluster.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "project_id of the cluster.\n"
                }
            },
            "requiredInputs": [
                "envId",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EnvironmentClustersMapping resources.\n",
                "properties": {
                    "clusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/EnvironmentClustersMappingCluster:EnvironmentClustersMappingCluster"
                        },
                        "description": "list of cluster identifiers and names\n"
                    },
                    "envId": {
                        "type": "string",
                        "description": "environment identifier.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "identifier of the cluster.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "org_id of the cluster.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project_id of the cluster.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "scope at which the cluster exists in harness gitops\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/environmentGroup:EnvironmentGroup": {
            "description": "Resource for creating a Harness environment group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.EnvironmentGroup(\"example\", {\n    identifier: \"identifier\",\n    orgId: \"orgIdentifer\",\n    projectId: \"projectIdentifier\",\n    color: \"#0063F7\",\n    yaml: `environmentGroup:\n  name: \"name\"\n  identifier: \"identifier\"\n  description: \"temp\"\n  orgIdentifier: \"orgIdentifer\"\n  projectIdentifier: \"projectIdentifier\"\n  envIdentifiers: []\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.EnvironmentGroup(\"example\",\n    identifier=\"identifier\",\n    org_id=\"orgIdentifer\",\n    project_id=\"projectIdentifier\",\n    color=\"#0063F7\",\n    yaml=\"\"\"environmentGroup:\n  name: \"name\"\n  identifier: \"identifier\"\n  description: \"temp\"\n  orgIdentifier: \"orgIdentifer\"\n  projectIdentifier: \"projectIdentifier\"\n  envIdentifiers: []\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.EnvironmentGroup(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"orgIdentifer\",\n        ProjectId = \"projectIdentifier\",\n        Color = \"#0063F7\",\n        Yaml = @\"environmentGroup:\n  name: \"\"name\"\"\n  identifier: \"\"identifier\"\"\n  description: \"\"temp\"\"\n  orgIdentifier: \"\"orgIdentifer\"\"\n  projectIdentifier: \"\"projectIdentifier\"\"\n  envIdentifiers: []\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewEnvironmentGroup(ctx, \"example\", \u0026platform.EnvironmentGroupArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tOrgId:      pulumi.String(\"orgIdentifer\"),\n\t\t\tProjectId:  pulumi.String(\"projectIdentifier\"),\n\t\t\tColor:      pulumi.String(\"#0063F7\"),\n\t\t\tYaml: pulumi.String(`environmentGroup:\n  name: \"name\"\n  identifier: \"identifier\"\n  description: \"temp\"\n  orgIdentifier: \"orgIdentifer\"\n  projectIdentifier: \"projectIdentifier\"\n  envIdentifiers: []\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.EnvironmentGroup;\nimport com.pulumi.harness.platform.EnvironmentGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new EnvironmentGroup(\"example\", EnvironmentGroupArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"orgIdentifer\")\n            .projectId(\"projectIdentifier\")\n            .color(\"#0063F7\")\n            .yaml(\"\"\"\nenvironmentGroup:\n  name: \"name\"\n  identifier: \"identifier\"\n  description: \"temp\"\n  orgIdentifier: \"orgIdentifer\"\n  projectIdentifier: \"projectIdentifier\"\n  envIdentifiers: []\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:EnvironmentGroup\n    properties:\n      identifier: identifier\n      orgId: orgIdentifer\n      projectId: projectIdentifier\n      color: '#0063F7'\n      yaml: |\n        environmentGroup:\n          name: \"name\"\n          identifier: \"identifier\"\n          description: \"temp\"\n          orgIdentifier: \"orgIdentifer\"\n          projectIdentifier: \"projectIdentifier\"\n          envIdentifiers: []\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the environment group id.\n\n```sh\n$ pulumi import harness:platform/environmentGroup:EnvironmentGroup example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cenvironment_group_id\u003e\n```\n\n",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Color of the environment group.\n"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of environment group\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "identifier of the environment group.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "org_id of the environment group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "project_id of the environment group.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Env group YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "required": [
                "color",
                "forceDelete",
                "identifier",
                "yaml"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "Color of the environment group.\n"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of environment group\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "identifier of the environment group.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "org_id of the environment group.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "project_id of the environment group.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Env group YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "yaml"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EnvironmentGroup resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Color of the environment group.\n"
                    },
                    "forceDelete": {
                        "type": "string",
                        "description": "Enable this flag for force deletion of environment group\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "identifier of the environment group.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "org_id of the environment group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project_id of the environment group.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Env group YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/environmentServiceOverrides:EnvironmentServiceOverrides": {
            "description": "Resource for creating a Harness environment service overrides.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.EnvironmentServiceOverrides(\"example\", {\n    orgId: \"orgIdentifier\",\n    projectId: \"projectIdentifier\",\n    envId: \"environmentIdentifier\",\n    serviceId: \"serviceIdentifier\",\n    yaml: `serviceOverrides:\n  environmentRef: environmentIdentifier\n  serviceRef: serviceIdentifier\n  variables:\n   - name: asda\n     type: String\n     value: asddad\n  manifests:\n     - manifest:\n         identifier: manifestEnv\n         type: Values\n         spec:\n           store:\n             type: Git\n             spec:\n               connectorRef: \u003c+input\u003e\n               gitFetchType: Branch\n               paths:\n                 - file1\n               repoName: \u003c+input\u003e\n               branch: master\n  configFiles:\n     - configFile:\n         identifier: configFileEnv\n         spec:\n           store:\n             type: Harness\n             spec:\n               files:\n                 - account:/Add-ons/svcOverrideTest\n               secretFiles: []\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.EnvironmentServiceOverrides(\"example\",\n    org_id=\"orgIdentifier\",\n    project_id=\"projectIdentifier\",\n    env_id=\"environmentIdentifier\",\n    service_id=\"serviceIdentifier\",\n    yaml=\"\"\"serviceOverrides:\n  environmentRef: environmentIdentifier\n  serviceRef: serviceIdentifier\n  variables:\n   - name: asda\n     type: String\n     value: asddad\n  manifests:\n     - manifest:\n         identifier: manifestEnv\n         type: Values\n         spec:\n           store:\n             type: Git\n             spec:\n               connectorRef: \u003c+input\u003e\n               gitFetchType: Branch\n               paths:\n                 - file1\n               repoName: \u003c+input\u003e\n               branch: master\n  configFiles:\n     - configFile:\n         identifier: configFileEnv\n         spec:\n           store:\n             type: Harness\n             spec:\n               files:\n                 - account:/Add-ons/svcOverrideTest\n               secretFiles: []\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.EnvironmentServiceOverrides(\"example\", new()\n    {\n        OrgId = \"orgIdentifier\",\n        ProjectId = \"projectIdentifier\",\n        EnvId = \"environmentIdentifier\",\n        ServiceId = \"serviceIdentifier\",\n        Yaml = @\"serviceOverrides:\n  environmentRef: environmentIdentifier\n  serviceRef: serviceIdentifier\n  variables:\n   - name: asda\n     type: String\n     value: asddad\n  manifests:\n     - manifest:\n         identifier: manifestEnv\n         type: Values\n         spec:\n           store:\n             type: Git\n             spec:\n               connectorRef: \u003c+input\u003e\n               gitFetchType: Branch\n               paths:\n                 - file1\n               repoName: \u003c+input\u003e\n               branch: master\n  configFiles:\n     - configFile:\n         identifier: configFileEnv\n         spec:\n           store:\n             type: Harness\n             spec:\n               files:\n                 - account:/Add-ons/svcOverrideTest\n               secretFiles: []\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewEnvironmentServiceOverrides(ctx, \"example\", \u0026platform.EnvironmentServiceOverridesArgs{\n\t\t\tOrgId:     pulumi.String(\"orgIdentifier\"),\n\t\t\tProjectId: pulumi.String(\"projectIdentifier\"),\n\t\t\tEnvId:     pulumi.String(\"environmentIdentifier\"),\n\t\t\tServiceId: pulumi.String(\"serviceIdentifier\"),\n\t\t\tYaml: pulumi.String(`serviceOverrides:\n  environmentRef: environmentIdentifier\n  serviceRef: serviceIdentifier\n  variables:\n   - name: asda\n     type: String\n     value: asddad\n  manifests:\n     - manifest:\n         identifier: manifestEnv\n         type: Values\n         spec:\n           store:\n             type: Git\n             spec:\n               connectorRef: \u003c+input\u003e\n               gitFetchType: Branch\n               paths:\n                 - file1\n               repoName: \u003c+input\u003e\n               branch: master\n  configFiles:\n     - configFile:\n         identifier: configFileEnv\n         spec:\n           store:\n             type: Harness\n             spec:\n               files:\n                 - account:/Add-ons/svcOverrideTest\n               secretFiles: []\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.EnvironmentServiceOverrides;\nimport com.pulumi.harness.platform.EnvironmentServiceOverridesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new EnvironmentServiceOverrides(\"example\", EnvironmentServiceOverridesArgs.builder()\n            .orgId(\"orgIdentifier\")\n            .projectId(\"projectIdentifier\")\n            .envId(\"environmentIdentifier\")\n            .serviceId(\"serviceIdentifier\")\n            .yaml(\"\"\"\nserviceOverrides:\n  environmentRef: environmentIdentifier\n  serviceRef: serviceIdentifier\n  variables:\n   - name: asda\n     type: String\n     value: asddad\n  manifests:\n     - manifest:\n         identifier: manifestEnv\n         type: Values\n         spec:\n           store:\n             type: Git\n             spec:\n               connectorRef: \u003c+input\u003e\n               gitFetchType: Branch\n               paths:\n                 - file1\n               repoName: \u003c+input\u003e\n               branch: master\n  configFiles:\n     - configFile:\n         identifier: configFileEnv\n         spec:\n           store:\n             type: Harness\n             spec:\n               files:\n                 - account:/Add-ons/svcOverrideTest\n               secretFiles: []\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:EnvironmentServiceOverrides\n    properties:\n      orgId: orgIdentifier\n      projectId: projectIdentifier\n      envId: environmentIdentifier\n      serviceId: serviceIdentifier\n      yaml: |\n        serviceOverrides:\n          environmentRef: environmentIdentifier\n          serviceRef: serviceIdentifier\n          variables:\n           - name: asda\n             type: String\n             value: asddad\n          manifests:\n             - manifest:\n                 identifier: manifestEnv\n                 type: Values\n                 spec:\n                   store:\n                     type: Git\n                     spec:\n                       connectorRef: \u003c+input\u003e\n                       gitFetchType: Branch\n                       paths:\n                         - file1\n                       repoName: \u003c+input\u003e\n                       branch: master\n          configFiles:\n             - configFile:\n                 identifier: configFileEnv\n                 spec:\n                   store:\n                     type: Harness\n                     spec:\n                       files:\n                         - account:/Add-ons/svcOverrideTest\n                       secretFiles: []\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using serviceoverride id\n\n```sh\n$ pulumi import harness:platform/environmentServiceOverrides:EnvironmentServiceOverrides example \u003cserviceoverride_id\u003e\n```\n\n",
            "properties": {
                "envId": {
                    "type": "string",
                    "description": "The env Id associated with the overrides. To reference an environment at the organization scope, prefix 'org' to the expression: org.{env*id}. To reference an environment at the account scope, prefix 'account' to the expression: account.{env*id}).\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "identifier of the service overrides.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The service Id associated with the overrides. To reference a service at the organization scope, prefix 'org' to the expression: org.{service*id}. To reference a service at the account scope, prefix 'account' to the expression: account.{service*id}).\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Environment Service Overrides YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "required": [
                "envId",
                "identifier",
                "serviceId",
                "yaml"
            ],
            "inputProperties": {
                "envId": {
                    "type": "string",
                    "description": "The env Id associated with the overrides. To reference an environment at the organization scope, prefix 'org' to the expression: org.{env*id}. To reference an environment at the account scope, prefix 'account' to the expression: account.{env*id}).\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "identifier of the service overrides.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The service Id associated with the overrides. To reference a service at the organization scope, prefix 'org' to the expression: org.{service*id}. To reference a service at the account scope, prefix 'account' to the expression: account.{service*id}).\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Environment Service Overrides YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "requiredInputs": [
                "envId",
                "serviceId",
                "yaml"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EnvironmentServiceOverrides resources.\n",
                "properties": {
                    "envId": {
                        "type": "string",
                        "description": "The env Id associated with the overrides. To reference an environment at the organization scope, prefix 'org' to the expression: org.{env*id}. To reference an environment at the account scope, prefix 'account' to the expression: account.{env*id}).\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "identifier of the service overrides.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The service Id associated with the overrides. To reference a service at the organization scope, prefix 'org' to the expression: org.{service*id}. To reference a service at the account scope, prefix 'account' to the expression: account.{service*id}).\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Environment Service Overrides YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/featureFlag:FeatureFlag": {
            "description": "Resource for managing Feature Flags.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\n// Boolean Flag\nconst mybooleanflag = new harness.platform.FeatureFlag(\"mybooleanflag\", {\n    orgId: \"test\",\n    projectId: \"testff\",\n    kind: \"boolean\",\n    name: \"MY_FEATURE\",\n    identifier: \"MY_FEATURE\",\n    permanent: false,\n    defaultOnVariation: \"Enabled\",\n    defaultOffVariation: \"Disabled\",\n    variations: [\n        {\n            identifier: \"Enabled\",\n            name: \"Enabled\",\n            description: \"The feature is enabled\",\n            value: \"true\",\n        },\n        {\n            identifier: \"Disabled\",\n            name: \"Disabled\",\n            description: \"The feature is disabled\",\n            value: \"false\",\n        },\n    ],\n});\n// Multivariate flag\nconst mymultivariateflag = new harness.platform.FeatureFlag(\"mymultivariateflag\", {\n    orgId: \"test\",\n    projectId: \"testff\",\n    kind: \"int\",\n    name: \"FREE_TRIAL_DURATION\",\n    identifier: \"FREE_TRIAL_DURATION\",\n    permanent: false,\n    defaultOnVariation: \"trial7\",\n    defaultOffVariation: \"trial20\",\n    variations: [\n        {\n            identifier: \"trial7\",\n            name: \"7 days trial\",\n            description: \"Free trial period 7 days\",\n            value: \"7\",\n        },\n        {\n            identifier: \"trial14\",\n            name: \"14 days trial\",\n            description: \"Free trial period 14 days\",\n            value: \"14\",\n        },\n        {\n            identifier: \"trial20\",\n            name: \"20 days trial\",\n            description: \"Free trial period 20 days\",\n            value: \"20\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\n# Boolean Flag\nmybooleanflag = harness.platform.FeatureFlag(\"mybooleanflag\",\n    org_id=\"test\",\n    project_id=\"testff\",\n    kind=\"boolean\",\n    name=\"MY_FEATURE\",\n    identifier=\"MY_FEATURE\",\n    permanent=False,\n    default_on_variation=\"Enabled\",\n    default_off_variation=\"Disabled\",\n    variations=[\n        harness.platform.FeatureFlagVariationArgs(\n            identifier=\"Enabled\",\n            name=\"Enabled\",\n            description=\"The feature is enabled\",\n            value=\"true\",\n        ),\n        harness.platform.FeatureFlagVariationArgs(\n            identifier=\"Disabled\",\n            name=\"Disabled\",\n            description=\"The feature is disabled\",\n            value=\"false\",\n        ),\n    ])\n# Multivariate flag\nmymultivariateflag = harness.platform.FeatureFlag(\"mymultivariateflag\",\n    org_id=\"test\",\n    project_id=\"testff\",\n    kind=\"int\",\n    name=\"FREE_TRIAL_DURATION\",\n    identifier=\"FREE_TRIAL_DURATION\",\n    permanent=False,\n    default_on_variation=\"trial7\",\n    default_off_variation=\"trial20\",\n    variations=[\n        harness.platform.FeatureFlagVariationArgs(\n            identifier=\"trial7\",\n            name=\"7 days trial\",\n            description=\"Free trial period 7 days\",\n            value=\"7\",\n        ),\n        harness.platform.FeatureFlagVariationArgs(\n            identifier=\"trial14\",\n            name=\"14 days trial\",\n            description=\"Free trial period 14 days\",\n            value=\"14\",\n        ),\n        harness.platform.FeatureFlagVariationArgs(\n            identifier=\"trial20\",\n            name=\"20 days trial\",\n            description=\"Free trial period 20 days\",\n            value=\"20\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Boolean Flag\n    var mybooleanflag = new Harness.Platform.FeatureFlag(\"mybooleanflag\", new()\n    {\n        OrgId = \"test\",\n        ProjectId = \"testff\",\n        Kind = \"boolean\",\n        Name = \"MY_FEATURE\",\n        Identifier = \"MY_FEATURE\",\n        Permanent = false,\n        DefaultOnVariation = \"Enabled\",\n        DefaultOffVariation = \"Disabled\",\n        Variations = new[]\n        {\n            new Harness.Platform.Inputs.FeatureFlagVariationArgs\n            {\n                Identifier = \"Enabled\",\n                Name = \"Enabled\",\n                Description = \"The feature is enabled\",\n                Value = \"true\",\n            },\n            new Harness.Platform.Inputs.FeatureFlagVariationArgs\n            {\n                Identifier = \"Disabled\",\n                Name = \"Disabled\",\n                Description = \"The feature is disabled\",\n                Value = \"false\",\n            },\n        },\n    });\n\n    // Multivariate flag\n    var mymultivariateflag = new Harness.Platform.FeatureFlag(\"mymultivariateflag\", new()\n    {\n        OrgId = \"test\",\n        ProjectId = \"testff\",\n        Kind = \"int\",\n        Name = \"FREE_TRIAL_DURATION\",\n        Identifier = \"FREE_TRIAL_DURATION\",\n        Permanent = false,\n        DefaultOnVariation = \"trial7\",\n        DefaultOffVariation = \"trial20\",\n        Variations = new[]\n        {\n            new Harness.Platform.Inputs.FeatureFlagVariationArgs\n            {\n                Identifier = \"trial7\",\n                Name = \"7 days trial\",\n                Description = \"Free trial period 7 days\",\n                Value = \"7\",\n            },\n            new Harness.Platform.Inputs.FeatureFlagVariationArgs\n            {\n                Identifier = \"trial14\",\n                Name = \"14 days trial\",\n                Description = \"Free trial period 14 days\",\n                Value = \"14\",\n            },\n            new Harness.Platform.Inputs.FeatureFlagVariationArgs\n            {\n                Identifier = \"trial20\",\n                Name = \"20 days trial\",\n                Description = \"Free trial period 20 days\",\n                Value = \"20\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Boolean Flag\n\t\t_, err := platform.NewFeatureFlag(ctx, \"mybooleanflag\", \u0026platform.FeatureFlagArgs{\n\t\t\tOrgId:               pulumi.String(\"test\"),\n\t\t\tProjectId:           pulumi.String(\"testff\"),\n\t\t\tKind:                pulumi.String(\"boolean\"),\n\t\t\tName:                pulumi.String(\"MY_FEATURE\"),\n\t\t\tIdentifier:          pulumi.String(\"MY_FEATURE\"),\n\t\t\tPermanent:           pulumi.Bool(false),\n\t\t\tDefaultOnVariation:  pulumi.String(\"Enabled\"),\n\t\t\tDefaultOffVariation: pulumi.String(\"Disabled\"),\n\t\t\tVariations: platform.FeatureFlagVariationArray{\n\t\t\t\t\u0026platform.FeatureFlagVariationArgs{\n\t\t\t\t\tIdentifier:  pulumi.String(\"Enabled\"),\n\t\t\t\t\tName:        pulumi.String(\"Enabled\"),\n\t\t\t\t\tDescription: pulumi.String(\"The feature is enabled\"),\n\t\t\t\t\tValue:       pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.FeatureFlagVariationArgs{\n\t\t\t\t\tIdentifier:  pulumi.String(\"Disabled\"),\n\t\t\t\t\tName:        pulumi.String(\"Disabled\"),\n\t\t\t\t\tDescription: pulumi.String(\"The feature is disabled\"),\n\t\t\t\t\tValue:       pulumi.String(\"false\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Multivariate flag\n\t\t_, err = platform.NewFeatureFlag(ctx, \"mymultivariateflag\", \u0026platform.FeatureFlagArgs{\n\t\t\tOrgId:               pulumi.String(\"test\"),\n\t\t\tProjectId:           pulumi.String(\"testff\"),\n\t\t\tKind:                pulumi.String(\"int\"),\n\t\t\tName:                pulumi.String(\"FREE_TRIAL_DURATION\"),\n\t\t\tIdentifier:          pulumi.String(\"FREE_TRIAL_DURATION\"),\n\t\t\tPermanent:           pulumi.Bool(false),\n\t\t\tDefaultOnVariation:  pulumi.String(\"trial7\"),\n\t\t\tDefaultOffVariation: pulumi.String(\"trial20\"),\n\t\t\tVariations: platform.FeatureFlagVariationArray{\n\t\t\t\t\u0026platform.FeatureFlagVariationArgs{\n\t\t\t\t\tIdentifier:  pulumi.String(\"trial7\"),\n\t\t\t\t\tName:        pulumi.String(\"7 days trial\"),\n\t\t\t\t\tDescription: pulumi.String(\"Free trial period 7 days\"),\n\t\t\t\t\tValue:       pulumi.String(\"7\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.FeatureFlagVariationArgs{\n\t\t\t\t\tIdentifier:  pulumi.String(\"trial14\"),\n\t\t\t\t\tName:        pulumi.String(\"14 days trial\"),\n\t\t\t\t\tDescription: pulumi.String(\"Free trial period 14 days\"),\n\t\t\t\t\tValue:       pulumi.String(\"14\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.FeatureFlagVariationArgs{\n\t\t\t\t\tIdentifier:  pulumi.String(\"trial20\"),\n\t\t\t\t\tName:        pulumi.String(\"20 days trial\"),\n\t\t\t\t\tDescription: pulumi.String(\"Free trial period 20 days\"),\n\t\t\t\t\tValue:       pulumi.String(\"20\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.FeatureFlag;\nimport com.pulumi.harness.platform.FeatureFlagArgs;\nimport com.pulumi.harness.platform.inputs.FeatureFlagVariationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Boolean Flag\n        var mybooleanflag = new FeatureFlag(\"mybooleanflag\", FeatureFlagArgs.builder()\n            .orgId(\"test\")\n            .projectId(\"testff\")\n            .kind(\"boolean\")\n            .name(\"MY_FEATURE\")\n            .identifier(\"MY_FEATURE\")\n            .permanent(false)\n            .defaultOnVariation(\"Enabled\")\n            .defaultOffVariation(\"Disabled\")\n            .variations(            \n                FeatureFlagVariationArgs.builder()\n                    .identifier(\"Enabled\")\n                    .name(\"Enabled\")\n                    .description(\"The feature is enabled\")\n                    .value(\"true\")\n                    .build(),\n                FeatureFlagVariationArgs.builder()\n                    .identifier(\"Disabled\")\n                    .name(\"Disabled\")\n                    .description(\"The feature is disabled\")\n                    .value(\"false\")\n                    .build())\n            .build());\n\n        // Multivariate flag\n        var mymultivariateflag = new FeatureFlag(\"mymultivariateflag\", FeatureFlagArgs.builder()\n            .orgId(\"test\")\n            .projectId(\"testff\")\n            .kind(\"int\")\n            .name(\"FREE_TRIAL_DURATION\")\n            .identifier(\"FREE_TRIAL_DURATION\")\n            .permanent(false)\n            .defaultOnVariation(\"trial7\")\n            .defaultOffVariation(\"trial20\")\n            .variations(            \n                FeatureFlagVariationArgs.builder()\n                    .identifier(\"trial7\")\n                    .name(\"7 days trial\")\n                    .description(\"Free trial period 7 days\")\n                    .value(\"7\")\n                    .build(),\n                FeatureFlagVariationArgs.builder()\n                    .identifier(\"trial14\")\n                    .name(\"14 days trial\")\n                    .description(\"Free trial period 14 days\")\n                    .value(\"14\")\n                    .build(),\n                FeatureFlagVariationArgs.builder()\n                    .identifier(\"trial20\")\n                    .name(\"20 days trial\")\n                    .description(\"Free trial period 20 days\")\n                    .value(\"20\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Boolean Flag\n  mybooleanflag:\n    type: harness:platform:FeatureFlag\n    properties:\n      orgId: test\n      projectId: testff\n      kind: boolean\n      name: MY_FEATURE\n      identifier: MY_FEATURE\n      permanent: false\n      defaultOnVariation: Enabled\n      defaultOffVariation: Disabled\n      variations:\n        - identifier: Enabled\n          name: Enabled\n          description: The feature is enabled\n          value: 'true'\n        - identifier: Disabled\n          name: Disabled\n          description: The feature is disabled\n          value: 'false'\n  # Multivariate flag\n  mymultivariateflag:\n    type: harness:platform:FeatureFlag\n    properties:\n      orgId: test\n      projectId: testff\n      kind: int\n      name: FREE_TRIAL_DURATION\n      identifier: FREE_TRIAL_DURATION\n      permanent: false\n      defaultOnVariation: trial7\n      defaultOffVariation: trial20\n      variations:\n        - identifier: trial7\n          name: 7 days trial\n          description: Free trial period 7 days\n          value: '7'\n        - identifier: trial14\n          name: 14 days trial\n          description: Free trial period 14 days\n          value: '14'\n        - identifier: trial20\n          name: 20 days trial\n          description: Free trial period 20 days\n          value: '20'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "archived": {
                    "type": "boolean",
                    "description": "Whether or not the flag is archived\n"
                },
                "defaultOffVariation": {
                    "type": "string",
                    "description": "Which of the variations to use when the flag is toggled to off state\n"
                },
                "defaultOnVariation": {
                    "type": "string",
                    "description": "Which of the variations to use when the flag is toggled to on state\n"
                },
                "gitDetails": {
                    "$ref": "#/types/harness:platform/FeatureFlagGitDetails:FeatureFlagGitDetails"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the Feature Flag\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The type of data the flag represents. Valid values are `boolean`, `int`, `string`, `json`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Feature Flag\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of the flag\n"
                },
                "permanent": {
                    "type": "boolean",
                    "description": "Whether or not the flag is permanent. If it is, it will never be flagged as stale\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier\n"
                },
                "variations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/FeatureFlagVariation:FeatureFlagVariation"
                    },
                    "description": "The options available for your flag\n"
                }
            },
            "required": [
                "defaultOffVariation",
                "defaultOnVariation",
                "identifier",
                "kind",
                "name",
                "orgId",
                "permanent",
                "projectId",
                "variations"
            ],
            "inputProperties": {
                "archived": {
                    "type": "boolean",
                    "description": "Whether or not the flag is archived\n",
                    "willReplaceOnChanges": true
                },
                "defaultOffVariation": {
                    "type": "string",
                    "description": "Which of the variations to use when the flag is toggled to off state\n",
                    "willReplaceOnChanges": true
                },
                "defaultOnVariation": {
                    "type": "string",
                    "description": "Which of the variations to use when the flag is toggled to on state\n",
                    "willReplaceOnChanges": true
                },
                "gitDetails": {
                    "$ref": "#/types/harness:platform/FeatureFlagGitDetails:FeatureFlagGitDetails",
                    "willReplaceOnChanges": true
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the Feature Flag\n",
                    "willReplaceOnChanges": true
                },
                "kind": {
                    "type": "string",
                    "description": "The type of data the flag represents. Valid values are `boolean`, `int`, `string`, `json`\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Feature Flag\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier\n",
                    "willReplaceOnChanges": true
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of the flag\n",
                    "willReplaceOnChanges": true
                },
                "permanent": {
                    "type": "boolean",
                    "description": "Whether or not the flag is permanent. If it is, it will never be flagged as stale\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier\n",
                    "willReplaceOnChanges": true
                },
                "variations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/FeatureFlagVariation:FeatureFlagVariation"
                    },
                    "description": "The options available for your flag\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "defaultOffVariation",
                "defaultOnVariation",
                "identifier",
                "kind",
                "orgId",
                "permanent",
                "projectId",
                "variations"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FeatureFlag resources.\n",
                "properties": {
                    "archived": {
                        "type": "boolean",
                        "description": "Whether or not the flag is archived\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultOffVariation": {
                        "type": "string",
                        "description": "Which of the variations to use when the flag is toggled to off state\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultOnVariation": {
                        "type": "string",
                        "description": "Which of the variations to use when the flag is toggled to on state\n",
                        "willReplaceOnChanges": true
                    },
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/FeatureFlagGitDetails:FeatureFlagGitDetails",
                        "willReplaceOnChanges": true
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the Feature Flag\n",
                        "willReplaceOnChanges": true
                    },
                    "kind": {
                        "type": "string",
                        "description": "The type of data the flag represents. Valid values are `boolean`, `int`, `string`, `json`\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Feature Flag\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "The owner of the flag\n",
                        "willReplaceOnChanges": true
                    },
                    "permanent": {
                        "type": "boolean",
                        "description": "Whether or not the flag is permanent. If it is, it will never be flagged as stale\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "variations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/FeatureFlagVariation:FeatureFlagVariation"
                        },
                        "description": "The options available for your flag\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/featureFlagApiKey:FeatureFlagApiKey": {
            "description": "Resource for creating an environment SDK key for Feature Flags.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst testserverapikey = new harness.platform.FeatureFlagApiKey(\"testserverapikey\", {\n    identifier: \"testserver\",\n    name: \"TestServer\",\n    description: \"this is a server SDK key\",\n    orgId: \"test\",\n    projectId: \"testff\",\n    envId: \"testenv\",\n    expiredAt: 1713729225,\n    type: \"Server\",\n});\nexport const serversdkkey = testserverapikey.apiKey;\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntestserverapikey = harness.platform.FeatureFlagApiKey(\"testserverapikey\",\n    identifier=\"testserver\",\n    name=\"TestServer\",\n    description=\"this is a server SDK key\",\n    org_id=\"test\",\n    project_id=\"testff\",\n    env_id=\"testenv\",\n    expired_at=1713729225,\n    type=\"Server\")\npulumi.export(\"serversdkkey\", testserverapikey.api_key)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testserverapikey = new Harness.Platform.FeatureFlagApiKey(\"testserverapikey\", new()\n    {\n        Identifier = \"testserver\",\n        Name = \"TestServer\",\n        Description = \"this is a server SDK key\",\n        OrgId = \"test\",\n        ProjectId = \"testff\",\n        EnvId = \"testenv\",\n        ExpiredAt = 1713729225,\n        Type = \"Server\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"serversdkkey\"] = testserverapikey.ApiKey,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestserverapikey, err := platform.NewFeatureFlagApiKey(ctx, \"testserverapikey\", \u0026platform.FeatureFlagApiKeyArgs{\n\t\t\tIdentifier:  pulumi.String(\"testserver\"),\n\t\t\tName:        pulumi.String(\"TestServer\"),\n\t\t\tDescription: pulumi.String(\"this is a server SDK key\"),\n\t\t\tOrgId:       pulumi.String(\"test\"),\n\t\t\tProjectId:   pulumi.String(\"testff\"),\n\t\t\tEnvId:       pulumi.String(\"testenv\"),\n\t\t\tExpiredAt:   pulumi.Int(1713729225),\n\t\t\tType:        pulumi.String(\"Server\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"serversdkkey\", testserverapikey.ApiKey)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.FeatureFlagApiKey;\nimport com.pulumi.harness.platform.FeatureFlagApiKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testserverapikey = new FeatureFlagApiKey(\"testserverapikey\", FeatureFlagApiKeyArgs.builder()\n            .identifier(\"testserver\")\n            .name(\"TestServer\")\n            .description(\"this is a server SDK key\")\n            .orgId(\"test\")\n            .projectId(\"testff\")\n            .envId(\"testenv\")\n            .expiredAt(1713729225)\n            .type(\"Server\")\n            .build());\n\n        ctx.export(\"serversdkkey\", testserverapikey.apiKey());\n    }\n}\n```\n```yaml\nresources:\n  testserverapikey:\n    type: harness:platform:FeatureFlagApiKey\n    properties:\n      identifier: testserver\n      name: TestServer\n      description: this is a server SDK key\n      orgId: test\n      projectId: testff\n      envId: testenv\n      expiredAt: 1.713729225e+09\n      type: Server\noutputs:\n  serversdkkey: ${testserverapikey.apiKey}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The value of the SDK API Key\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the SDK API Key\n"
                },
                "envId": {
                    "type": "string",
                    "description": "Environment Identifier\n"
                },
                "expiredAt": {
                    "type": "integer",
                    "description": "Expiration datetime of the SDK API Key\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the SDK API Key\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the SDK API Key\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of SDK. Valid values are `Server` or `Client`.\n"
                }
            },
            "required": [
                "apiKey",
                "envId",
                "identifier",
                "name",
                "orgId",
                "projectId",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the SDK API Key\n",
                    "willReplaceOnChanges": true
                },
                "envId": {
                    "type": "string",
                    "description": "Environment Identifier\n",
                    "willReplaceOnChanges": true
                },
                "expiredAt": {
                    "type": "integer",
                    "description": "Expiration datetime of the SDK API Key\n",
                    "willReplaceOnChanges": true
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the SDK API Key\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the SDK API Key\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of SDK. Valid values are `Server` or `Client`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "envId",
                "identifier",
                "orgId",
                "projectId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FeatureFlagApiKey resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "The value of the SDK API Key\n",
                        "secret": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the SDK API Key\n",
                        "willReplaceOnChanges": true
                    },
                    "envId": {
                        "type": "string",
                        "description": "Environment Identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "expiredAt": {
                        "type": "integer",
                        "description": "Expiration datetime of the SDK API Key\n",
                        "willReplaceOnChanges": true
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the SDK API Key\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the SDK API Key\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of SDK. Valid values are `Server` or `Client`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/filters:Filters": {
            "description": "Resource for creating a Harness Filter. This resource support filters of types {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.platform.Filters(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    type: \"Connector\",\n    filterProperties: {\n        tags: [\"foo:bar\"],\n        filterType: \"Connector\",\n    },\n    filterVisibility: \"EveryOne\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.Filters(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    type=\"Connector\",\n    filter_properties=harness.platform.FiltersFilterPropertiesArgs(\n        tags=[\"foo:bar\"],\n        filter_type=\"Connector\",\n    ),\n    filter_visibility=\"EveryOne\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.Filters(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Type = \"Connector\",\n        FilterProperties = new Harness.Platform.Inputs.FiltersFilterPropertiesArgs\n        {\n            Tags = new[]\n            {\n                \"foo:bar\",\n            },\n            FilterType = \"Connector\",\n        },\n        FilterVisibility = \"EveryOne\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewFilters(ctx, \"test\", \u0026platform.FiltersArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tName:       pulumi.String(\"name\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tType:       pulumi.String(\"Connector\"),\n\t\t\tFilterProperties: \u0026platform.FiltersFilterPropertiesArgs{\n\t\t\t\tTags: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t\t},\n\t\t\t\tFilterType: pulumi.String(\"Connector\"),\n\t\t\t},\n\t\t\tFilterVisibility: pulumi.String(\"EveryOne\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Filters;\nimport com.pulumi.harness.platform.FiltersArgs;\nimport com.pulumi.harness.platform.inputs.FiltersFilterPropertiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Filters(\"test\", FiltersArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .type(\"Connector\")\n            .filterProperties(FiltersFilterPropertiesArgs.builder()\n                .tags(\"foo:bar\")\n                .filterType(\"Connector\")\n                .build())\n            .filterVisibility(\"EveryOne\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:Filters\n    properties:\n      identifier: identifier\n      name: name\n      orgId: org_id\n      projectId: project_id\n      type: Connector\n      filterProperties:\n        tags:\n          - foo:bar\n        filterType: Connector\n      filterVisibility: EveryOne\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level filter\n\n```sh\n$ pulumi import harness:platform/filters:Filters example \u003cfilter_id\u003e/\u003ctype\u003e\n```\n\nImport org level filter\n\n```sh\n$ pulumi import harness:platform/filters:Filters example \u003cord_id\u003e/\u003cfilter_id\u003e/\u003ctype\u003e\n```\n\nImport project level filter\n\n```sh\n$ pulumi import harness:platform/filters:Filters example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cfilter_id\u003e/\u003ctype\u003e\n```\n\n",
            "properties": {
                "filterProperties": {
                    "$ref": "#/types/harness:platform/FiltersFilterProperties:FiltersFilterProperties",
                    "description": "Properties of the filter entity defined in Harness.\n"
                },
                "filterVisibility": {
                    "type": "string",
                    "description": "This indicates visibility of filter. By default, everyone can view this filter. Can either be EveryOne or OnlyCreator\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Filter\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "organization Identifier for the Entity\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "project Identifier for the Entity\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}\n"
                }
            },
            "required": [
                "filterProperties",
                "filterVisibility",
                "identifier",
                "name",
                "type"
            ],
            "inputProperties": {
                "filterProperties": {
                    "$ref": "#/types/harness:platform/FiltersFilterProperties:FiltersFilterProperties",
                    "description": "Properties of the filter entity defined in Harness.\n"
                },
                "filterVisibility": {
                    "type": "string",
                    "description": "This indicates visibility of filter. By default, everyone can view this filter. Can either be EveryOne or OnlyCreator\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Filter\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "organization Identifier for the Entity\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "project Identifier for the Entity\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}\n"
                }
            },
            "requiredInputs": [
                "filterProperties",
                "identifier",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Filters resources.\n",
                "properties": {
                    "filterProperties": {
                        "$ref": "#/types/harness:platform/FiltersFilterProperties:FiltersFilterProperties",
                        "description": "Properties of the filter entity defined in Harness.\n"
                    },
                    "filterVisibility": {
                        "type": "string",
                        "description": "This indicates visibility of filter. By default, everyone can view this filter. Can either be EveryOne or OnlyCreator\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Filter\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "organization Identifier for the Entity\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project Identifier for the Entity\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gcpCloudCostConnector:GcpCloudCostConnector": {
            "description": "Resource for creating a GCP Cloud Cost connector in Harness.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.platform.GcpCloudCostConnector(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    featuresEnableds: [\n        \"BILLING\",\n        \"VISIBILITY\",\n        \"OPTIMIZATION\",\n    ],\n    gcpProjectId: \"gcp_project_id\",\n    serviceAccountEmail: \"service_account_email\",\n    billingExportSpec: {\n        dataSetId: \"data_set_id\",\n        tableId: \"table_id\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.GcpCloudCostConnector(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    features_enableds=[\n        \"BILLING\",\n        \"VISIBILITY\",\n        \"OPTIMIZATION\",\n    ],\n    gcp_project_id=\"gcp_project_id\",\n    service_account_email=\"service_account_email\",\n    billing_export_spec=harness.platform.GcpCloudCostConnectorBillingExportSpecArgs(\n        data_set_id=\"data_set_id\",\n        table_id=\"table_id\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.GcpCloudCostConnector(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        FeaturesEnableds = new[]\n        {\n            \"BILLING\",\n            \"VISIBILITY\",\n            \"OPTIMIZATION\",\n        },\n        GcpProjectId = \"gcp_project_id\",\n        ServiceAccountEmail = \"service_account_email\",\n        BillingExportSpec = new Harness.Platform.Inputs.GcpCloudCostConnectorBillingExportSpecArgs\n        {\n            DataSetId = \"data_set_id\",\n            TableId = \"table_id\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewGcpCloudCostConnector(ctx, \"test\", \u0026platform.GcpCloudCostConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tFeaturesEnableds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"BILLING\"),\n\t\t\t\tpulumi.String(\"VISIBILITY\"),\n\t\t\t\tpulumi.String(\"OPTIMIZATION\"),\n\t\t\t},\n\t\t\tGcpProjectId:        pulumi.String(\"gcp_project_id\"),\n\t\t\tServiceAccountEmail: pulumi.String(\"service_account_email\"),\n\t\t\tBillingExportSpec: \u0026platform.GcpCloudCostConnectorBillingExportSpecArgs{\n\t\t\t\tDataSetId: pulumi.String(\"data_set_id\"),\n\t\t\t\tTableId:   pulumi.String(\"table_id\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GcpCloudCostConnector;\nimport com.pulumi.harness.platform.GcpCloudCostConnectorArgs;\nimport com.pulumi.harness.platform.inputs.GcpCloudCostConnectorBillingExportSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new GcpCloudCostConnector(\"test\", GcpCloudCostConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .featuresEnableds(            \n                \"BILLING\",\n                \"VISIBILITY\",\n                \"OPTIMIZATION\")\n            .gcpProjectId(\"gcp_project_id\")\n            .serviceAccountEmail(\"service_account_email\")\n            .billingExportSpec(GcpCloudCostConnectorBillingExportSpecArgs.builder()\n                .dataSetId(\"data_set_id\")\n                .tableId(\"table_id\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:GcpCloudCostConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      featuresEnableds:\n        - BILLING\n        - VISIBILITY\n        - OPTIMIZATION\n      gcpProjectId: gcp_project_id\n      serviceAccountEmail: service_account_email\n      billingExportSpec:\n        dataSetId: data_set_id\n        tableId: table_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level gcp cloud cost connector \n\n```sh\n$ pulumi import harness:platform/gcpCloudCostConnector:GcpCloudCostConnector example \u003cconnector_id\u003e\n```\n\nImport org level gcp cloud cost connector \n\n```sh\n$ pulumi import harness:platform/gcpCloudCostConnector:GcpCloudCostConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level gcp cloud cost connector \n\n```sh\n$ pulumi import harness:platform/gcpCloudCostConnector:GcpCloudCostConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "billingExportSpec": {
                    "$ref": "#/types/harness:platform/GcpCloudCostConnectorBillingExportSpec:GcpCloudCostConnectorBillingExportSpec",
                    "description": "Returns billing details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "featuresEnableds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates which features to enable among Billing, Optimization, and Visibility.\n"
                },
                "gcpProjectId": {
                    "type": "string",
                    "description": "GCP Project Id.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceAccountEmail": {
                    "type": "string",
                    "description": "Email corresponding to the Service Account.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "featuresEnableds",
                "gcpProjectId",
                "identifier",
                "name",
                "serviceAccountEmail"
            ],
            "inputProperties": {
                "billingExportSpec": {
                    "$ref": "#/types/harness:platform/GcpCloudCostConnectorBillingExportSpec:GcpCloudCostConnectorBillingExportSpec",
                    "description": "Returns billing details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "featuresEnableds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates which features to enable among Billing, Optimization, and Visibility.\n"
                },
                "gcpProjectId": {
                    "type": "string",
                    "description": "GCP Project Id.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceAccountEmail": {
                    "type": "string",
                    "description": "Email corresponding to the Service Account.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "featuresEnableds",
                "gcpProjectId",
                "identifier",
                "serviceAccountEmail"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpCloudCostConnector resources.\n",
                "properties": {
                    "billingExportSpec": {
                        "$ref": "#/types/harness:platform/GcpCloudCostConnectorBillingExportSpec:GcpCloudCostConnectorBillingExportSpec",
                        "description": "Returns billing details.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "featuresEnableds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates which features to enable among Billing, Optimization, and Visibility.\n"
                    },
                    "gcpProjectId": {
                        "type": "string",
                        "description": "GCP Project Id.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "serviceAccountEmail": {
                        "type": "string",
                        "description": "Email corresponding to the Service Account.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gcpConnector:GcpConnector": {
            "description": "Resource for creating a Gcp connector.\n\n## Import\n\nImport account level gcp connector \n\n```sh\n$ pulumi import harness:platform/gcpConnector:GcpConnector example \u003cconnector_id\u003e\n```\n\nImport org level gcp connector \n\n```sh\n$ pulumi import harness:platform/gcpConnector:GcpConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level gcp connector \n\n```sh\n$ pulumi import harness:platform/gcpConnector:GcpConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "inheritFromDelegates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GcpConnectorInheritFromDelegate:GcpConnectorInheritFromDelegate"
                    },
                    "description": "Inherit configuration from delegate.\n"
                },
                "manual": {
                    "$ref": "#/types/harness:platform/GcpConnectorManual:GcpConnectorManual",
                    "description": "Manual credential configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "identifier",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "inheritFromDelegates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GcpConnectorInheritFromDelegate:GcpConnectorInheritFromDelegate"
                    },
                    "description": "Inherit configuration from delegate.\n"
                },
                "manual": {
                    "$ref": "#/types/harness:platform/GcpConnectorManual:GcpConnectorManual",
                    "description": "Manual credential configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpConnector resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "inheritFromDelegates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GcpConnectorInheritFromDelegate:GcpConnectorInheritFromDelegate"
                        },
                        "description": "Inherit configuration from delegate.\n"
                    },
                    "manual": {
                        "$ref": "#/types/harness:platform/GcpConnectorManual:GcpConnectorManual",
                        "description": "Manual credential configuration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gcpSecretManagerConnector:GcpSecretManagerConnector": {
            "description": "Resource for creating a GCP Secret Manager connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst gcpSm = new harness.platform.GcpSecretManagerConnector(\"gcp_sm\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    delegateSelectors: [\"harness-delegate\"],\n    credentialsRef: `account.${test.id}`,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ngcp_sm = harness.platform.GcpSecretManagerConnector(\"gcp_sm\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    delegate_selectors=[\"harness-delegate\"],\n    credentials_ref=f\"account.{test['id']}\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var gcpSm = new Harness.Platform.GcpSecretManagerConnector(\"gcp_sm\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        CredentialsRef = $\"account.{test.Id}\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewGcpSecretManagerConnector(ctx, \"gcp_sm\", \u0026platform.GcpSecretManagerConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tCredentialsRef: pulumi.String(fmt.Sprintf(\"account.%v\", test.Id)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GcpSecretManagerConnector;\nimport com.pulumi.harness.platform.GcpSecretManagerConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var gcpSm = new GcpSecretManagerConnector(\"gcpSm\", GcpSecretManagerConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .delegateSelectors(\"harness-delegate\")\n            .credentialsRef(String.format(\"account.%s\", test.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  gcpSm:\n    type: harness:platform:GcpSecretManagerConnector\n    name: gcp_sm\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      delegateSelectors:\n        - harness-delegate\n      credentialsRef: account.${test.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level gcp secret manager connector \n\n```sh\n$ pulumi import harness:platform/gcpSecretManagerConnector:GcpSecretManagerConnector example \u003cconnector_id\u003e\n```\n\nImport org level gcp secret manager connector \n\n```sh\n$ pulumi import harness:platform/gcpSecretManagerConnector:GcpSecretManagerConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level gcp secret manager connector \n\n```sh\n$ pulumi import harness:platform/gcpSecretManagerConnector:GcpSecretManagerConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "credentialsRef": {
                    "type": "string",
                    "description": "Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Indicative if this is default Secret manager for secrets.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "credentialsRef",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "credentialsRef": {
                    "type": "string",
                    "description": "Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Indicative if this is default Secret manager for secrets.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "credentialsRef",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GcpSecretManagerConnector resources.\n",
                "properties": {
                    "credentialsRef": {
                        "type": "string",
                        "description": "Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Indicative if this is default Secret manager for secrets.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitConnector:GitConnector": {
            "description": "Resource for creating a Git connector.\n\n## Import\n\nImport account level git connector \n\n```sh\n$ pulumi import harness:platform/gitConnector:GitConnector example \u003cconnector_id\u003e\n```\n\nImport org level git connector \n\n```sh\n$ pulumi import harness:platform/gitConnector:GitConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level git connector \n\n```sh\n$ pulumi import harness:platform/gitConnector:GitConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/GitConnectorCredentials:GitConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the git repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "required": [
                "connectionType",
                "credentials",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/GitConnectorCredentials:GitConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the git repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "requiredInputs": [
                "connectionType",
                "credentials",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitConnector resources.\n",
                "properties": {
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/harness:platform/GitConnectorCredentials:GitConnectorCredentials",
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the git repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitOpsAgent:GitOpsAgent": {
            "description": "Resource for creating a Harness Gitops Agents.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.GitOpsAgent(\"example\", {\n    identifier: \"identifier\",\n    accountId: \"account_id\",\n    projectId: \"project_id\",\n    orgId: \"org_id\",\n    name: \"name\",\n    type: \"MANAGED_ARGO_PROVIDER\",\n    metadatas: [{\n        namespace: \"namespace\",\n        highAvailability: true,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.GitOpsAgent(\"example\",\n    identifier=\"identifier\",\n    account_id=\"account_id\",\n    project_id=\"project_id\",\n    org_id=\"org_id\",\n    name=\"name\",\n    type=\"MANAGED_ARGO_PROVIDER\",\n    metadatas=[harness.platform.GitOpsAgentMetadataArgs(\n        namespace=\"namespace\",\n        high_availability=True,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.GitOpsAgent(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        AccountId = \"account_id\",\n        ProjectId = \"project_id\",\n        OrgId = \"org_id\",\n        Name = \"name\",\n        Type = \"MANAGED_ARGO_PROVIDER\",\n        Metadatas = new[]\n        {\n            new Harness.Platform.Inputs.GitOpsAgentMetadataArgs\n            {\n                Namespace = \"namespace\",\n                HighAvailability = true,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewGitOpsAgent(ctx, \"example\", \u0026platform.GitOpsAgentArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tAccountId:  pulumi.String(\"account_id\"),\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tName:       pulumi.String(\"name\"),\n\t\t\tType:       pulumi.String(\"MANAGED_ARGO_PROVIDER\"),\n\t\t\tMetadatas: platform.GitOpsAgentMetadataArray{\n\t\t\t\t\u0026platform.GitOpsAgentMetadataArgs{\n\t\t\t\t\tNamespace:        pulumi.String(\"namespace\"),\n\t\t\t\t\tHighAvailability: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GitOpsAgent;\nimport com.pulumi.harness.platform.GitOpsAgentArgs;\nimport com.pulumi.harness.platform.inputs.GitOpsAgentMetadataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GitOpsAgent(\"example\", GitOpsAgentArgs.builder()\n            .identifier(\"identifier\")\n            .accountId(\"account_id\")\n            .projectId(\"project_id\")\n            .orgId(\"org_id\")\n            .name(\"name\")\n            .type(\"MANAGED_ARGO_PROVIDER\")\n            .metadatas(GitOpsAgentMetadataArgs.builder()\n                .namespace(\"namespace\")\n                .highAvailability(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:GitOpsAgent\n    properties:\n      identifier: identifier\n      accountId: account_id\n      projectId: project_id\n      orgId: org_id\n      name: name\n      type: MANAGED_ARGO_PROVIDER\n      metadatas:\n        - namespace: namespace\n          highAvailability: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport a Account level Gitops Agent\n\n```sh\n$ pulumi import harness:platform/gitOpsAgent:GitOpsAgent example \u003cagent_id\u003e\n```\n\nImport a Project level Gitops Agent\n\n```sh\n$ pulumi import harness:platform/gitOpsAgent:GitOpsAgent example \u003corganization_id\u003e/\u003cproject_id\u003e/\u003cagent_id\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the GitOps agent.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the GitOps agent.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the GitOps agent.\n"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsAgentMetadata:GitOpsAgentMetadata"
                    },
                    "description": "Metadata of the agent.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps agent.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the GitOps agent.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the GitOps agent.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags for the GitOps agents. These can be used to search or filter the GitOps agents.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Default: \"AGENT*TYPE*UNSET\"\nEnum: \"AGENT*TYPE*UNSET\" \"CONNECTED*ARGO*PROVIDER\" \"MANAGED*ARGO*PROVIDER\"\n"
                }
            },
            "required": [
                "accountId",
                "identifier",
                "name",
                "type"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the GitOps agent.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the GitOps agent.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the GitOps agent.\n"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsAgentMetadata:GitOpsAgentMetadata"
                    },
                    "description": "Metadata of the agent.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps agent.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the GitOps agent.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the GitOps agent.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags for the GitOps agents. These can be used to search or filter the GitOps agents.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Default: \"AGENT*TYPE*UNSET\"\nEnum: \"AGENT*TYPE*UNSET\" \"CONNECTED*ARGO*PROVIDER\" \"MANAGED*ARGO*PROVIDER\"\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "identifier",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitOpsAgent resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps agent.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the GitOps agent.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps agent.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GitOpsAgentMetadata:GitOpsAgentMetadata"
                        },
                        "description": "Metadata of the agent.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the GitOps agent.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the GitOps agent.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps agent.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Tags for the GitOps agents. These can be used to search or filter the GitOps agents.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Default: \"AGENT*TYPE*UNSET\"\nEnum: \"AGENT*TYPE*UNSET\" \"CONNECTED*ARGO*PROVIDER\" \"MANAGED*ARGO*PROVIDER\"\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitOpsApplications:GitOpsApplications": {
            "description": "Resource for creating a Harness Gitops Application.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.GitOpsApplications(\"example\", {\n    applications: [{\n        metadatas: [{\n            annotations: {},\n            labels: {\n                \"harness.io/serviceRef\": \"service_id\",\n                \"harness.io/envRef\": \"env_id\",\n            },\n            name: \"appname123\",\n        }],\n        specs: [{\n            syncPolicies: [{\n                syncOptions: [\n                    \"PrunePropagationPolicy=undefined\",\n                    \"CreateNamespace=false\",\n                    \"Validate=false\",\n                    \"skipSchemaValidations=false\",\n                    \"autoCreateNamespace=false\",\n                    \"pruneLast=false\",\n                    \"applyOutofSyncOnly=false\",\n                    \"Replace=false\",\n                    \"retry=false\",\n                ],\n            }],\n            sources: [{\n                targetRevision: \"master\",\n                repoUrl: \"https://github.com/willycoll/argocd-example-apps.git\",\n                path: \"helm-guestbook\",\n            }],\n            destinations: [{\n                namespace: \"namespace-123\",\n                server: \"https://1.3.4.5\",\n            }],\n        }],\n    }],\n    projectId: \"project_id\",\n    orgId: \"org_id\",\n    accountId: \"account_id\",\n    identifier: \"identifier\",\n    clusterId: \"cluster_id\",\n    repoId: \"repo_id\",\n    agentId: \"agent_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.GitOpsApplications(\"example\",\n    applications=[harness.platform.GitOpsApplicationsApplicationArgs(\n        metadatas=[harness.platform.GitOpsApplicationsApplicationMetadataArgs(\n            annotations={},\n            labels={\n                \"harness.io/serviceRef\": \"service_id\",\n                \"harness.io/envRef\": \"env_id\",\n            },\n            name=\"appname123\",\n        )],\n        specs=[harness.platform.GitOpsApplicationsApplicationSpecArgs(\n            sync_policies=[harness.platform.GitOpsApplicationsApplicationSpecSyncPolicyArgs(\n                sync_options=[\n                    \"PrunePropagationPolicy=undefined\",\n                    \"CreateNamespace=false\",\n                    \"Validate=false\",\n                    \"skipSchemaValidations=false\",\n                    \"autoCreateNamespace=false\",\n                    \"pruneLast=false\",\n                    \"applyOutofSyncOnly=false\",\n                    \"Replace=false\",\n                    \"retry=false\",\n                ],\n            )],\n            sources=[harness.platform.GitOpsApplicationsApplicationSpecSourceArgs(\n                target_revision=\"master\",\n                repo_url=\"https://github.com/willycoll/argocd-example-apps.git\",\n                path=\"helm-guestbook\",\n            )],\n            destinations=[harness.platform.GitOpsApplicationsApplicationSpecDestinationArgs(\n                namespace=\"namespace-123\",\n                server=\"https://1.3.4.5\",\n            )],\n        )],\n    )],\n    project_id=\"project_id\",\n    org_id=\"org_id\",\n    account_id=\"account_id\",\n    identifier=\"identifier\",\n    cluster_id=\"cluster_id\",\n    repo_id=\"repo_id\",\n    agent_id=\"agent_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.GitOpsApplications(\"example\", new()\n    {\n        Applications = new[]\n        {\n            new Harness.Platform.Inputs.GitOpsApplicationsApplicationArgs\n            {\n                Metadatas = new[]\n                {\n                    new Harness.Platform.Inputs.GitOpsApplicationsApplicationMetadataArgs\n                    {\n                        Annotations = null,\n                        Labels = \n                        {\n                            { \"harness.io/serviceRef\", \"service_id\" },\n                            { \"harness.io/envRef\", \"env_id\" },\n                        },\n                        Name = \"appname123\",\n                    },\n                },\n                Specs = new[]\n                {\n                    new Harness.Platform.Inputs.GitOpsApplicationsApplicationSpecArgs\n                    {\n                        SyncPolicies = new[]\n                        {\n                            new Harness.Platform.Inputs.GitOpsApplicationsApplicationSpecSyncPolicyArgs\n                            {\n                                SyncOptions = new[]\n                                {\n                                    \"PrunePropagationPolicy=undefined\",\n                                    \"CreateNamespace=false\",\n                                    \"Validate=false\",\n                                    \"skipSchemaValidations=false\",\n                                    \"autoCreateNamespace=false\",\n                                    \"pruneLast=false\",\n                                    \"applyOutofSyncOnly=false\",\n                                    \"Replace=false\",\n                                    \"retry=false\",\n                                },\n                            },\n                        },\n                        Sources = new[]\n                        {\n                            new Harness.Platform.Inputs.GitOpsApplicationsApplicationSpecSourceArgs\n                            {\n                                TargetRevision = \"master\",\n                                RepoUrl = \"https://github.com/willycoll/argocd-example-apps.git\",\n                                Path = \"helm-guestbook\",\n                            },\n                        },\n                        Destinations = new[]\n                        {\n                            new Harness.Platform.Inputs.GitOpsApplicationsApplicationSpecDestinationArgs\n                            {\n                                Namespace = \"namespace-123\",\n                                Server = \"https://1.3.4.5\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n        ProjectId = \"project_id\",\n        OrgId = \"org_id\",\n        AccountId = \"account_id\",\n        Identifier = \"identifier\",\n        ClusterId = \"cluster_id\",\n        RepoId = \"repo_id\",\n        AgentId = \"agent_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewGitOpsApplications(ctx, \"example\", \u0026platform.GitOpsApplicationsArgs{\n\t\t\tApplications: platform.GitOpsApplicationsApplicationArray{\n\t\t\t\t\u0026platform.GitOpsApplicationsApplicationArgs{\n\t\t\t\t\tMetadatas: platform.GitOpsApplicationsApplicationMetadataArray{\n\t\t\t\t\t\t\u0026platform.GitOpsApplicationsApplicationMetadataArgs{\n\t\t\t\t\t\t\tAnnotations: nil,\n\t\t\t\t\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\t\t\t\t\"harness.io/serviceRef\": pulumi.String(\"service_id\"),\n\t\t\t\t\t\t\t\t\"harness.io/envRef\":     pulumi.String(\"env_id\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tName: pulumi.String(\"appname123\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tSpecs: platform.GitOpsApplicationsApplicationSpecArray{\n\t\t\t\t\t\t\u0026platform.GitOpsApplicationsApplicationSpecArgs{\n\t\t\t\t\t\t\tSyncPolicies: platform.GitOpsApplicationsApplicationSpecSyncPolicyArray{\n\t\t\t\t\t\t\t\t\u0026platform.GitOpsApplicationsApplicationSpecSyncPolicyArgs{\n\t\t\t\t\t\t\t\t\tSyncOptions: pulumi.StringArray{\n\t\t\t\t\t\t\t\t\t\tpulumi.String(\"PrunePropagationPolicy=undefined\"),\n\t\t\t\t\t\t\t\t\t\tpulumi.String(\"CreateNamespace=false\"),\n\t\t\t\t\t\t\t\t\t\tpulumi.String(\"Validate=false\"),\n\t\t\t\t\t\t\t\t\t\tpulumi.String(\"skipSchemaValidations=false\"),\n\t\t\t\t\t\t\t\t\t\tpulumi.String(\"autoCreateNamespace=false\"),\n\t\t\t\t\t\t\t\t\t\tpulumi.String(\"pruneLast=false\"),\n\t\t\t\t\t\t\t\t\t\tpulumi.String(\"applyOutofSyncOnly=false\"),\n\t\t\t\t\t\t\t\t\t\tpulumi.String(\"Replace=false\"),\n\t\t\t\t\t\t\t\t\t\tpulumi.String(\"retry=false\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tSources: platform.GitOpsApplicationsApplicationSpecSourceArray{\n\t\t\t\t\t\t\t\t\u0026platform.GitOpsApplicationsApplicationSpecSourceArgs{\n\t\t\t\t\t\t\t\t\tTargetRevision: pulumi.String(\"master\"),\n\t\t\t\t\t\t\t\t\tRepoUrl:        pulumi.String(\"https://github.com/willycoll/argocd-example-apps.git\"),\n\t\t\t\t\t\t\t\t\tPath:           pulumi.String(\"helm-guestbook\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tDestinations: platform.GitOpsApplicationsApplicationSpecDestinationArray{\n\t\t\t\t\t\t\t\t\u0026platform.GitOpsApplicationsApplicationSpecDestinationArgs{\n\t\t\t\t\t\t\t\t\tNamespace: pulumi.String(\"namespace-123\"),\n\t\t\t\t\t\t\t\t\tServer:    pulumi.String(\"https://1.3.4.5\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tAccountId:  pulumi.String(\"account_id\"),\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tClusterId:  pulumi.String(\"cluster_id\"),\n\t\t\tRepoId:     pulumi.String(\"repo_id\"),\n\t\t\tAgentId:    pulumi.String(\"agent_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GitOpsApplications;\nimport com.pulumi.harness.platform.GitOpsApplicationsArgs;\nimport com.pulumi.harness.platform.inputs.GitOpsApplicationsApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GitOpsApplications(\"example\", GitOpsApplicationsArgs.builder()\n            .applications(GitOpsApplicationsApplicationArgs.builder()\n                .metadatas(GitOpsApplicationsApplicationMetadataArgs.builder()\n                    .annotations()\n                    .labels(Map.ofEntries(\n                        Map.entry(\"harness.io/serviceRef\", \"service_id\"),\n                        Map.entry(\"harness.io/envRef\", \"env_id\")\n                    ))\n                    .name(\"appname123\")\n                    .build())\n                .specs(GitOpsApplicationsApplicationSpecArgs.builder()\n                    .syncPolicies(GitOpsApplicationsApplicationSpecSyncPolicyArgs.builder()\n                        .syncOptions(                        \n                            \"PrunePropagationPolicy=undefined\",\n                            \"CreateNamespace=false\",\n                            \"Validate=false\",\n                            \"skipSchemaValidations=false\",\n                            \"autoCreateNamespace=false\",\n                            \"pruneLast=false\",\n                            \"applyOutofSyncOnly=false\",\n                            \"Replace=false\",\n                            \"retry=false\")\n                        .build())\n                    .sources(GitOpsApplicationsApplicationSpecSourceArgs.builder()\n                        .targetRevision(\"master\")\n                        .repoUrl(\"https://github.com/willycoll/argocd-example-apps.git\")\n                        .path(\"helm-guestbook\")\n                        .build())\n                    .destinations(GitOpsApplicationsApplicationSpecDestinationArgs.builder()\n                        .namespace(\"namespace-123\")\n                        .server(\"https://1.3.4.5\")\n                        .build())\n                    .build())\n                .build())\n            .projectId(\"project_id\")\n            .orgId(\"org_id\")\n            .accountId(\"account_id\")\n            .identifier(\"identifier\")\n            .clusterId(\"cluster_id\")\n            .repoId(\"repo_id\")\n            .agentId(\"agent_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:GitOpsApplications\n    properties:\n      applications:\n        - metadatas:\n            - annotations: {}\n              labels:\n                harness.io/serviceRef: service_id\n                harness.io/envRef: env_id\n              name: appname123\n          specs:\n            - syncPolicies:\n                - syncOptions:\n                    - PrunePropagationPolicy=undefined\n                    - CreateNamespace=false\n                    - Validate=false\n                    - skipSchemaValidations=false\n                    - autoCreateNamespace=false\n                    - pruneLast=false\n                    - applyOutofSyncOnly=false\n                    - Replace=false\n                    - retry=false\n              sources:\n                - targetRevision: master\n                  repoUrl: https://github.com/willycoll/argocd-example-apps.git\n                  path: helm-guestbook\n              destinations:\n                - namespace: namespace-123\n                  server: https://1.3.4.5\n      projectId: project_id\n      orgId: org_id\n      accountId: account_id\n      identifier: identifier\n      clusterId: cluster_id\n      repoId: repo_id\n      agentId: agent_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport a Project level Gitops Application\n\n```sh\n$ pulumi import harness:platform/gitOpsApplications:GitOpsApplications example \u003corganization_id\u003e/\u003cproject_id\u003e/\u003cagent_id\u003e/\u003capp_name\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the GitOps application.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier of the GitOps application.\n"
                },
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplication:GitOpsApplicationsApplication"
                    },
                    "description": "Definition of the GitOps application resource.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Cluster identifier of the GitOps application.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the GitOps application.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Kind of the GitOps application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "optionsRemoveExistingFinalizers": {
                    "type": "boolean",
                    "description": "Options to remove existing finalizers to delete the GitOps application.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the GitOps application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the 'default' project.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the GitOps application.\n"
                },
                "queryProject": {
                    "type": "string",
                    "description": "Project names to filter the corresponding GitOps applications.\n"
                },
                "queryRefresh": {
                    "type": "string",
                    "description": "Forces the GitOps application to reconcile when set to true.\n"
                },
                "queryRepo": {
                    "type": "string",
                    "description": "Repo URL to restrict returned list applications.\n"
                },
                "queryResourceVersion": {
                    "type": "string",
                    "description": "Shows modifications after a version that is specified with a watch call.\n"
                },
                "querySelector": {
                    "type": "string",
                    "description": "Filters GitOps applications corresponding to the labels.\n"
                },
                "repoId": {
                    "type": "string",
                    "description": "Repository identifier of the GitOps application.\n"
                },
                "requestCascade": {
                    "type": "boolean",
                    "description": "Request cascade to delete the GitOps application.\n"
                },
                "requestName": {
                    "type": "string",
                    "description": "Request name to delete the GitOps application.\n"
                },
                "requestPropagationPolicy": {
                    "type": "string",
                    "description": "Request propagation policy to delete the GitOps application.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "Indicates if the GitOps application should be updated if existing and inserted if not.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "Indicates if the GitOps application has to be validated.\n"
                }
            },
            "required": [
                "accountId",
                "agentId",
                "applications",
                "clusterId",
                "name",
                "orgId",
                "projectId",
                "repoId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the GitOps application.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier of the GitOps application.\n"
                },
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsApplicationsApplication:GitOpsApplicationsApplication"
                    },
                    "description": "Definition of the GitOps application resource.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Cluster identifier of the GitOps application.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the GitOps application.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Kind of the GitOps application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GitOps application.\n"
                },
                "optionsRemoveExistingFinalizers": {
                    "type": "boolean",
                    "description": "Options to remove existing finalizers to delete the GitOps application.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the GitOps application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the 'default' project.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the GitOps application.\n"
                },
                "queryProject": {
                    "type": "string",
                    "description": "Project names to filter the corresponding GitOps applications.\n"
                },
                "queryRefresh": {
                    "type": "string",
                    "description": "Forces the GitOps application to reconcile when set to true.\n"
                },
                "queryRepo": {
                    "type": "string",
                    "description": "Repo URL to restrict returned list applications.\n"
                },
                "queryResourceVersion": {
                    "type": "string",
                    "description": "Shows modifications after a version that is specified with a watch call.\n"
                },
                "querySelector": {
                    "type": "string",
                    "description": "Filters GitOps applications corresponding to the labels.\n"
                },
                "repoId": {
                    "type": "string",
                    "description": "Repository identifier of the GitOps application.\n"
                },
                "requestCascade": {
                    "type": "boolean",
                    "description": "Request cascade to delete the GitOps application.\n"
                },
                "requestName": {
                    "type": "string",
                    "description": "Request name to delete the GitOps application.\n"
                },
                "requestPropagationPolicy": {
                    "type": "string",
                    "description": "Request propagation policy to delete the GitOps application.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "Indicates if the GitOps application should be updated if existing and inserted if not.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "Indicates if the GitOps application has to be validated.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "agentId",
                "applications",
                "clusterId",
                "orgId",
                "projectId",
                "repoId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitOpsApplications resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps application.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier of the GitOps application.\n"
                    },
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GitOpsApplicationsApplication:GitOpsApplicationsApplication"
                        },
                        "description": "Definition of the GitOps application resource.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "Cluster identifier of the GitOps application.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps application.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "Kind of the GitOps application.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the GitOps application.\n"
                    },
                    "optionsRemoveExistingFinalizers": {
                        "type": "boolean",
                        "description": "Options to remove existing finalizers to delete the GitOps application.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the GitOps application.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the 'default' project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps application.\n"
                    },
                    "queryProject": {
                        "type": "string",
                        "description": "Project names to filter the corresponding GitOps applications.\n"
                    },
                    "queryRefresh": {
                        "type": "string",
                        "description": "Forces the GitOps application to reconcile when set to true.\n"
                    },
                    "queryRepo": {
                        "type": "string",
                        "description": "Repo URL to restrict returned list applications.\n"
                    },
                    "queryResourceVersion": {
                        "type": "string",
                        "description": "Shows modifications after a version that is specified with a watch call.\n"
                    },
                    "querySelector": {
                        "type": "string",
                        "description": "Filters GitOps applications corresponding to the labels.\n"
                    },
                    "repoId": {
                        "type": "string",
                        "description": "Repository identifier of the GitOps application.\n"
                    },
                    "requestCascade": {
                        "type": "boolean",
                        "description": "Request cascade to delete the GitOps application.\n"
                    },
                    "requestName": {
                        "type": "string",
                        "description": "Request name to delete the GitOps application.\n"
                    },
                    "requestPropagationPolicy": {
                        "type": "string",
                        "description": "Request propagation policy to delete the GitOps application.\n"
                    },
                    "upsert": {
                        "type": "boolean",
                        "description": "Indicates if the GitOps application should be updated if existing and inserted if not.\n"
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "Indicates if the GitOps application has to be validated.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitOpsCluster:GitOpsCluster": {
            "description": "Resource for creating a Harness Gitops Cluster.\n\n## Import\n\nImport a Account level Gitops Cluster\n\n```sh\n$ pulumi import harness:platform/gitOpsCluster:GitOpsCluster example \u003cagent_id\u003e/\u003ccluster_id\u003e\n```\n\nImport a Project level Gitops Cluster\n\n```sh\n$ pulumi import harness:platform/gitOpsCluster:GitOpsCluster example \u003corganization_id\u003e/\u003cproject_id\u003e/\u003cagent_id\u003e/\u003ccluster_id\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the GitOps cluster.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier of the GitOps cluster.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the GitOps cluster.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the cluster.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the GitOps cluster.\n"
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterQuery:GitOpsClusterQuery"
                    },
                    "description": "Query for the GitOps cluster resources.\n"
                },
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequest:GitOpsClusterRequest"
                    },
                    "description": "Cluster create or update request.\n"
                }
            },
            "required": [
                "accountId",
                "agentId",
                "identifier"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the GitOps cluster.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier of the GitOps cluster.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the GitOps cluster.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the cluster.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the GitOps cluster.\n"
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterQuery:GitOpsClusterQuery"
                    },
                    "description": "Query for the GitOps cluster resources.\n"
                },
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsClusterRequest:GitOpsClusterRequest"
                    },
                    "description": "Cluster create or update request.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "agentId",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitOpsCluster resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps cluster.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier of the GitOps cluster.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps cluster.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the cluster.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps cluster.\n"
                    },
                    "queries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GitOpsClusterQuery:GitOpsClusterQuery"
                        },
                        "description": "Query for the GitOps cluster resources.\n"
                    },
                    "requests": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GitOpsClusterRequest:GitOpsClusterRequest"
                        },
                        "description": "Cluster create or update request.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitOpsGnupg:GitOpsGnupg": {
            "description": "GPG public key in the server's configuration.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.GitOpsGnupg(\"example\", {\n    accountId: \"account_id\",\n    agentId: \"agent_id\",\n    requests: [{\n        upsert: true,\n        publickeys: [{\n            keyData: \"-----BEGIN PGP PUBLIC KEY BLOCK-----XXXXXX-----END PGP PUBLIC KEY BLOCK-----\",\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.GitOpsGnupg(\"example\",\n    account_id=\"account_id\",\n    agent_id=\"agent_id\",\n    requests=[harness.platform.GitOpsGnupgRequestArgs(\n        upsert=True,\n        publickeys=[harness.platform.GitOpsGnupgRequestPublickeyArgs(\n            key_data=\"-----BEGIN PGP PUBLIC KEY BLOCK-----XXXXXX-----END PGP PUBLIC KEY BLOCK-----\",\n        )],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.GitOpsGnupg(\"example\", new()\n    {\n        AccountId = \"account_id\",\n        AgentId = \"agent_id\",\n        Requests = new[]\n        {\n            new Harness.Platform.Inputs.GitOpsGnupgRequestArgs\n            {\n                Upsert = true,\n                Publickeys = new[]\n                {\n                    new Harness.Platform.Inputs.GitOpsGnupgRequestPublickeyArgs\n                    {\n                        KeyData = \"-----BEGIN PGP PUBLIC KEY BLOCK-----XXXXXX-----END PGP PUBLIC KEY BLOCK-----\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewGitOpsGnupg(ctx, \"example\", \u0026platform.GitOpsGnupgArgs{\n\t\t\tAccountId: pulumi.String(\"account_id\"),\n\t\t\tAgentId:   pulumi.String(\"agent_id\"),\n\t\t\tRequests: platform.GitOpsGnupgRequestArray{\n\t\t\t\t\u0026platform.GitOpsGnupgRequestArgs{\n\t\t\t\t\tUpsert: pulumi.Bool(true),\n\t\t\t\t\tPublickeys: platform.GitOpsGnupgRequestPublickeyArray{\n\t\t\t\t\t\t\u0026platform.GitOpsGnupgRequestPublickeyArgs{\n\t\t\t\t\t\t\tKeyData: pulumi.String(\"-----BEGIN PGP PUBLIC KEY BLOCK-----XXXXXX-----END PGP PUBLIC KEY BLOCK-----\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GitOpsGnupg;\nimport com.pulumi.harness.platform.GitOpsGnupgArgs;\nimport com.pulumi.harness.platform.inputs.GitOpsGnupgRequestArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GitOpsGnupg(\"example\", GitOpsGnupgArgs.builder()\n            .accountId(\"account_id\")\n            .agentId(\"agent_id\")\n            .requests(GitOpsGnupgRequestArgs.builder()\n                .upsert(true)\n                .publickeys(GitOpsGnupgRequestPublickeyArgs.builder()\n                    .keyData(\"-----BEGIN PGP PUBLIC KEY BLOCK-----XXXXXX-----END PGP PUBLIC KEY BLOCK-----\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:GitOpsGnupg\n    properties:\n      accountId: account_id\n      agentId: agent_id\n      requests:\n        - upsert: true\n          publickeys:\n            - keyData: '-----BEGIN PGP PUBLIC KEY BLOCK-----XXXXXX-----END PGP PUBLIC KEY BLOCK-----'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport a Account level Gitops Cluster\n\n```sh\n$ pulumi import harness:platform/gitOpsGnupg:GitOpsGnupg example \u003cagent_id\u003e/\u003ckey_id\u003e\n```\n\nImport a Project level Gitops Cluster\n\n```sh\n$ pulumi import harness:platform/gitOpsGnupg:GitOpsGnupg example \u003corganization_id\u003e/\u003cproject_id\u003e/\u003cagent_id\u003e/\u003ckey_id\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier for the GnuPG Key.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier for the GnuPG Key.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier for the GnuPG Key.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the GnuPG Key.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the GnuPG Key.\n"
                },
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsGnupgRequest:GitOpsGnupgRequest"
                    },
                    "description": "GnuPGPublicKey is a representation of a GnuPG public key\n"
                }
            },
            "required": [
                "accountId",
                "agentId",
                "identifier",
                "requests"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier for the GnuPG Key.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier for the GnuPG Key.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the GnuPG Key.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the GnuPG Key.\n"
                },
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsGnupgRequest:GitOpsGnupgRequest"
                    },
                    "description": "GnuPGPublicKey is a representation of a GnuPG public key\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "agentId",
                "requests"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitOpsGnupg resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier for the GnuPG Key.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier for the GnuPG Key.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier for the GnuPG Key.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the GnuPG Key.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the GnuPG Key.\n"
                    },
                    "requests": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GitOpsGnupgRequest:GitOpsGnupgRequest"
                        },
                        "description": "GnuPGPublicKey is a representation of a GnuPG public key\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitOpsRepoCert:GitOpsRepoCert": {
            "description": "Resource for creating a Harness Gitops Repositories Certificates.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.GitOpsRepoCert(\"example\", {\n    requests: [{\n        certificates: [{\n            metadatas: [{}],\n            items: [{\n                serverName: \"serverName\",\n                certType: \"https\",\n                certData: \"yourcertdata\",\n            }],\n        }],\n        upsert: true,\n    }],\n    accountId: \"account_id\",\n    agentId: \"agent_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.GitOpsRepoCert(\"example\",\n    requests=[harness.platform.GitOpsRepoCertRequestArgs(\n        certificates=[harness.platform.GitOpsRepoCertRequestCertificateArgs(\n            metadatas=[harness.platform.GitOpsRepoCertRequestCertificateMetadataArgs()],\n            items=[harness.platform.GitOpsRepoCertRequestCertificateItemArgs(\n                server_name=\"serverName\",\n                cert_type=\"https\",\n                cert_data=\"yourcertdata\",\n            )],\n        )],\n        upsert=True,\n    )],\n    account_id=\"account_id\",\n    agent_id=\"agent_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.GitOpsRepoCert(\"example\", new()\n    {\n        Requests = new[]\n        {\n            new Harness.Platform.Inputs.GitOpsRepoCertRequestArgs\n            {\n                Certificates = new[]\n                {\n                    new Harness.Platform.Inputs.GitOpsRepoCertRequestCertificateArgs\n                    {\n                        Metadatas = new[]\n                        {\n                            null,\n                        },\n                        Items = new[]\n                        {\n                            new Harness.Platform.Inputs.GitOpsRepoCertRequestCertificateItemArgs\n                            {\n                                ServerName = \"serverName\",\n                                CertType = \"https\",\n                                CertData = \"yourcertdata\",\n                            },\n                        },\n                    },\n                },\n                Upsert = true,\n            },\n        },\n        AccountId = \"account_id\",\n        AgentId = \"agent_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewGitOpsRepoCert(ctx, \"example\", \u0026platform.GitOpsRepoCertArgs{\n\t\t\tRequests: platform.GitOpsRepoCertRequestArray{\n\t\t\t\t\u0026platform.GitOpsRepoCertRequestArgs{\n\t\t\t\t\tCertificates: platform.GitOpsRepoCertRequestCertificateArray{\n\t\t\t\t\t\t\u0026platform.GitOpsRepoCertRequestCertificateArgs{\n\t\t\t\t\t\t\tMetadatas: platform.GitOpsRepoCertRequestCertificateMetadataArray{\n\t\t\t\t\t\t\t\tnil,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tItems: platform.GitOpsRepoCertRequestCertificateItemArray{\n\t\t\t\t\t\t\t\t\u0026platform.GitOpsRepoCertRequestCertificateItemArgs{\n\t\t\t\t\t\t\t\t\tServerName: pulumi.String(\"serverName\"),\n\t\t\t\t\t\t\t\t\tCertType:   pulumi.String(\"https\"),\n\t\t\t\t\t\t\t\t\tCertData:   pulumi.String(\"yourcertdata\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tUpsert: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAccountId: pulumi.String(\"account_id\"),\n\t\t\tAgentId:   pulumi.String(\"agent_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GitOpsRepoCert;\nimport com.pulumi.harness.platform.GitOpsRepoCertArgs;\nimport com.pulumi.harness.platform.inputs.GitOpsRepoCertRequestArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GitOpsRepoCert(\"example\", GitOpsRepoCertArgs.builder()\n            .requests(GitOpsRepoCertRequestArgs.builder()\n                .certificates(GitOpsRepoCertRequestCertificateArgs.builder()\n                    .metadatas()\n                    .items(GitOpsRepoCertRequestCertificateItemArgs.builder()\n                        .serverName(\"serverName\")\n                        .certType(\"https\")\n                        .certData(\"yourcertdata\")\n                        .build())\n                    .build())\n                .upsert(true)\n                .build())\n            .accountId(\"account_id\")\n            .agentId(\"agent_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:GitOpsRepoCert\n    properties:\n      requests:\n        - certificates:\n            - metadatas:\n                - {}\n              items:\n                - serverName: serverName\n                  certType: https\n                  certData: yourcertdata\n          upsert: true\n      accountId: account_id\n      agentId: agent_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport a Account level Gitops Repository Certificate\n\n```sh\n$ pulumi import harness:platform/gitOpsRepoCert:GitOpsRepoCert example \u003crepocert_id\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "account identifier of the Repository Certificates.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "agent identifier of the Repository Certificates.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "organization identifier of the Repository Certificates.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "project identifier of the Repository Certificates.\n"
                },
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsRepoCertRequest:GitOpsRepoCertRequest"
                    },
                    "description": "Repository Certificates create/Update request.\n"
                }
            },
            "required": [
                "accountId",
                "agentId",
                "requests"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "account identifier of the Repository Certificates.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "agent identifier of the Repository Certificates.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "organization identifier of the Repository Certificates.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "project identifier of the Repository Certificates.\n"
                },
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsRepoCertRequest:GitOpsRepoCertRequest"
                    },
                    "description": "Repository Certificates create/Update request.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "agentId",
                "requests"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitOpsRepoCert resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "account identifier of the Repository Certificates.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "agent identifier of the Repository Certificates.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "organization identifier of the Repository Certificates.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project identifier of the Repository Certificates.\n"
                    },
                    "requests": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GitOpsRepoCertRequest:GitOpsRepoCertRequest"
                        },
                        "description": "Repository Certificates create/Update request.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitOpsRepoCred:GitOpsRepoCred": {
            "description": "Resource for creating a Harness Gitops Repositories Credentials.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.platform.GitOpsRepoCred(\"test\", {\n    identifier: \"identifier\",\n    accountId: \"account_id\",\n    agentId: \"agent_id\",\n    projectId: \"project_id\",\n    orgId: \"org_id\",\n    creds: [{\n        type: \"git\",\n        url: \"github.com\",\n        sshPrivateKey: \"yoursshprivatekey\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.GitOpsRepoCred(\"test\",\n    identifier=\"identifier\",\n    account_id=\"account_id\",\n    agent_id=\"agent_id\",\n    project_id=\"project_id\",\n    org_id=\"org_id\",\n    creds=[harness.platform.GitOpsRepoCredCredArgs(\n        type=\"git\",\n        url=\"github.com\",\n        ssh_private_key=\"yoursshprivatekey\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.GitOpsRepoCred(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        AccountId = \"account_id\",\n        AgentId = \"agent_id\",\n        ProjectId = \"project_id\",\n        OrgId = \"org_id\",\n        Creds = new[]\n        {\n            new Harness.Platform.Inputs.GitOpsRepoCredCredArgs\n            {\n                Type = \"git\",\n                Url = \"github.com\",\n                SshPrivateKey = \"yoursshprivatekey\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewGitOpsRepoCred(ctx, \"test\", \u0026platform.GitOpsRepoCredArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tAccountId:  pulumi.String(\"account_id\"),\n\t\t\tAgentId:    pulumi.String(\"agent_id\"),\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tCreds: platform.GitOpsRepoCredCredArray{\n\t\t\t\t\u0026platform.GitOpsRepoCredCredArgs{\n\t\t\t\t\tType:          pulumi.String(\"git\"),\n\t\t\t\t\tUrl:           pulumi.String(\"github.com\"),\n\t\t\t\t\tSshPrivateKey: pulumi.String(\"yoursshprivatekey\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GitOpsRepoCred;\nimport com.pulumi.harness.platform.GitOpsRepoCredArgs;\nimport com.pulumi.harness.platform.inputs.GitOpsRepoCredCredArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new GitOpsRepoCred(\"test\", GitOpsRepoCredArgs.builder()\n            .identifier(\"identifier\")\n            .accountId(\"account_id\")\n            .agentId(\"agent_id\")\n            .projectId(\"project_id\")\n            .orgId(\"org_id\")\n            .creds(GitOpsRepoCredCredArgs.builder()\n                .type(\"git\")\n                .url(\"github.com\")\n                .sshPrivateKey(\"yoursshprivatekey\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:GitOpsRepoCred\n    properties:\n      identifier: identifier\n      accountId: account_id\n      agentId: agent_id\n      projectId: project_id\n      orgId: org_id\n      creds:\n        - type: git\n          url: github.com\n          sshPrivateKey: yoursshprivatekey\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport a Account level Gitops Repository Credentials \n\n```sh\n$ pulumi import harness:platform/gitOpsRepoCred:GitOpsRepoCred example \u003cagent_id\u003e/\u003crepocred_id\u003e\n```\n\nImport a Project level Gitops Repository Credentials \n\n```sh\n$ pulumi import harness:platform/gitOpsRepoCred:GitOpsRepoCred example \u003corganization_id\u003e/\u003cproject_id\u003e/\u003cagent_id\u003e/\u003crepocred_id\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the Repository Credential.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier of the Repository Credential.\n"
                },
                "creds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsRepoCredCred:GitOpsRepoCredCred"
                    },
                    "description": "credential details.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the Repository Credential.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the Repository Credential.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the Repository Credential.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "if the Repository credential should be upserted.\n"
                }
            },
            "required": [
                "accountId",
                "agentId",
                "creds",
                "identifier"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the Repository Credential.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier of the Repository Credential.\n"
                },
                "creds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsRepoCredCred:GitOpsRepoCredCred"
                    },
                    "description": "credential details.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the Repository Credential.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the Repository Credential.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the Repository Credential.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "if the Repository credential should be upserted.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "agentId",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitOpsRepoCred resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the Repository Credential.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier of the Repository Credential.\n"
                    },
                    "creds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GitOpsRepoCredCred:GitOpsRepoCredCred"
                        },
                        "description": "credential details.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the Repository Credential.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the Repository Credential.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the Repository Credential.\n"
                    },
                    "upsert": {
                        "type": "boolean",
                        "description": "if the Repository credential should be upserted.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitOpsRepository:GitOpsRepository": {
            "description": "Resource for creating Harness Gitops Repositories.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.GitOpsRepository(\"example\", {\n    identifier: \"identifier\",\n    accountId: \"account_id\",\n    projectId: \"project_id\",\n    orgId: \"org_id\",\n    agentId: \"agent_id\",\n    repos: [{\n        repo: \"https://github.com/willycoll/argocd-example-apps.git\",\n        name: \"repo_name\",\n        insecure: true,\n        connectionType: \"HTTPS_ANONYMOUS\",\n    }],\n    upsert: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.GitOpsRepository(\"example\",\n    identifier=\"identifier\",\n    account_id=\"account_id\",\n    project_id=\"project_id\",\n    org_id=\"org_id\",\n    agent_id=\"agent_id\",\n    repos=[harness.platform.GitOpsRepositoryRepoArgs(\n        repo=\"https://github.com/willycoll/argocd-example-apps.git\",\n        name=\"repo_name\",\n        insecure=True,\n        connection_type=\"HTTPS_ANONYMOUS\",\n    )],\n    upsert=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.GitOpsRepository(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        AccountId = \"account_id\",\n        ProjectId = \"project_id\",\n        OrgId = \"org_id\",\n        AgentId = \"agent_id\",\n        Repos = new[]\n        {\n            new Harness.Platform.Inputs.GitOpsRepositoryRepoArgs\n            {\n                Repo = \"https://github.com/willycoll/argocd-example-apps.git\",\n                Name = \"repo_name\",\n                Insecure = true,\n                ConnectionType = \"HTTPS_ANONYMOUS\",\n            },\n        },\n        Upsert = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewGitOpsRepository(ctx, \"example\", \u0026platform.GitOpsRepositoryArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tAccountId:  pulumi.String(\"account_id\"),\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tAgentId:    pulumi.String(\"agent_id\"),\n\t\t\tRepos: platform.GitOpsRepositoryRepoArray{\n\t\t\t\t\u0026platform.GitOpsRepositoryRepoArgs{\n\t\t\t\t\tRepo:           pulumi.String(\"https://github.com/willycoll/argocd-example-apps.git\"),\n\t\t\t\t\tName:           pulumi.String(\"repo_name\"),\n\t\t\t\t\tInsecure:       pulumi.Bool(true),\n\t\t\t\t\tConnectionType: pulumi.String(\"HTTPS_ANONYMOUS\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tUpsert: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.GitOpsRepository;\nimport com.pulumi.harness.platform.GitOpsRepositoryArgs;\nimport com.pulumi.harness.platform.inputs.GitOpsRepositoryRepoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new GitOpsRepository(\"example\", GitOpsRepositoryArgs.builder()\n            .identifier(\"identifier\")\n            .accountId(\"account_id\")\n            .projectId(\"project_id\")\n            .orgId(\"org_id\")\n            .agentId(\"agent_id\")\n            .repos(GitOpsRepositoryRepoArgs.builder()\n                .repo(\"https://github.com/willycoll/argocd-example-apps.git\")\n                .name(\"repo_name\")\n                .insecure(true)\n                .connectionType(\"HTTPS_ANONYMOUS\")\n                .build())\n            .upsert(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:GitOpsRepository\n    properties:\n      identifier: identifier\n      accountId: account_id\n      projectId: project_id\n      orgId: org_id\n      agentId: agent_id\n      repos:\n        - repo: https://github.com/willycoll/argocd-example-apps.git\n          name: repo_name\n          insecure: true\n          connectionType: HTTPS_ANONYMOUS\n      upsert: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport a Account level Gitops Repository\n\n```sh\n$ pulumi import harness:platform/gitOpsRepository:GitOpsRepository example \u003cagent_id\u003e/\u003crespository_id\u003e\n```\n\nImport a Project level Gitops Repository\n\n```sh\n$ pulumi import harness:platform/gitOpsRepository:GitOpsRepository example \u003corganization_id\u003e/\u003cproject_id\u003e/\u003cagent_id\u003e/\u003crespository_id\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the GitOps repository.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier of the GitOps repository.\n"
                },
                "credsOnly": {
                    "type": "boolean",
                    "description": "Indicates if to operate on credential set instead of repository.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the GitOps repository.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the GitOps repository.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the GitOps repository.\n"
                },
                "queryForceRefresh": {
                    "type": "boolean",
                    "description": "Indicates to force refresh query for repository.\n"
                },
                "queryProject": {
                    "type": "string",
                    "description": "Project to query for the GitOps repo.\n"
                },
                "queryRepo": {
                    "type": "string",
                    "description": "GitOps repository to query.\n"
                },
                "repos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsRepositoryRepo:GitOpsRepositoryRepo"
                    },
                    "description": "Repo details holding application configurations.\n"
                },
                "updateMasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsRepositoryUpdateMask:GitOpsRepositoryUpdateMask"
                    },
                    "description": "Update mask of the repository.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "Indicates if the GitOps repository should be updated if existing and inserted if not.\n"
                }
            },
            "required": [
                "accountId",
                "agentId",
                "identifier",
                "repos"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account identifier of the GitOps repository.\n"
                },
                "agentId": {
                    "type": "string",
                    "description": "Agent identifier of the GitOps repository.\n"
                },
                "credsOnly": {
                    "type": "boolean",
                    "description": "Indicates if to operate on credential set instead of repository.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the GitOps repository.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the GitOps repository.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the GitOps repository.\n"
                },
                "queryForceRefresh": {
                    "type": "boolean",
                    "description": "Indicates to force refresh query for repository.\n"
                },
                "queryProject": {
                    "type": "string",
                    "description": "Project to query for the GitOps repo.\n"
                },
                "queryRepo": {
                    "type": "string",
                    "description": "GitOps repository to query.\n"
                },
                "repos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsRepositoryRepo:GitOpsRepositoryRepo"
                    },
                    "description": "Repo details holding application configurations.\n"
                },
                "updateMasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/GitOpsRepositoryUpdateMask:GitOpsRepositoryUpdateMask"
                    },
                    "description": "Update mask of the repository.\n"
                },
                "upsert": {
                    "type": "boolean",
                    "description": "Indicates if the GitOps repository should be updated if existing and inserted if not.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "agentId",
                "identifier",
                "repos"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitOpsRepository resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps repository.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier of the GitOps repository.\n"
                    },
                    "credsOnly": {
                        "type": "boolean",
                        "description": "Indicates if to operate on credential set instead of repository.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps repository.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the GitOps repository.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps repository.\n"
                    },
                    "queryForceRefresh": {
                        "type": "boolean",
                        "description": "Indicates to force refresh query for repository.\n"
                    },
                    "queryProject": {
                        "type": "string",
                        "description": "Project to query for the GitOps repo.\n"
                    },
                    "queryRepo": {
                        "type": "string",
                        "description": "GitOps repository to query.\n"
                    },
                    "repos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GitOpsRepositoryRepo:GitOpsRepositoryRepo"
                        },
                        "description": "Repo details holding application configurations.\n"
                    },
                    "updateMasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/GitOpsRepositoryUpdateMask:GitOpsRepositoryUpdateMask"
                        },
                        "description": "Update mask of the repository.\n"
                    },
                    "upsert": {
                        "type": "boolean",
                        "description": "Indicates if the GitOps repository should be updated if existing and inserted if not.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/githubConnector:GithubConnector": {
            "description": "Resource for creating a Github connector.\n\n## Import\n\nImport account level github connector \n\n```sh\n$ pulumi import harness:platform/githubConnector:GithubConnector example \u003cconnector_id\u003e\n```\n\nImport org level github connector \n\n```sh\n$ pulumi import harness:platform/githubConnector:GithubConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level github connector \n\n```sh\n$ pulumi import harness:platform/githubConnector:GithubConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "apiAuthentication": {
                    "$ref": "#/types/harness:platform/GithubConnectorApiAuthentication:GithubConnectorApiAuthentication",
                    "description": "Configuration for using the github api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/GithubConnectorCredentials:GithubConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "executeOnDelegate": {
                    "type": "boolean",
                    "description": "Execute on delegate or not.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Githubhub repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "required": [
                "connectionType",
                "credentials",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "apiAuthentication": {
                    "$ref": "#/types/harness:platform/GithubConnectorApiAuthentication:GithubConnectorApiAuthentication",
                    "description": "Configuration for using the github api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/GithubConnectorCredentials:GithubConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "executeOnDelegate": {
                    "type": "boolean",
                    "description": "Execute on delegate or not.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Githubhub repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "requiredInputs": [
                "connectionType",
                "credentials",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GithubConnector resources.\n",
                "properties": {
                    "apiAuthentication": {
                        "$ref": "#/types/harness:platform/GithubConnectorApiAuthentication:GithubConnectorApiAuthentication",
                        "description": "Configuration for using the github api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/harness:platform/GithubConnectorCredentials:GithubConnectorCredentials",
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "executeOnDelegate": {
                        "type": "boolean",
                        "description": "Execute on delegate or not.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Githubhub repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/gitlabConnector:GitlabConnector": {
            "description": "Resource for creating a Gitlab connector.\n\n## Import\n\nImport account level gitlab connector \n\n```sh\n$ pulumi import harness:platform/gitlabConnector:GitlabConnector example \u003cconnector_id\u003e\n```\n\nImport org level gitlab connector \n\n```sh\n$ pulumi import harness:platform/gitlabConnector:GitlabConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level gitlab connector \n\n```sh\n$ pulumi import harness:platform/gitlabConnector:GitlabConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "apiAuthentication": {
                    "$ref": "#/types/harness:platform/GitlabConnectorApiAuthentication:GitlabConnectorApiAuthentication",
                    "description": "Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/GitlabConnectorCredentials:GitlabConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the gitlab repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "required": [
                "connectionType",
                "credentials",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "apiAuthentication": {
                    "$ref": "#/types/harness:platform/GitlabConnectorApiAuthentication:GitlabConnectorApiAuthentication",
                    "description": "Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                },
                "connectionType": {
                    "type": "string",
                    "description": "Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.\n"
                },
                "credentials": {
                    "$ref": "#/types/harness:platform/GitlabConnectorCredentials:GitlabConnectorCredentials",
                    "description": "Credentials to use for the connection.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the gitlab repository or account.\n"
                },
                "validationRepo": {
                    "type": "string",
                    "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                }
            },
            "requiredInputs": [
                "connectionType",
                "credentials",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitlabConnector resources.\n",
                "properties": {
                    "apiAuthentication": {
                        "$ref": "#/types/harness:platform/GitlabConnectorApiAuthentication:GitlabConnectorApiAuthentication",
                        "description": "Configuration for using the gitlab api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n"
                    },
                    "connectionType": {
                        "type": "string",
                        "description": "Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.\n"
                    },
                    "credentials": {
                        "$ref": "#/types/harness:platform/GitlabConnectorCredentials:GitlabConnectorCredentials",
                        "description": "Credentials to use for the connection.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the gitlab repository or account.\n"
                    },
                    "validationRepo": {
                        "type": "string",
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/helmConnector:HelmConnector": {
            "description": "Resource for creating a HTTP Helm connector.\n\n## Import\n\nImport account level helm connector \n\n```sh\n$ pulumi import harness:platform/helmConnector:HelmConnector example \u003cconnector_id\u003e\n```\n\nImport org level helm connector \n\n```sh\n$ pulumi import harness:platform/helmConnector:HelmConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level helm connector \n\n```sh\n$ pulumi import harness:platform/helmConnector:HelmConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/HelmConnectorCredentials:HelmConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the helm server.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/HelmConnectorCredentials:HelmConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the helm server.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HelmConnector resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/HelmConnectorCredentials:HelmConnectorCredentials",
                        "description": "Credentials to use for authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the helm server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/infrastructure:Infrastructure": {
            "description": "Resource for creating a Harness Infrastructure.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.Infrastructure(\"example\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    orgId: \"orgIdentifer\",\n    projectId: \"projectIdentifier\",\n    envId: \"environmentIdentifier\",\n    type: \"KubernetesDirect\",\n    deploymentType: \"Kubernetes\",\n    yaml: `infrastructureDefinition:\n name: name\n identifier: identifier\n description: \"\"\n tags:\n   asda: \"\"\n orgIdentifier: orgIdentifer\n projectIdentifier: projectIdentifier\n environmentRef: environmentIdentifier\n deploymentType: Kubernetes\n type: KubernetesDirect\n spec:\n  connectorRef: account.gfgf\n  namespace: asdasdsa\n  releaseName: release-\u003c+INFRA_KEY\u003e\n  allowSimultaneousDeployments: false\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.Infrastructure(\"example\",\n    identifier=\"identifier\",\n    name=\"name\",\n    org_id=\"orgIdentifer\",\n    project_id=\"projectIdentifier\",\n    env_id=\"environmentIdentifier\",\n    type=\"KubernetesDirect\",\n    deployment_type=\"Kubernetes\",\n    yaml=\"\"\"infrastructureDefinition:\n name: name\n identifier: identifier\n description: \"\"\n tags:\n   asda: \"\"\n orgIdentifier: orgIdentifer\n projectIdentifier: projectIdentifier\n environmentRef: environmentIdentifier\n deploymentType: Kubernetes\n type: KubernetesDirect\n spec:\n  connectorRef: account.gfgf\n  namespace: asdasdsa\n  releaseName: release-\u003c+INFRA_KEY\u003e\n  allowSimultaneousDeployments: false\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.Infrastructure(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        OrgId = \"orgIdentifer\",\n        ProjectId = \"projectIdentifier\",\n        EnvId = \"environmentIdentifier\",\n        Type = \"KubernetesDirect\",\n        DeploymentType = \"Kubernetes\",\n        Yaml = @\"infrastructureDefinition:\n name: name\n identifier: identifier\n description: \"\"\"\"\n tags:\n   asda: \"\"\"\"\n orgIdentifier: orgIdentifer\n projectIdentifier: projectIdentifier\n environmentRef: environmentIdentifier\n deploymentType: Kubernetes\n type: KubernetesDirect\n spec:\n  connectorRef: account.gfgf\n  namespace: asdasdsa\n  releaseName: release-\u003c+INFRA_KEY\u003e\n  allowSimultaneousDeployments: false\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewInfrastructure(ctx, \"example\", \u0026platform.InfrastructureArgs{\n\t\t\tIdentifier:     pulumi.String(\"identifier\"),\n\t\t\tName:           pulumi.String(\"name\"),\n\t\t\tOrgId:          pulumi.String(\"orgIdentifer\"),\n\t\t\tProjectId:      pulumi.String(\"projectIdentifier\"),\n\t\t\tEnvId:          pulumi.String(\"environmentIdentifier\"),\n\t\t\tType:           pulumi.String(\"KubernetesDirect\"),\n\t\t\tDeploymentType: pulumi.String(\"Kubernetes\"),\n\t\t\tYaml: pulumi.String(`infrastructureDefinition:\n name: name\n identifier: identifier\n description: \"\"\n tags:\n   asda: \"\"\n orgIdentifier: orgIdentifer\n projectIdentifier: projectIdentifier\n environmentRef: environmentIdentifier\n deploymentType: Kubernetes\n type: KubernetesDirect\n spec:\n  connectorRef: account.gfgf\n  namespace: asdasdsa\n  releaseName: release-\u003c+INFRA_KEY\u003e\n  allowSimultaneousDeployments: false\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Infrastructure;\nimport com.pulumi.harness.platform.InfrastructureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Infrastructure(\"example\", InfrastructureArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .orgId(\"orgIdentifer\")\n            .projectId(\"projectIdentifier\")\n            .envId(\"environmentIdentifier\")\n            .type(\"KubernetesDirect\")\n            .deploymentType(\"Kubernetes\")\n            .yaml(\"\"\"\ninfrastructureDefinition:\n name: name\n identifier: identifier\n description: \"\"\n tags:\n   asda: \"\"\n orgIdentifier: orgIdentifer\n projectIdentifier: projectIdentifier\n environmentRef: environmentIdentifier\n deploymentType: Kubernetes\n type: KubernetesDirect\n spec:\n  connectorRef: account.gfgf\n  namespace: asdasdsa\n  releaseName: release-\u003c+INFRA_KEY\u003e\n  allowSimultaneousDeployments: false\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:Infrastructure\n    properties:\n      identifier: identifier\n      name: name\n      orgId: orgIdentifer\n      projectId: projectIdentifier\n      envId: environmentIdentifier\n      type: KubernetesDirect\n      deploymentType: Kubernetes\n      yaml: |\n        infrastructureDefinition:\n         name: name\n         identifier: identifier\n         description: \"\"\n         tags:\n           asda: \"\"\n         orgIdentifier: orgIdentifer\n         projectIdentifier: projectIdentifier\n         environmentRef: environmentIdentifier\n         deploymentType: Kubernetes\n         type: KubernetesDirect\n         spec:\n          connectorRef: account.gfgf\n          namespace: asdasdsa\n          releaseName: release-\u003c+INFRA_KEY\u003e\n          allowSimultaneousDeployments: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level infrastructure\n\n```sh\n$ pulumi import harness:platform/infrastructure:Infrastructure example \u003cenv_id\u003e/\u003cinfrastructure_id\u003e\n```\n\nImport org level infrastructure\n\n```sh\n$ pulumi import harness:platform/infrastructure:Infrastructure example \u003corg_id\u003e/\u003cenv_id\u003e/\u003cinfrastructure_id\u003e\n```\n\nImport project level infrastructure\n\n```sh\n$ pulumi import harness:platform/infrastructure:Infrastructure example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cenv_id\u003e/\u003cinfrastructure_id\u003e\n```\n\n",
            "properties": {
                "deploymentType": {
                    "type": "string",
                    "description": "Infrastructure deployment type. Valid values are Kubernetes, NativeHelm, Ssh, WinRm, ServerlessAwsLambda, AzureWebApp, Custom, ECS.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "envId": {
                    "type": "string",
                    "description": "Environment Identifier.\n"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of infrastructure\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of Infrastructure. Valid values are KubernetesDirect, KubernetesGcp, ServerlessAwsLambda, Pdc, KubernetesAzure, SshWinRmAzure, SshWinRmAws, AzureWebApp, ECS, GitOps, CustomDeployment, TAS.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Infrastructure YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "required": [
                "deploymentType",
                "envId",
                "forceDelete",
                "identifier",
                "name",
                "tags",
                "type",
                "yaml"
            ],
            "inputProperties": {
                "deploymentType": {
                    "type": "string",
                    "description": "Infrastructure deployment type. Valid values are Kubernetes, NativeHelm, Ssh, WinRm, ServerlessAwsLambda, AzureWebApp, Custom, ECS.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "envId": {
                    "type": "string",
                    "description": "Environment Identifier.\n"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of infrastructure\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of Infrastructure. Valid values are KubernetesDirect, KubernetesGcp, ServerlessAwsLambda, Pdc, KubernetesAzure, SshWinRmAzure, SshWinRmAws, AzureWebApp, ECS, GitOps, CustomDeployment, TAS.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Infrastructure YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "requiredInputs": [
                "envId",
                "identifier",
                "type",
                "yaml"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Infrastructure resources.\n",
                "properties": {
                    "deploymentType": {
                        "type": "string",
                        "description": "Infrastructure deployment type. Valid values are Kubernetes, NativeHelm, Ssh, WinRm, ServerlessAwsLambda, AzureWebApp, Custom, ECS.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "envId": {
                        "type": "string",
                        "description": "Environment Identifier.\n"
                    },
                    "forceDelete": {
                        "type": "string",
                        "description": "Enable this flag for force deletion of infrastructure\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Infrastructure. Valid values are KubernetesDirect, KubernetesGcp, ServerlessAwsLambda, Pdc, KubernetesAzure, SshWinRmAzure, SshWinRmAws, AzureWebApp, ECS, GitOps, CustomDeployment, TAS.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Infrastructure YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/inputSet:InputSet": {
            "description": "Resource for creating a Harness InputSet.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.InputSet(\"example\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    tags: [\"foo:bar\"],\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    pipelineId: \"pipeline_id\",\n    yaml: `inputSet:\n  identifier: \"identifier\"\n  name: \"name\"\n  tags:\n    foo: \"bar\"\n  orgIdentifier: \"org_id\"\n  projectIdentifier: \"project_id\"\n  pipeline:\n    identifier: \"pipeline_id\"\n    variables:\n    - name: \"key\"\n      type: \"String\"\n      value: \"value\"\n`,\n});\n// Remote InputSet\nconst test = new harness.platform.InputSet(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    tags: [\"foo:bar\"],\n    orgId: testHarnessPlatformOrganization.id,\n    projectId: testHarnessPlatformProject.id,\n    pipelineId: testHarnessPlatformPipeline.id,\n    gitDetails: {\n        branchName: \"main\",\n        commitMessage: \"Commit\",\n        filePath: \".harness/file_path.yaml\",\n        connectorRef: \"account.connector_ref\",\n        storeType: \"REMOTE\",\n        repoName: \"repo_name\",\n    },\n    yaml: `inputSet:\n  identifier: \"identifier\"\n  name: \"name\"\n  tags:\n    foo: \"bar\"\n  orgIdentifier: \"${testHarnessPlatformOrganization.id}\"\n  projectIdentifier: \"${testHarnessPlatformProject.id}\"\n  pipeline:\n    identifier: \"${testHarnessPlatformPipeline.id}\"\n    variables:\n    - name: \"key\"\n      type: \"String\"\n      value: \"value\"\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.InputSet(\"example\",\n    identifier=\"identifier\",\n    name=\"name\",\n    tags=[\"foo:bar\"],\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    pipeline_id=\"pipeline_id\",\n    yaml=\"\"\"inputSet:\n  identifier: \"identifier\"\n  name: \"name\"\n  tags:\n    foo: \"bar\"\n  orgIdentifier: \"org_id\"\n  projectIdentifier: \"project_id\"\n  pipeline:\n    identifier: \"pipeline_id\"\n    variables:\n    - name: \"key\"\n      type: \"String\"\n      value: \"value\"\n\"\"\")\n# Remote InputSet\ntest = harness.platform.InputSet(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    tags=[\"foo:bar\"],\n    org_id=test_harness_platform_organization[\"id\"],\n    project_id=test_harness_platform_project[\"id\"],\n    pipeline_id=test_harness_platform_pipeline[\"id\"],\n    git_details=harness.platform.InputSetGitDetailsArgs(\n        branch_name=\"main\",\n        commit_message=\"Commit\",\n        file_path=\".harness/file_path.yaml\",\n        connector_ref=\"account.connector_ref\",\n        store_type=\"REMOTE\",\n        repo_name=\"repo_name\",\n    ),\n    yaml=f\"\"\"inputSet:\n  identifier: \"identifier\"\n  name: \"name\"\n  tags:\n    foo: \"bar\"\n  orgIdentifier: \"{test_harness_platform_organization[\"id\"]}\"\n  projectIdentifier: \"{test_harness_platform_project[\"id\"]}\"\n  pipeline:\n    identifier: \"{test_harness_platform_pipeline[\"id\"]}\"\n    variables:\n    - name: \"key\"\n      type: \"String\"\n      value: \"value\"\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.InputSet(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        PipelineId = \"pipeline_id\",\n        Yaml = @\"inputSet:\n  identifier: \"\"identifier\"\"\n  name: \"\"name\"\"\n  tags:\n    foo: \"\"bar\"\"\n  orgIdentifier: \"\"org_id\"\"\n  projectIdentifier: \"\"project_id\"\"\n  pipeline:\n    identifier: \"\"pipeline_id\"\"\n    variables:\n    - name: \"\"key\"\"\n      type: \"\"String\"\"\n      value: \"\"value\"\"\n\",\n    });\n\n    // Remote InputSet\n    var test = new Harness.Platform.InputSet(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        OrgId = testHarnessPlatformOrganization.Id,\n        ProjectId = testHarnessPlatformProject.Id,\n        PipelineId = testHarnessPlatformPipeline.Id,\n        GitDetails = new Harness.Platform.Inputs.InputSetGitDetailsArgs\n        {\n            BranchName = \"main\",\n            CommitMessage = \"Commit\",\n            FilePath = \".harness/file_path.yaml\",\n            ConnectorRef = \"account.connector_ref\",\n            StoreType = \"REMOTE\",\n            RepoName = \"repo_name\",\n        },\n        Yaml = @$\"inputSet:\n  identifier: \"\"identifier\"\"\n  name: \"\"name\"\"\n  tags:\n    foo: \"\"bar\"\"\n  orgIdentifier: \"\"{testHarnessPlatformOrganization.Id}\"\"\n  projectIdentifier: \"\"{testHarnessPlatformProject.Id}\"\"\n  pipeline:\n    identifier: \"\"{testHarnessPlatformPipeline.Id}\"\"\n    variables:\n    - name: \"\"key\"\"\n      type: \"\"String\"\"\n      value: \"\"value\"\"\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewInputSet(ctx, \"example\", \u0026platform.InputSetArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tName:       pulumi.String(\"name\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tPipelineId: pulumi.String(\"pipeline_id\"),\n\t\t\tYaml: pulumi.String(`inputSet:\n  identifier: \"identifier\"\n  name: \"name\"\n  tags:\n    foo: \"bar\"\n  orgIdentifier: \"org_id\"\n  projectIdentifier: \"project_id\"\n  pipeline:\n    identifier: \"pipeline_id\"\n    variables:\n    - name: \"key\"\n      type: \"String\"\n      value: \"value\"\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Remote InputSet\n\t\t_, err = platform.NewInputSet(ctx, \"test\", \u0026platform.InputSetArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tName:       pulumi.String(\"name\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tOrgId:      pulumi.Any(testHarnessPlatformOrganization.Id),\n\t\t\tProjectId:  pulumi.Any(testHarnessPlatformProject.Id),\n\t\t\tPipelineId: pulumi.Any(testHarnessPlatformPipeline.Id),\n\t\t\tGitDetails: \u0026platform.InputSetGitDetailsArgs{\n\t\t\t\tBranchName:    pulumi.String(\"main\"),\n\t\t\t\tCommitMessage: pulumi.String(\"Commit\"),\n\t\t\t\tFilePath:      pulumi.String(\".harness/file_path.yaml\"),\n\t\t\t\tConnectorRef:  pulumi.String(\"account.connector_ref\"),\n\t\t\t\tStoreType:     pulumi.String(\"REMOTE\"),\n\t\t\t\tRepoName:      pulumi.String(\"repo_name\"),\n\t\t\t},\n\t\t\tYaml: pulumi.String(fmt.Sprintf(`inputSet:\n  identifier: \"identifier\"\n  name: \"name\"\n  tags:\n    foo: \"bar\"\n  orgIdentifier: \"%v\"\n  projectIdentifier: \"%v\"\n  pipeline:\n    identifier: \"%v\"\n    variables:\n    - name: \"key\"\n      type: \"String\"\n      value: \"value\"\n`, testHarnessPlatformOrganization.Id, testHarnessPlatformProject.Id, testHarnessPlatformPipeline.Id)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.InputSet;\nimport com.pulumi.harness.platform.InputSetArgs;\nimport com.pulumi.harness.platform.inputs.InputSetGitDetailsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new InputSet(\"example\", InputSetArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .tags(\"foo:bar\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .pipelineId(\"pipeline_id\")\n            .yaml(\"\"\"\ninputSet:\n  identifier: \"identifier\"\n  name: \"name\"\n  tags:\n    foo: \"bar\"\n  orgIdentifier: \"org_id\"\n  projectIdentifier: \"project_id\"\n  pipeline:\n    identifier: \"pipeline_id\"\n    variables:\n    - name: \"key\"\n      type: \"String\"\n      value: \"value\"\n            \"\"\")\n            .build());\n\n        // Remote InputSet\n        var test = new InputSet(\"test\", InputSetArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .tags(\"foo:bar\")\n            .orgId(testHarnessPlatformOrganization.id())\n            .projectId(testHarnessPlatformProject.id())\n            .pipelineId(testHarnessPlatformPipeline.id())\n            .gitDetails(InputSetGitDetailsArgs.builder()\n                .branchName(\"main\")\n                .commitMessage(\"Commit\")\n                .filePath(\".harness/file_path.yaml\")\n                .connectorRef(\"account.connector_ref\")\n                .storeType(\"REMOTE\")\n                .repoName(\"repo_name\")\n                .build())\n            .yaml(\"\"\"\ninputSet:\n  identifier: \"identifier\"\n  name: \"name\"\n  tags:\n    foo: \"bar\"\n  orgIdentifier: \"%s\"\n  projectIdentifier: \"%s\"\n  pipeline:\n    identifier: \"%s\"\n    variables:\n    - name: \"key\"\n      type: \"String\"\n      value: \"value\"\n\", testHarnessPlatformOrganization.id(),testHarnessPlatformProject.id(),testHarnessPlatformPipeline.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:InputSet\n    properties:\n      identifier: identifier\n      name: name\n      tags:\n        - foo:bar\n      orgId: org_id\n      projectId: project_id\n      pipelineId: pipeline_id\n      yaml: |\n        inputSet:\n          identifier: \"identifier\"\n          name: \"name\"\n          tags:\n            foo: \"bar\"\n          orgIdentifier: \"org_id\"\n          projectIdentifier: \"project_id\"\n          pipeline:\n            identifier: \"pipeline_id\"\n            variables:\n            - name: \"key\"\n              type: \"String\"\n              value: \"value\"\n  # Remote InputSet\n  test:\n    type: harness:platform:InputSet\n    properties:\n      identifier: identifier\n      name: name\n      tags:\n        - foo:bar\n      orgId: ${testHarnessPlatformOrganization.id}\n      projectId: ${testHarnessPlatformProject.id}\n      pipelineId: ${testHarnessPlatformPipeline.id}\n      gitDetails:\n        branchName: main\n        commitMessage: Commit\n        filePath: .harness/file_path.yaml\n        connectorRef: account.connector_ref\n        storeType: REMOTE\n        repoName: repo_name\n      yaml: |\n        inputSet:\n          identifier: \"identifier\"\n          name: \"name\"\n          tags:\n            foo: \"bar\"\n          orgIdentifier: \"${testHarnessPlatformOrganization.id}\"\n          projectIdentifier: \"${testHarnessPlatformProject.id}\"\n          pipeline:\n            identifier: \"${testHarnessPlatformPipeline.id}\"\n            variables:\n            - name: \"key\"\n              type: \"String\"\n              value: \"value\"\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport input set \n\n```sh\n$ pulumi import harness:platform/inputSet:InputSet example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cpipeline_id\u003e/\u003cinput_set_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "gitDetails": {
                    "$ref": "#/types/harness:platform/InputSetGitDetails:InputSetGitDetails",
                    "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "pipelineId": {
                    "type": "string",
                    "description": "Identifier of the pipeline\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Input Set YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "orgId",
                "pipelineId",
                "projectId",
                "yaml"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "gitDetails": {
                    "$ref": "#/types/harness:platform/InputSetGitDetails:InputSetGitDetails",
                    "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "pipelineId": {
                    "type": "string",
                    "description": "Identifier of the pipeline\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Input Set YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "orgId",
                "pipelineId",
                "projectId",
                "yaml"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InputSet resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/InputSetGitDetails:InputSetGitDetails",
                        "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "pipelineId": {
                        "type": "string",
                        "description": "Identifier of the pipeline\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Input Set YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/jenkinsConnector:JenkinsConnector": {
            "description": "Resource for creating a Jenkins connector.\n\n## Import\n\nImport account level jenkins connector \n\n```sh\n$ pulumi import harness:platform/jenkinsConnector:JenkinsConnector example \u003cconnector_id\u003e\n```\n\nImport org level jenkins connector \n\n```sh\n$ pulumi import harness:platform/jenkinsConnector:JenkinsConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level jenkins connector \n\n```sh\n$ pulumi import harness:platform/jenkinsConnector:JenkinsConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "auth": {
                    "$ref": "#/types/harness:platform/JenkinsConnectorAuth:JenkinsConnectorAuth",
                    "description": "This entity contains the details for Jenkins Authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "jenkinsUrl": {
                    "type": "string",
                    "description": "Jenkins Url.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "identifier",
                "jenkinsUrl",
                "name"
            ],
            "inputProperties": {
                "auth": {
                    "$ref": "#/types/harness:platform/JenkinsConnectorAuth:JenkinsConnectorAuth",
                    "description": "This entity contains the details for Jenkins Authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "jenkinsUrl": {
                    "type": "string",
                    "description": "Jenkins Url.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "jenkinsUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering JenkinsConnector resources.\n",
                "properties": {
                    "auth": {
                        "$ref": "#/types/harness:platform/JenkinsConnectorAuth:JenkinsConnectorAuth",
                        "description": "This entity contains the details for Jenkins Authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "jenkinsUrl": {
                        "type": "string",
                        "description": "Jenkins Url.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/jiraConnector:JiraConnector": {
            "description": "Resource for creating a Jira connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.platform.JiraConnector(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    url: \"https://jira.com\",\n    delegateSelectors: [\"harness-delegate\"],\n    auth: {\n        authType: \"UsernamePassword\",\n        usernamePassword: {\n            username: \"admin\",\n            passwordRef: \"account.secret_id\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.JiraConnector(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    url=\"https://jira.com\",\n    delegate_selectors=[\"harness-delegate\"],\n    auth=harness.platform.JiraConnectorAuthArgs(\n        auth_type=\"UsernamePassword\",\n        username_password=harness.platform.JiraConnectorAuthUsernamePasswordArgs(\n            username=\"admin\",\n            password_ref=\"account.secret_id\",\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.JiraConnector(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://jira.com\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        Auth = new Harness.Platform.Inputs.JiraConnectorAuthArgs\n        {\n            AuthType = \"UsernamePassword\",\n            UsernamePassword = new Harness.Platform.Inputs.JiraConnectorAuthUsernamePasswordArgs\n            {\n                Username = \"admin\",\n                PasswordRef = \"account.secret_id\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewJiraConnector(ctx, \"test\", \u0026platform.JiraConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://jira.com\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tAuth: \u0026platform.JiraConnectorAuthArgs{\n\t\t\t\tAuthType: pulumi.String(\"UsernamePassword\"),\n\t\t\t\tUsernamePassword: \u0026platform.JiraConnectorAuthUsernamePasswordArgs{\n\t\t\t\t\tUsername:    pulumi.String(\"admin\"),\n\t\t\t\t\tPasswordRef: pulumi.String(\"account.secret_id\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.JiraConnector;\nimport com.pulumi.harness.platform.JiraConnectorArgs;\nimport com.pulumi.harness.platform.inputs.JiraConnectorAuthArgs;\nimport com.pulumi.harness.platform.inputs.JiraConnectorAuthUsernamePasswordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new JiraConnector(\"test\", JiraConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .url(\"https://jira.com\")\n            .delegateSelectors(\"harness-delegate\")\n            .auth(JiraConnectorAuthArgs.builder()\n                .authType(\"UsernamePassword\")\n                .usernamePassword(JiraConnectorAuthUsernamePasswordArgs.builder()\n                    .username(\"admin\")\n                    .passwordRef(\"account.secret_id\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:JiraConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      url: https://jira.com\n      delegateSelectors:\n        - harness-delegate\n      auth:\n        authType: UsernamePassword\n        usernamePassword:\n          username: admin\n          passwordRef: account.secret_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level jira connector \n\n```sh\n$ pulumi import harness:platform/jiraConnector:JiraConnector example \u003cconnector_id\u003e\n```\n\nImport org level jira connector \n\n```sh\n$ pulumi import harness:platform/jiraConnector:JiraConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level jira connector \n\n```sh\n$ pulumi import harness:platform/jiraConnector:JiraConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "auth": {
                    "$ref": "#/types/harness:platform/JiraConnectorAuth:JiraConnectorAuth",
                    "description": "The credentials to use for the jira authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Jira server.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "required": [
                "auth",
                "identifier",
                "name",
                "passwordRef",
                "url",
                "username",
                "usernameRef"
            ],
            "inputProperties": {
                "auth": {
                    "$ref": "#/types/harness:platform/JiraConnectorAuth:JiraConnectorAuth",
                    "description": "The credentials to use for the jira authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Jira server.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "requiredInputs": [
                "auth",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering JiraConnector resources.\n",
                "properties": {
                    "auth": {
                        "$ref": "#/types/harness:platform/JiraConnectorAuth:JiraConnectorAuth",
                        "description": "The credentials to use for the jira authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "passwordRef": {
                        "type": "string",
                        "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Jira server.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username to use for authentication.\n"
                    },
                    "usernameRef": {
                        "type": "string",
                        "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/kubernetesCloudCostConnector:KubernetesCloudCostConnector": {
            "description": "Resource for creating a Kubernetes Cloud Cost connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.KubernetesCloudCostConnector(\"example\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"example\",\n    tags: [\"foo:bar\"],\n    featuresEnableds: [\n        \"VISIBILITY\",\n        \"OPTIMIZATION\",\n    ],\n    connectorRef: \"connector_ref\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.KubernetesCloudCostConnector(\"example\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"example\",\n    tags=[\"foo:bar\"],\n    features_enableds=[\n        \"VISIBILITY\",\n        \"OPTIMIZATION\",\n    ],\n    connector_ref=\"connector_ref\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.KubernetesCloudCostConnector(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"example\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        FeaturesEnableds = new[]\n        {\n            \"VISIBILITY\",\n            \"OPTIMIZATION\",\n        },\n        ConnectorRef = \"connector_ref\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewKubernetesCloudCostConnector(ctx, \"example\", \u0026platform.KubernetesCloudCostConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tFeaturesEnableds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"VISIBILITY\"),\n\t\t\t\tpulumi.String(\"OPTIMIZATION\"),\n\t\t\t},\n\t\t\tConnectorRef: pulumi.String(\"connector_ref\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.KubernetesCloudCostConnector;\nimport com.pulumi.harness.platform.KubernetesCloudCostConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new KubernetesCloudCostConnector(\"example\", KubernetesCloudCostConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"example\")\n            .tags(\"foo:bar\")\n            .featuresEnableds(            \n                \"VISIBILITY\",\n                \"OPTIMIZATION\")\n            .connectorRef(\"connector_ref\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:KubernetesCloudCostConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: example\n      tags:\n        - foo:bar\n      featuresEnableds:\n        - VISIBILITY\n        - OPTIMIZATION\n      connectorRef: connector_ref\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level kubernetes cloud cost connector \n\n```sh\n$ pulumi import harness:platform/kubernetesCloudCostConnector:KubernetesCloudCostConnector example \u003cconnector_id\u003e\n```\n\nImport org level kubernetes cloud cost connector \n\n```sh\n$ pulumi import harness:platform/kubernetesCloudCostConnector:KubernetesCloudCostConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level kubernetes cloud cost connector \n\n```sh\n$ pulumi import harness:platform/kubernetesCloudCostConnector:KubernetesCloudCostConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "connectorRef": {
                    "type": "string",
                    "description": "Reference of the Connector. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "featuresEnableds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates which feature to enable among Billing, Optimization, and Visibility.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "connectorRef",
                "featuresEnableds",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "connectorRef": {
                    "type": "string",
                    "description": "Reference of the Connector. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "featuresEnableds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates which feature to enable among Billing, Optimization, and Visibility.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "connectorRef",
                "featuresEnableds",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesCloudCostConnector resources.\n",
                "properties": {
                    "connectorRef": {
                        "type": "string",
                        "description": "Reference of the Connector. To reference a connector at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a connector at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "featuresEnableds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates which feature to enable among Billing, Optimization, and Visibility.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/kubernetesConnector:KubernetesConnector": {
            "description": "Resource for creating a K8s connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst clientKeyCert = new harness.platform.KubernetesConnector(\"clientKeyCert\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"description\",\n    tags: [\"foo:bar\"],\n    clientKeyCert: {\n        masterUrl: \"https://kubernetes.example.com\",\n        caCertRef: \"account.TEST_k8ss_client_stuff\",\n        clientCertRef: \"account.test_k8s_client_cert\",\n        clientKeyRef: \"account.TEST_k8s_client_key\",\n        clientKeyPassphraseRef: \"account.TEST_k8s_client_test\",\n        clientKeyAlgorithm: \"RSA\",\n    },\n    delegateSelectors: [\"harness-delegate\"],\n});\nconst usernamePassword = new harness.platform.KubernetesConnector(\"usernamePassword\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"description\",\n    tags: [\"foo:bar\"],\n    usernamePassword: {\n        masterUrl: \"https://kubernetes.example.com\",\n        username: \"admin\",\n        passwordRef: \"account.TEST_k8s_client_test\",\n    },\n    delegateSelectors: [\"harness-delegate\"],\n});\nconst serviceAccount = new harness.platform.KubernetesConnector(\"serviceAccount\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"description\",\n    tags: [\"foo:bar\"],\n    serviceAccount: {\n        masterUrl: \"https://kubernetes.example.com\",\n        serviceAccountTokenRef: \"account.TEST_k8s_client_test\",\n    },\n    delegateSelectors: [\"harness-delegate\"],\n});\nconst openIDConnect = new harness.platform.KubernetesConnector(\"openIDConnect\", {\n    identifier: \"%[1]s\",\n    name: \"%[2]s\",\n    description: \"description\",\n    tags: [\"foo:bar\"],\n    openidConnect: {\n        masterUrl: \"https://kubernetes.example.com\",\n        issuerUrl: \"https://oidc.example.com\",\n        usernameRef: \"account.TEST_k8s_client_test\",\n        clientIdRef: \"account.TEST_k8s_client_test\",\n        passwordRef: \"account.TEST_k8s_client_test\",\n        secretRef: \"account.TEST_k8s_client_test\",\n        scopes: [\n            \"scope1\",\n            \"scope2\",\n        ],\n    },\n    delegateSelectors: [\"harness-delegate\"],\n});\nconst inheritFromDelegate = new harness.platform.KubernetesConnector(\"inheritFromDelegate\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"description\",\n    tags: [\"foo:bar\"],\n    inheritFromDelegate: {\n        delegateSelectors: [\"harness-delegate\"],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nclient_key_cert = harness.platform.KubernetesConnector(\"clientKeyCert\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"description\",\n    tags=[\"foo:bar\"],\n    client_key_cert=harness.platform.KubernetesConnectorClientKeyCertArgs(\n        master_url=\"https://kubernetes.example.com\",\n        ca_cert_ref=\"account.TEST_k8ss_client_stuff\",\n        client_cert_ref=\"account.test_k8s_client_cert\",\n        client_key_ref=\"account.TEST_k8s_client_key\",\n        client_key_passphrase_ref=\"account.TEST_k8s_client_test\",\n        client_key_algorithm=\"RSA\",\n    ),\n    delegate_selectors=[\"harness-delegate\"])\nusername_password = harness.platform.KubernetesConnector(\"usernamePassword\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"description\",\n    tags=[\"foo:bar\"],\n    username_password=harness.platform.KubernetesConnectorUsernamePasswordArgs(\n        master_url=\"https://kubernetes.example.com\",\n        username=\"admin\",\n        password_ref=\"account.TEST_k8s_client_test\",\n    ),\n    delegate_selectors=[\"harness-delegate\"])\nservice_account = harness.platform.KubernetesConnector(\"serviceAccount\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"description\",\n    tags=[\"foo:bar\"],\n    service_account=harness.platform.KubernetesConnectorServiceAccountArgs(\n        master_url=\"https://kubernetes.example.com\",\n        service_account_token_ref=\"account.TEST_k8s_client_test\",\n    ),\n    delegate_selectors=[\"harness-delegate\"])\nopen_id_connect = harness.platform.KubernetesConnector(\"openIDConnect\",\n    identifier=\"%[1]s\",\n    name=\"%[2]s\",\n    description=\"description\",\n    tags=[\"foo:bar\"],\n    openid_connect=harness.platform.KubernetesConnectorOpenidConnectArgs(\n        master_url=\"https://kubernetes.example.com\",\n        issuer_url=\"https://oidc.example.com\",\n        username_ref=\"account.TEST_k8s_client_test\",\n        client_id_ref=\"account.TEST_k8s_client_test\",\n        password_ref=\"account.TEST_k8s_client_test\",\n        secret_ref=\"account.TEST_k8s_client_test\",\n        scopes=[\n            \"scope1\",\n            \"scope2\",\n        ],\n    ),\n    delegate_selectors=[\"harness-delegate\"])\ninherit_from_delegate = harness.platform.KubernetesConnector(\"inheritFromDelegate\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"description\",\n    tags=[\"foo:bar\"],\n    inherit_from_delegate=harness.platform.KubernetesConnectorInheritFromDelegateArgs(\n        delegate_selectors=[\"harness-delegate\"],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var clientKeyCert = new Harness.Platform.KubernetesConnector(\"clientKeyCert\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"description\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        ClientKeyCert = new Harness.Platform.Inputs.KubernetesConnectorClientKeyCertArgs\n        {\n            MasterUrl = \"https://kubernetes.example.com\",\n            CaCertRef = \"account.TEST_k8ss_client_stuff\",\n            ClientCertRef = \"account.test_k8s_client_cert\",\n            ClientKeyRef = \"account.TEST_k8s_client_key\",\n            ClientKeyPassphraseRef = \"account.TEST_k8s_client_test\",\n            ClientKeyAlgorithm = \"RSA\",\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n    });\n\n    var usernamePassword = new Harness.Platform.KubernetesConnector(\"usernamePassword\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"description\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        UsernamePassword = new Harness.Platform.Inputs.KubernetesConnectorUsernamePasswordArgs\n        {\n            MasterUrl = \"https://kubernetes.example.com\",\n            Username = \"admin\",\n            PasswordRef = \"account.TEST_k8s_client_test\",\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n    });\n\n    var serviceAccount = new Harness.Platform.KubernetesConnector(\"serviceAccount\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"description\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        ServiceAccount = new Harness.Platform.Inputs.KubernetesConnectorServiceAccountArgs\n        {\n            MasterUrl = \"https://kubernetes.example.com\",\n            ServiceAccountTokenRef = \"account.TEST_k8s_client_test\",\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n    });\n\n    var openIDConnect = new Harness.Platform.KubernetesConnector(\"openIDConnect\", new()\n    {\n        Identifier = \"%[1]s\",\n        Name = \"%[2]s\",\n        Description = \"description\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        OpenidConnect = new Harness.Platform.Inputs.KubernetesConnectorOpenidConnectArgs\n        {\n            MasterUrl = \"https://kubernetes.example.com\",\n            IssuerUrl = \"https://oidc.example.com\",\n            UsernameRef = \"account.TEST_k8s_client_test\",\n            ClientIdRef = \"account.TEST_k8s_client_test\",\n            PasswordRef = \"account.TEST_k8s_client_test\",\n            SecretRef = \"account.TEST_k8s_client_test\",\n            Scopes = new[]\n            {\n                \"scope1\",\n                \"scope2\",\n            },\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n    });\n\n    var inheritFromDelegate = new Harness.Platform.KubernetesConnector(\"inheritFromDelegate\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"description\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        InheritFromDelegate = new Harness.Platform.Inputs.KubernetesConnectorInheritFromDelegateArgs\n        {\n            DelegateSelectors = new[]\n            {\n                \"harness-delegate\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewKubernetesConnector(ctx, \"clientKeyCert\", \u0026platform.KubernetesConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tClientKeyCert: \u0026platform.KubernetesConnectorClientKeyCertArgs{\n\t\t\t\tMasterUrl:              pulumi.String(\"https://kubernetes.example.com\"),\n\t\t\t\tCaCertRef:              pulumi.String(\"account.TEST_k8ss_client_stuff\"),\n\t\t\t\tClientCertRef:          pulumi.String(\"account.test_k8s_client_cert\"),\n\t\t\t\tClientKeyRef:           pulumi.String(\"account.TEST_k8s_client_key\"),\n\t\t\t\tClientKeyPassphraseRef: pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t\tClientKeyAlgorithm:     pulumi.String(\"RSA\"),\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewKubernetesConnector(ctx, \"usernamePassword\", \u0026platform.KubernetesConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUsernamePassword: \u0026platform.KubernetesConnectorUsernamePasswordArgs{\n\t\t\t\tMasterUrl:   pulumi.String(\"https://kubernetes.example.com\"),\n\t\t\t\tUsername:    pulumi.String(\"admin\"),\n\t\t\t\tPasswordRef: pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewKubernetesConnector(ctx, \"serviceAccount\", \u0026platform.KubernetesConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tServiceAccount: \u0026platform.KubernetesConnectorServiceAccountArgs{\n\t\t\t\tMasterUrl:              pulumi.String(\"https://kubernetes.example.com\"),\n\t\t\t\tServiceAccountTokenRef: pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewKubernetesConnector(ctx, \"openIDConnect\", \u0026platform.KubernetesConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"%[1]s\"),\n\t\t\tName:        pulumi.String(\"%[2]s\"),\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tOpenidConnect: \u0026platform.KubernetesConnectorOpenidConnectArgs{\n\t\t\t\tMasterUrl:   pulumi.String(\"https://kubernetes.example.com\"),\n\t\t\t\tIssuerUrl:   pulumi.String(\"https://oidc.example.com\"),\n\t\t\t\tUsernameRef: pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t\tClientIdRef: pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t\tPasswordRef: pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t\tSecretRef:   pulumi.String(\"account.TEST_k8s_client_test\"),\n\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"scope1\"),\n\t\t\t\t\tpulumi.String(\"scope2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewKubernetesConnector(ctx, \"inheritFromDelegate\", \u0026platform.KubernetesConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tInheritFromDelegate: \u0026platform.KubernetesConnectorInheritFromDelegateArgs{\n\t\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.KubernetesConnector;\nimport com.pulumi.harness.platform.KubernetesConnectorArgs;\nimport com.pulumi.harness.platform.inputs.KubernetesConnectorClientKeyCertArgs;\nimport com.pulumi.harness.platform.inputs.KubernetesConnectorUsernamePasswordArgs;\nimport com.pulumi.harness.platform.inputs.KubernetesConnectorServiceAccountArgs;\nimport com.pulumi.harness.platform.inputs.KubernetesConnectorOpenidConnectArgs;\nimport com.pulumi.harness.platform.inputs.KubernetesConnectorInheritFromDelegateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var clientKeyCert = new KubernetesConnector(\"clientKeyCert\", KubernetesConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"description\")\n            .tags(\"foo:bar\")\n            .clientKeyCert(KubernetesConnectorClientKeyCertArgs.builder()\n                .masterUrl(\"https://kubernetes.example.com\")\n                .caCertRef(\"account.TEST_k8ss_client_stuff\")\n                .clientCertRef(\"account.test_k8s_client_cert\")\n                .clientKeyRef(\"account.TEST_k8s_client_key\")\n                .clientKeyPassphraseRef(\"account.TEST_k8s_client_test\")\n                .clientKeyAlgorithm(\"RSA\")\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .build());\n\n        var usernamePassword = new KubernetesConnector(\"usernamePassword\", KubernetesConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"description\")\n            .tags(\"foo:bar\")\n            .usernamePassword(KubernetesConnectorUsernamePasswordArgs.builder()\n                .masterUrl(\"https://kubernetes.example.com\")\n                .username(\"admin\")\n                .passwordRef(\"account.TEST_k8s_client_test\")\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .build());\n\n        var serviceAccount = new KubernetesConnector(\"serviceAccount\", KubernetesConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"description\")\n            .tags(\"foo:bar\")\n            .serviceAccount(KubernetesConnectorServiceAccountArgs.builder()\n                .masterUrl(\"https://kubernetes.example.com\")\n                .serviceAccountTokenRef(\"account.TEST_k8s_client_test\")\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .build());\n\n        var openIDConnect = new KubernetesConnector(\"openIDConnect\", KubernetesConnectorArgs.builder()\n            .identifier(\"%[1]s\")\n            .name(\"%[2]s\")\n            .description(\"description\")\n            .tags(\"foo:bar\")\n            .openidConnect(KubernetesConnectorOpenidConnectArgs.builder()\n                .masterUrl(\"https://kubernetes.example.com\")\n                .issuerUrl(\"https://oidc.example.com\")\n                .usernameRef(\"account.TEST_k8s_client_test\")\n                .clientIdRef(\"account.TEST_k8s_client_test\")\n                .passwordRef(\"account.TEST_k8s_client_test\")\n                .secretRef(\"account.TEST_k8s_client_test\")\n                .scopes(                \n                    \"scope1\",\n                    \"scope2\")\n                .build())\n            .delegateSelectors(\"harness-delegate\")\n            .build());\n\n        var inheritFromDelegate = new KubernetesConnector(\"inheritFromDelegate\", KubernetesConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"description\")\n            .tags(\"foo:bar\")\n            .inheritFromDelegate(KubernetesConnectorInheritFromDelegateArgs.builder()\n                .delegateSelectors(\"harness-delegate\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  clientKeyCert:\n    type: harness:platform:KubernetesConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: description\n      tags:\n        - foo:bar\n      clientKeyCert:\n        masterUrl: https://kubernetes.example.com\n        caCertRef: account.TEST_k8ss_client_stuff\n        clientCertRef: account.test_k8s_client_cert\n        clientKeyRef: account.TEST_k8s_client_key\n        clientKeyPassphraseRef: account.TEST_k8s_client_test\n        clientKeyAlgorithm: RSA\n      delegateSelectors:\n        - harness-delegate\n  usernamePassword:\n    type: harness:platform:KubernetesConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: description\n      tags:\n        - foo:bar\n      usernamePassword:\n        masterUrl: https://kubernetes.example.com\n        username: admin\n        passwordRef: account.TEST_k8s_client_test\n      delegateSelectors:\n        - harness-delegate\n  serviceAccount:\n    type: harness:platform:KubernetesConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: description\n      tags:\n        - foo:bar\n      serviceAccount:\n        masterUrl: https://kubernetes.example.com\n        serviceAccountTokenRef: account.TEST_k8s_client_test\n      delegateSelectors:\n        - harness-delegate\n  openIDConnect:\n    type: harness:platform:KubernetesConnector\n    properties:\n      identifier: '%[1]s'\n      name: '%[2]s'\n      description: description\n      tags:\n        - foo:bar\n      openidConnect:\n        masterUrl: https://kubernetes.example.com\n        issuerUrl: https://oidc.example.com\n        usernameRef: account.TEST_k8s_client_test\n        clientIdRef: account.TEST_k8s_client_test\n        passwordRef: account.TEST_k8s_client_test\n        secretRef: account.TEST_k8s_client_test\n        scopes:\n          - scope1\n          - scope2\n      delegateSelectors:\n        - harness-delegate\n  inheritFromDelegate:\n    type: harness:platform:KubernetesConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: description\n      tags:\n        - foo:bar\n      inheritFromDelegate:\n        delegateSelectors:\n          - harness-delegate\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level kubernetes connector \n\n```sh\n$ pulumi import harness:platform/kubernetesConnector:KubernetesConnector example \u003cconnector_id\u003e\n```\n\nImport org level kubernetes connector \n\n```sh\n$ pulumi import harness:platform/kubernetesConnector:KubernetesConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level kubernetes connector \n\n```sh\n$ pulumi import harness:platform/kubernetesConnector:KubernetesConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "clientKeyCert": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorClientKeyCert:KubernetesConnectorClientKeyCert",
                    "description": "Client key and certificate config for the connector.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Selectors to use for the delegate.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "inheritFromDelegate": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorInheritFromDelegate:KubernetesConnectorInheritFromDelegate",
                    "description": "Credentials are inherited from the delegate.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "openidConnect": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorOpenidConnect:KubernetesConnectorOpenidConnect",
                    "description": "OpenID configuration for the connector.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceAccount": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorServiceAccount:KubernetesConnectorServiceAccount",
                    "description": "Service account for the connector.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorUsernamePassword:KubernetesConnectorUsernamePassword",
                    "description": "Username and password for the connector.\n"
                }
            },
            "required": [
                "identifier",
                "name"
            ],
            "inputProperties": {
                "clientKeyCert": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorClientKeyCert:KubernetesConnectorClientKeyCert",
                    "description": "Client key and certificate config for the connector.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Selectors to use for the delegate.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "inheritFromDelegate": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorInheritFromDelegate:KubernetesConnectorInheritFromDelegate",
                    "description": "Credentials are inherited from the delegate.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "openidConnect": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorOpenidConnect:KubernetesConnectorOpenidConnect",
                    "description": "OpenID configuration for the connector.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceAccount": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorServiceAccount:KubernetesConnectorServiceAccount",
                    "description": "Service account for the connector.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "usernamePassword": {
                    "$ref": "#/types/harness:platform/KubernetesConnectorUsernamePassword:KubernetesConnectorUsernamePassword",
                    "description": "Username and password for the connector.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesConnector resources.\n",
                "properties": {
                    "clientKeyCert": {
                        "$ref": "#/types/harness:platform/KubernetesConnectorClientKeyCert:KubernetesConnectorClientKeyCert",
                        "description": "Client key and certificate config for the connector.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Selectors to use for the delegate.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "inheritFromDelegate": {
                        "$ref": "#/types/harness:platform/KubernetesConnectorInheritFromDelegate:KubernetesConnectorInheritFromDelegate",
                        "description": "Credentials are inherited from the delegate.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "openidConnect": {
                        "$ref": "#/types/harness:platform/KubernetesConnectorOpenidConnect:KubernetesConnectorOpenidConnect",
                        "description": "OpenID configuration for the connector.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "serviceAccount": {
                        "$ref": "#/types/harness:platform/KubernetesConnectorServiceAccount:KubernetesConnectorServiceAccount",
                        "description": "Service account for the connector.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "usernamePassword": {
                        "$ref": "#/types/harness:platform/KubernetesConnectorUsernamePassword:KubernetesConnectorUsernamePassword",
                        "description": "Username and password for the connector.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/manualFreeze:ManualFreeze": {
            "description": "Resource for Manual Deployment Freeze Window.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.ManualFreeze(\"example\", {\n    identifier: \"identifier\",\n    orgId: \"orgIdentifier\",\n    projectId: \"projectIdentifier\",\n    accountId: \"accountIdentifier\",\n    yaml: `freeze:\n  name: freezeName\n  identifier: identifier\n  entityConfigs:\n    - name: r1\n      entities:\n        - filterType: All\n          type: Org\n        - filterType: All\n          type: Project\n        - filterType: All\n          type: Service\n        - filterType: All\n          type: EnvType\n  status: Disabled\n  description: hi\n  windows:\n  - timeZone: Asia/Calcutta\n    startTime: 2023-05-03 04:16 PM\n    duration: 30m\n    recurrence:\n      type: Daily\n  notificationRules: []\n  tags: {}\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.ManualFreeze(\"example\",\n    identifier=\"identifier\",\n    org_id=\"orgIdentifier\",\n    project_id=\"projectIdentifier\",\n    account_id=\"accountIdentifier\",\n    yaml=\"\"\"freeze:\n  name: freezeName\n  identifier: identifier\n  entityConfigs:\n    - name: r1\n      entities:\n        - filterType: All\n          type: Org\n        - filterType: All\n          type: Project\n        - filterType: All\n          type: Service\n        - filterType: All\n          type: EnvType\n  status: Disabled\n  description: hi\n  windows:\n  - timeZone: Asia/Calcutta\n    startTime: 2023-05-03 04:16 PM\n    duration: 30m\n    recurrence:\n      type: Daily\n  notificationRules: []\n  tags: {}\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.ManualFreeze(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"orgIdentifier\",\n        ProjectId = \"projectIdentifier\",\n        AccountId = \"accountIdentifier\",\n        Yaml = @\"freeze:\n  name: freezeName\n  identifier: identifier\n  entityConfigs:\n    - name: r1\n      entities:\n        - filterType: All\n          type: Org\n        - filterType: All\n          type: Project\n        - filterType: All\n          type: Service\n        - filterType: All\n          type: EnvType\n  status: Disabled\n  description: hi\n  windows:\n  - timeZone: Asia/Calcutta\n    startTime: 2023-05-03 04:16 PM\n    duration: 30m\n    recurrence:\n      type: Daily\n  notificationRules: []\n  tags: {}\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewManualFreeze(ctx, \"example\", \u0026platform.ManualFreezeArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tOrgId:      pulumi.String(\"orgIdentifier\"),\n\t\t\tProjectId:  pulumi.String(\"projectIdentifier\"),\n\t\t\tAccountId:  pulumi.String(\"accountIdentifier\"),\n\t\t\tYaml: pulumi.String(`freeze:\n  name: freezeName\n  identifier: identifier\n  entityConfigs:\n    - name: r1\n      entities:\n        - filterType: All\n          type: Org\n        - filterType: All\n          type: Project\n        - filterType: All\n          type: Service\n        - filterType: All\n          type: EnvType\n  status: Disabled\n  description: hi\n  windows:\n  - timeZone: Asia/Calcutta\n    startTime: 2023-05-03 04:16 PM\n    duration: 30m\n    recurrence:\n      type: Daily\n  notificationRules: []\n  tags: {}\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ManualFreeze;\nimport com.pulumi.harness.platform.ManualFreezeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ManualFreeze(\"example\", ManualFreezeArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"orgIdentifier\")\n            .projectId(\"projectIdentifier\")\n            .accountId(\"accountIdentifier\")\n            .yaml(\"\"\"\nfreeze:\n  name: freezeName\n  identifier: identifier\n  entityConfigs:\n    - name: r1\n      entities:\n        - filterType: All\n          type: Org\n        - filterType: All\n          type: Project\n        - filterType: All\n          type: Service\n        - filterType: All\n          type: EnvType\n  status: Disabled\n  description: hi\n  windows:\n  - timeZone: Asia/Calcutta\n    startTime: 2023-05-03 04:16 PM\n    duration: 30m\n    recurrence:\n      type: Daily\n  notificationRules: []\n  tags: {}\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:ManualFreeze\n    properties:\n      identifier: identifier\n      orgId: orgIdentifier\n      projectId: projectIdentifier\n      accountId: accountIdentifier\n      yaml: |\n        freeze:\n          name: freezeName\n          identifier: identifier\n          entityConfigs:\n            - name: r1\n              entities:\n                - filterType: All\n                  type: Org\n                - filterType: All\n                  type: Project\n                - filterType: All\n                  type: Service\n                - filterType: All\n                  type: EnvType\n          status: Disabled\n          description: hi\n          windows:\n          - timeZone: Asia/Calcutta\n            startTime: 2023-05-03 04:16 PM\n            duration: 30m\n            recurrence:\n              type: Daily\n          notificationRules: []\n          tags: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport an account level freeze\n\n```sh\n$ pulumi import harness:platform/manualFreeze:ManualFreeze example \u003cfreeze_id\u003e\n```\n\nImport an organization level freeze\n\n```sh\n$ pulumi import harness:platform/manualFreeze:ManualFreeze example \u003corg_id\u003e/\u003cfreeze_id\u003e\n```\n\nImport project level freeze\n\n```sh\n$ pulumi import harness:platform/manualFreeze:ManualFreeze example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cfreeze_id\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier of the freeze\n"
                },
                "currentOrUpcomingWindows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ManualFreezeCurrentOrUpcomingWindow:ManualFreezeCurrentOrUpcomingWindow"
                    },
                    "description": "Current or upcoming windows\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the freeze\n"
                },
                "freezeWindows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ManualFreezeFreezeWindow:ManualFreezeFreezeWindow"
                    },
                    "description": "Freeze windows in the freeze response\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the freeze\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the freeze\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the freeze\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the freeze\n"
                },
                "scope": {
                    "type": "string",
                    "description": "Scope of the freeze\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the freeze\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags associated with the freeze\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of freeze\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Yaml of the freeze\n"
                }
            },
            "required": [
                "accountId",
                "currentOrUpcomingWindows",
                "description",
                "freezeWindows",
                "identifier",
                "name",
                "scope",
                "status",
                "tags",
                "type",
                "yaml"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier of the freeze\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the freeze\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the freeze\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the freeze\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Yaml of the freeze\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "identifier",
                "yaml"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManualFreeze resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier of the freeze\n"
                    },
                    "currentOrUpcomingWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/ManualFreezeCurrentOrUpcomingWindow:ManualFreezeCurrentOrUpcomingWindow"
                        },
                        "description": "Current or upcoming windows\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the freeze\n"
                    },
                    "freezeWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/ManualFreezeFreezeWindow:ManualFreezeFreezeWindow"
                        },
                        "description": "Freeze windows in the freeze response\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the freeze\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the freeze\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the freeze\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the freeze\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "Scope of the freeze\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the freeze\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags associated with the freeze\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of freeze\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Yaml of the freeze\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/monitoredService:MonitoredService": {
            "description": "Resource for creating a monitored service.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  example:\n    type: harness:platform:MonitoredService\n    properties:\n      accountId: account_id\n      orgId: default\n      projectId: default_project\n      identifier: Terraform\n      request:\n        name: name\n        type: Application\n        description: description\n        serviceRef: service_ref\n        environmentRef: environment_ref\n        tags:\n          - foo:bar\n          - bar:foo\n        healthSources:\n          - name: name\n            identifier: identifier\n            type: ElasticSearch\n            spec:\n              fn::toJSON:\n                connectorRef: connectorRef\n                feature: feature\n                queries:\n                  - name: name\n                    query: query\n                    index: index\n                    serviceInstanceIdentifier: serviceInstanceIdentifier\n                    timeStampIdentifier: timeStampIdentifier\n                    timeStampFormat: timeStampFormat\n                    messageIdentifier: messageIdentifier\n                  - name: name2\n                    query: query2\n                    index: index2\n                    serviceInstanceIdentifier: serviceInstanceIdentifier2\n                    timeStampIdentifier: timeStampIdentifier2\n                    timeStampFormat: timeStampFormat2\n                    messageIdentifier: messageIdentifier2\n        changeSources:\n          - name: csName1\n            identifier: harness_cd_next_gen\n            type: HarnessCDNextGen\n            enabled: true\n            spec:\n              fn::toJSON: {}\n            category: Deployment\n        notificationRuleRefs:\n          - notificationRuleRef: notification_rule_ref\n            enabled: true\n          - notificationRuleRef: notification_rule_ref1\n            enabled: false\n        enabled: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level monitored_service\n\n```sh\n$ pulumi import harness:platform/monitoredService:MonitoredService example \u003cmonitored_service_id\u003e\n```\n\nImport organization level monitored_service\n\n```sh\n$ pulumi import harness:platform/monitoredService:MonitoredService example \u003corg_id\u003e/\u003cmonitored_service_id\u003e\n```\n\nImport project level monitored_service\n\n```sh\n$ pulumi import harness:platform/monitoredService:MonitoredService example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cmonitored_service_id\u003e\n```\n\n",
            "properties": {
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the monitored service.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Identifier of the organization in which the monitored service is configured.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Identifier of the project in which the monitored service is configured.\n"
                },
                "request": {
                    "$ref": "#/types/harness:platform/MonitoredServiceRequest:MonitoredServiceRequest",
                    "description": "Request for creating or updating a monitored service.\n"
                }
            },
            "required": [
                "identifier",
                "orgId",
                "projectId"
            ],
            "inputProperties": {
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the monitored service.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Identifier of the organization in which the monitored service is configured.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Identifier of the project in which the monitored service is configured.\n"
                },
                "request": {
                    "$ref": "#/types/harness:platform/MonitoredServiceRequest:MonitoredServiceRequest",
                    "description": "Request for creating or updating a monitored service.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "orgId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitoredService resources.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the monitored service.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Identifier of the organization in which the monitored service is configured.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Identifier of the project in which the monitored service is configured.\n"
                    },
                    "request": {
                        "$ref": "#/types/harness:platform/MonitoredServiceRequest:MonitoredServiceRequest",
                        "description": "Request for creating or updating a monitored service.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/newrelicConnector:NewrelicConnector": {
            "description": "Resource for creating a New Relic connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.platform.NewrelicConnector(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    url: \"https://newrelic.com/\",\n    delegateSelectors: [\"harness-delegate\"],\n    accountId: \"nr_account_id\",\n    apiKeyRef: \"account.secret_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.NewrelicConnector(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    url=\"https://newrelic.com/\",\n    delegate_selectors=[\"harness-delegate\"],\n    account_id=\"nr_account_id\",\n    api_key_ref=\"account.secret_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.NewrelicConnector(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://newrelic.com/\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        AccountId = \"nr_account_id\",\n        ApiKeyRef = \"account.secret_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewNewrelicConnector(ctx, \"test\", \u0026platform.NewrelicConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://newrelic.com/\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tAccountId: pulumi.String(\"nr_account_id\"),\n\t\t\tApiKeyRef: pulumi.String(\"account.secret_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.NewrelicConnector;\nimport com.pulumi.harness.platform.NewrelicConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new NewrelicConnector(\"test\", NewrelicConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .url(\"https://newrelic.com/\")\n            .delegateSelectors(\"harness-delegate\")\n            .accountId(\"nr_account_id\")\n            .apiKeyRef(\"account.secret_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:NewrelicConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      url: https://newrelic.com/\n      delegateSelectors:\n        - harness-delegate\n      accountId: nr_account_id\n      apiKeyRef: account.secret_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level newrelic connector \n\n```sh\n$ pulumi import harness:platform/newrelicConnector:NewrelicConnector example \u003cconnector_id\u003e\n```\n\nImport org level newrelic connector \n\n```sh\n$ pulumi import harness:platform/newrelicConnector:NewrelicConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level newrelic connector \n\n```sh\n$ pulumi import harness:platform/newrelicConnector:NewrelicConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account ID of the NewRelic account.\n"
                },
                "apiKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the api key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the NewRelic server.\n"
                }
            },
            "required": [
                "accountId",
                "apiKeyRef",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account ID of the NewRelic account.\n"
                },
                "apiKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the api key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the NewRelic server.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "apiKeyRef",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NewrelicConnector resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account ID of the NewRelic account.\n"
                    },
                    "apiKeyRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the api key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the NewRelic server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/nexusConnector:NexusConnector": {
            "description": "Resource for creating a Nexus connector.\n\n## Import\n\nImport account level nexus connector \n\n```sh\n$ pulumi import harness:platform/nexusConnector:NexusConnector example \u003cconnector_id\u003e\n```\n\nImport org level nexus connector \n\n```sh\n$ pulumi import harness:platform/nexusConnector:NexusConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level nexus connector \n\n```sh\n$ pulumi import harness:platform/nexusConnector:NexusConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/NexusConnectorCredentials:NexusConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Nexus server.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the Nexus server. Valid values are 2.x, 3.x\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "url",
                "version"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/NexusConnectorCredentials:NexusConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Nexus server.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the Nexus server. Valid values are 2.x, 3.x\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "url",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NexusConnector resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/NexusConnectorCredentials:NexusConnectorCredentials",
                        "description": "Credentials to use for authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Nexus server.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the Nexus server. Valid values are 2.x, 3.x\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/ociHelmConnector:OciHelmConnector": {
            "description": "Resource for creating a OCI Helm connector.\n\n## Import\n\nImport account level helm connector \n\n```sh\n$ pulumi import harness:platform/ociHelmConnector:OciHelmConnector example \u003cconnector_id\u003e\n```\n\nImport org level helm connector \n\n```sh\n$ pulumi import harness:platform/ociHelmConnector:OciHelmConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level helm connector \n\n```sh\n$ pulumi import harness:platform/ociHelmConnector:OciHelmConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/OciHelmConnectorCredentials:OciHelmConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the helm server.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/OciHelmConnectorCredentials:OciHelmConnectorCredentials",
                    "description": "Credentials to use for authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the helm server.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OciHelmConnector resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/OciHelmConnectorCredentials:OciHelmConnectorCredentials",
                        "description": "Credentials to use for authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the helm server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/organization:Organization": {
            "description": "Resource for creating a Harness organization.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst _this = new harness.platform.Organization(\"this\", {\n    identifier: \"MyOrg\",\n    name: \"My Otganization\",\n    description: \"An example organization\",\n    tags: [\n        \"foo:bar\",\n        \"baz:qux\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nthis = harness.platform.Organization(\"this\",\n    identifier=\"MyOrg\",\n    name=\"My Otganization\",\n    description=\"An example organization\",\n    tags=[\n        \"foo:bar\",\n        \"baz:qux\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Harness.Platform.Organization(\"this\", new()\n    {\n        Identifier = \"MyOrg\",\n        Name = \"My Otganization\",\n        Description = \"An example organization\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n            \"baz:qux\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewOrganization(ctx, \"this\", \u0026platform.OrganizationArgs{\n\t\t\tIdentifier:  pulumi.String(\"MyOrg\"),\n\t\t\tName:        pulumi.String(\"My Otganization\"),\n\t\t\tDescription: pulumi.String(\"An example organization\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t\tpulumi.String(\"baz:qux\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Organization;\nimport com.pulumi.harness.platform.OrganizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new Organization(\"this\", OrganizationArgs.builder()\n            .identifier(\"MyOrg\")\n            .name(\"My Otganization\")\n            .description(\"An example organization\")\n            .tags(            \n                \"foo:bar\",\n                \"baz:qux\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: harness:platform:Organization\n    properties:\n      identifier: MyOrg\n      name: My Otganization\n      description: An example organization\n      tags:\n        - foo:bar\n        - baz:qux\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using organization id\n\n```sh\n$ pulumi import harness:platform/organization:Organization example \u003corganization_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "identifier",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Organization resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/pagerdutyConnector:PagerdutyConnector": {
            "description": "Resource for creating a PagerDuty connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.platform.PagerdutyConnector(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    delegateSelectors: [\"harness-delegate\"],\n    apiTokenRef: \"account.secret_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.PagerdutyConnector(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    delegate_selectors=[\"harness-delegate\"],\n    api_token_ref=\"account.secret_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.PagerdutyConnector(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        ApiTokenRef = \"account.secret_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewPagerdutyConnector(ctx, \"test\", \u0026platform.PagerdutyConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tApiTokenRef: pulumi.String(\"account.secret_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PagerdutyConnector;\nimport com.pulumi.harness.platform.PagerdutyConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new PagerdutyConnector(\"test\", PagerdutyConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .delegateSelectors(\"harness-delegate\")\n            .apiTokenRef(\"account.secret_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:PagerdutyConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      delegateSelectors:\n        - harness-delegate\n      apiTokenRef: account.secret_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level pagerduty connector \n\n```sh\n$ pulumi import harness:platform/pagerdutyConnector:PagerdutyConnector example \u003cconnector_id\u003e\n```\n\nImport org level pagerduty connector \n\n```sh\n$ pulumi import harness:platform/pagerdutyConnector:PagerdutyConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level pagerduty connector \n\n```sh\n$ pulumi import harness:platform/pagerdutyConnector:PagerdutyConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "apiTokenRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "apiTokenRef",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "apiTokenRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "apiTokenRef",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PagerdutyConnector resources.\n",
                "properties": {
                    "apiTokenRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/pipeline:Pipeline": {
            "description": "Resource for creating a Harness pipeline.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.Pipeline(\"example\", {\n    identifier: \"identifier\",\n    orgId: \"orgIdentifier\",\n    projectId: \"projectIdentifier\",\n    name: \"name\",\n    gitDetails: {\n        branchName: \"branchName\",\n        commitMessage: \"commitMessage\",\n        filePath: \"filePath\",\n        connectorRef: \"connectorRef\",\n        storeType: \"REMOTE\",\n        repoName: \"repoName\",\n    },\n    yaml: `pipeline:\n    name: name\n    identifier: identifier\n    allowStageExecutions: false\n    projectIdentifier: projectIdentifier\n    orgIdentifier: orgIdentifier\n    tags: {}\n    stages:\n        - stage:\n            name: dep\n            identifier: dep\n            description: \"\"\n            type: Deployment\n            spec:\n                serviceConfig:\n                    serviceRef: service\n                    serviceDefinition:\n                        type: Kubernetes\n                        spec:\n                            variables: []\n                infrastructure:\n                    environmentRef: testenv\n                    infrastructureDefinition:\n                        type: KubernetesDirect\n                        spec:\n                            connectorRef: testconf\n                            namespace: test\n                            releaseName: release-\u003c+INFRA_KEY\u003e\n                    allowSimultaneousDeployments: false\n                execution:\n                    steps:\n                        - stepGroup:\n                                name: Canary Deployment\n                                identifier: canaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Canary Deployment\n                                        identifier: canaryDeployment\n                                        type: K8sCanaryDeploy\n                                        timeout: 10m\n                                        spec:\n                                            instanceSelection:\n                                                type: Count\n                                                spec:\n                                                    count: 1\n                                            skipDryRun: false\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: canaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                                rollbackSteps:\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: rollbackCanaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                        - stepGroup:\n                                name: Primary Deployment\n                                identifier: primaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Rolling Deployment\n                                        identifier: rollingDeployment\n                                        type: K8sRollingDeploy\n                                        timeout: 10m\n                                        spec:\n                                            skipDryRun: false\n                                rollbackSteps:\n                                    - step:\n                                        name: Rolling Rollback\n                                        identifier: rollingRollback\n                                        type: K8sRollingRollback\n                                        timeout: 10m\n                                        spec: {}\n                    rollbackSteps: []\n            tags: {}\n            failureStrategies:\n                - onFailure:\n                        errors:\n                            - AllErrors\n                        action:\n                            type: StageRollback\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.Pipeline(\"example\",\n    identifier=\"identifier\",\n    org_id=\"orgIdentifier\",\n    project_id=\"projectIdentifier\",\n    name=\"name\",\n    git_details=harness.platform.PipelineGitDetailsArgs(\n        branch_name=\"branchName\",\n        commit_message=\"commitMessage\",\n        file_path=\"filePath\",\n        connector_ref=\"connectorRef\",\n        store_type=\"REMOTE\",\n        repo_name=\"repoName\",\n    ),\n    yaml=\"\"\"pipeline:\n    name: name\n    identifier: identifier\n    allowStageExecutions: false\n    projectIdentifier: projectIdentifier\n    orgIdentifier: orgIdentifier\n    tags: {}\n    stages:\n        - stage:\n            name: dep\n            identifier: dep\n            description: \"\"\n            type: Deployment\n            spec:\n                serviceConfig:\n                    serviceRef: service\n                    serviceDefinition:\n                        type: Kubernetes\n                        spec:\n                            variables: []\n                infrastructure:\n                    environmentRef: testenv\n                    infrastructureDefinition:\n                        type: KubernetesDirect\n                        spec:\n                            connectorRef: testconf\n                            namespace: test\n                            releaseName: release-\u003c+INFRA_KEY\u003e\n                    allowSimultaneousDeployments: false\n                execution:\n                    steps:\n                        - stepGroup:\n                                name: Canary Deployment\n                                identifier: canaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Canary Deployment\n                                        identifier: canaryDeployment\n                                        type: K8sCanaryDeploy\n                                        timeout: 10m\n                                        spec:\n                                            instanceSelection:\n                                                type: Count\n                                                spec:\n                                                    count: 1\n                                            skipDryRun: false\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: canaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                                rollbackSteps:\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: rollbackCanaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                        - stepGroup:\n                                name: Primary Deployment\n                                identifier: primaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Rolling Deployment\n                                        identifier: rollingDeployment\n                                        type: K8sRollingDeploy\n                                        timeout: 10m\n                                        spec:\n                                            skipDryRun: false\n                                rollbackSteps:\n                                    - step:\n                                        name: Rolling Rollback\n                                        identifier: rollingRollback\n                                        type: K8sRollingRollback\n                                        timeout: 10m\n                                        spec: {}\n                    rollbackSteps: []\n            tags: {}\n            failureStrategies:\n                - onFailure:\n                        errors:\n                            - AllErrors\n                        action:\n                            type: StageRollback\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.Pipeline(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"orgIdentifier\",\n        ProjectId = \"projectIdentifier\",\n        Name = \"name\",\n        GitDetails = new Harness.Platform.Inputs.PipelineGitDetailsArgs\n        {\n            BranchName = \"branchName\",\n            CommitMessage = \"commitMessage\",\n            FilePath = \"filePath\",\n            ConnectorRef = \"connectorRef\",\n            StoreType = \"REMOTE\",\n            RepoName = \"repoName\",\n        },\n        Yaml = @\"pipeline:\n    name: name\n    identifier: identifier\n    allowStageExecutions: false\n    projectIdentifier: projectIdentifier\n    orgIdentifier: orgIdentifier\n    tags: {}\n    stages:\n        - stage:\n            name: dep\n            identifier: dep\n            description: \"\"\"\"\n            type: Deployment\n            spec:\n                serviceConfig:\n                    serviceRef: service\n                    serviceDefinition:\n                        type: Kubernetes\n                        spec:\n                            variables: []\n                infrastructure:\n                    environmentRef: testenv\n                    infrastructureDefinition:\n                        type: KubernetesDirect\n                        spec:\n                            connectorRef: testconf\n                            namespace: test\n                            releaseName: release-\u003c+INFRA_KEY\u003e\n                    allowSimultaneousDeployments: false\n                execution:\n                    steps:\n                        - stepGroup:\n                                name: Canary Deployment\n                                identifier: canaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Canary Deployment\n                                        identifier: canaryDeployment\n                                        type: K8sCanaryDeploy\n                                        timeout: 10m\n                                        spec:\n                                            instanceSelection:\n                                                type: Count\n                                                spec:\n                                                    count: 1\n                                            skipDryRun: false\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: canaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                                rollbackSteps:\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: rollbackCanaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                        - stepGroup:\n                                name: Primary Deployment\n                                identifier: primaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Rolling Deployment\n                                        identifier: rollingDeployment\n                                        type: K8sRollingDeploy\n                                        timeout: 10m\n                                        spec:\n                                            skipDryRun: false\n                                rollbackSteps:\n                                    - step:\n                                        name: Rolling Rollback\n                                        identifier: rollingRollback\n                                        type: K8sRollingRollback\n                                        timeout: 10m\n                                        spec: {}\n                    rollbackSteps: []\n            tags: {}\n            failureStrategies:\n                - onFailure:\n                        errors:\n                            - AllErrors\n                        action:\n                            type: StageRollback\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewPipeline(ctx, \"example\", \u0026platform.PipelineArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tOrgId:      pulumi.String(\"orgIdentifier\"),\n\t\t\tProjectId:  pulumi.String(\"projectIdentifier\"),\n\t\t\tName:       pulumi.String(\"name\"),\n\t\t\tGitDetails: \u0026platform.PipelineGitDetailsArgs{\n\t\t\t\tBranchName:    pulumi.String(\"branchName\"),\n\t\t\t\tCommitMessage: pulumi.String(\"commitMessage\"),\n\t\t\t\tFilePath:      pulumi.String(\"filePath\"),\n\t\t\t\tConnectorRef:  pulumi.String(\"connectorRef\"),\n\t\t\t\tStoreType:     pulumi.String(\"REMOTE\"),\n\t\t\t\tRepoName:      pulumi.String(\"repoName\"),\n\t\t\t},\n\t\t\tYaml: pulumi.String(`pipeline:\n    name: name\n    identifier: identifier\n    allowStageExecutions: false\n    projectIdentifier: projectIdentifier\n    orgIdentifier: orgIdentifier\n    tags: {}\n    stages:\n        - stage:\n            name: dep\n            identifier: dep\n            description: \"\"\n            type: Deployment\n            spec:\n                serviceConfig:\n                    serviceRef: service\n                    serviceDefinition:\n                        type: Kubernetes\n                        spec:\n                            variables: []\n                infrastructure:\n                    environmentRef: testenv\n                    infrastructureDefinition:\n                        type: KubernetesDirect\n                        spec:\n                            connectorRef: testconf\n                            namespace: test\n                            releaseName: release-\u003c+INFRA_KEY\u003e\n                    allowSimultaneousDeployments: false\n                execution:\n                    steps:\n                        - stepGroup:\n                                name: Canary Deployment\n                                identifier: canaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Canary Deployment\n                                        identifier: canaryDeployment\n                                        type: K8sCanaryDeploy\n                                        timeout: 10m\n                                        spec:\n                                            instanceSelection:\n                                                type: Count\n                                                spec:\n                                                    count: 1\n                                            skipDryRun: false\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: canaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                                rollbackSteps:\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: rollbackCanaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                        - stepGroup:\n                                name: Primary Deployment\n                                identifier: primaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Rolling Deployment\n                                        identifier: rollingDeployment\n                                        type: K8sRollingDeploy\n                                        timeout: 10m\n                                        spec:\n                                            skipDryRun: false\n                                rollbackSteps:\n                                    - step:\n                                        name: Rolling Rollback\n                                        identifier: rollingRollback\n                                        type: K8sRollingRollback\n                                        timeout: 10m\n                                        spec: {}\n                    rollbackSteps: []\n            tags: {}\n            failureStrategies:\n                - onFailure:\n                        errors:\n                            - AllErrors\n                        action:\n                            type: StageRollback\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Pipeline;\nimport com.pulumi.harness.platform.PipelineArgs;\nimport com.pulumi.harness.platform.inputs.PipelineGitDetailsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Pipeline(\"example\", PipelineArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"orgIdentifier\")\n            .projectId(\"projectIdentifier\")\n            .name(\"name\")\n            .gitDetails(PipelineGitDetailsArgs.builder()\n                .branchName(\"branchName\")\n                .commitMessage(\"commitMessage\")\n                .filePath(\"filePath\")\n                .connectorRef(\"connectorRef\")\n                .storeType(\"REMOTE\")\n                .repoName(\"repoName\")\n                .build())\n            .yaml(\"\"\"\npipeline:\n    name: name\n    identifier: identifier\n    allowStageExecutions: false\n    projectIdentifier: projectIdentifier\n    orgIdentifier: orgIdentifier\n    tags: {}\n    stages:\n        - stage:\n            name: dep\n            identifier: dep\n            description: \"\"\n            type: Deployment\n            spec:\n                serviceConfig:\n                    serviceRef: service\n                    serviceDefinition:\n                        type: Kubernetes\n                        spec:\n                            variables: []\n                infrastructure:\n                    environmentRef: testenv\n                    infrastructureDefinition:\n                        type: KubernetesDirect\n                        spec:\n                            connectorRef: testconf\n                            namespace: test\n                            releaseName: release-\u003c+INFRA_KEY\u003e\n                    allowSimultaneousDeployments: false\n                execution:\n                    steps:\n                        - stepGroup:\n                                name: Canary Deployment\n                                identifier: canaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Canary Deployment\n                                        identifier: canaryDeployment\n                                        type: K8sCanaryDeploy\n                                        timeout: 10m\n                                        spec:\n                                            instanceSelection:\n                                                type: Count\n                                                spec:\n                                                    count: 1\n                                            skipDryRun: false\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: canaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                                rollbackSteps:\n                                    - step:\n                                        name: Canary Delete\n                                        identifier: rollbackCanaryDelete\n                                        type: K8sCanaryDelete\n                                        timeout: 10m\n                                        spec: {}\n                        - stepGroup:\n                                name: Primary Deployment\n                                identifier: primaryDepoyment\n                                steps:\n                                    - step:\n                                        name: Rolling Deployment\n                                        identifier: rollingDeployment\n                                        type: K8sRollingDeploy\n                                        timeout: 10m\n                                        spec:\n                                            skipDryRun: false\n                                rollbackSteps:\n                                    - step:\n                                        name: Rolling Rollback\n                                        identifier: rollingRollback\n                                        type: K8sRollingRollback\n                                        timeout: 10m\n                                        spec: {}\n                    rollbackSteps: []\n            tags: {}\n            failureStrategies:\n                - onFailure:\n                        errors:\n                            - AllErrors\n                        action:\n                            type: StageRollback\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:Pipeline\n    properties:\n      identifier: identifier\n      orgId: orgIdentifier\n      projectId: projectIdentifier\n      name: name\n      gitDetails:\n        branchName: branchName\n        commitMessage: commitMessage\n        filePath: filePath\n        connectorRef: connectorRef\n        storeType: REMOTE\n        repoName: repoName\n      yaml: |\n        pipeline:\n            name: name\n            identifier: identifier\n            allowStageExecutions: false\n            projectIdentifier: projectIdentifier\n            orgIdentifier: orgIdentifier\n            tags: {}\n            stages:\n                - stage:\n                    name: dep\n                    identifier: dep\n                    description: \"\"\n                    type: Deployment\n                    spec:\n                        serviceConfig:\n                            serviceRef: service\n                            serviceDefinition:\n                                type: Kubernetes\n                                spec:\n                                    variables: []\n                        infrastructure:\n                            environmentRef: testenv\n                            infrastructureDefinition:\n                                type: KubernetesDirect\n                                spec:\n                                    connectorRef: testconf\n                                    namespace: test\n                                    releaseName: release-\u003c+INFRA_KEY\u003e\n                            allowSimultaneousDeployments: false\n                        execution:\n                            steps:\n                                - stepGroup:\n                                        name: Canary Deployment\n                                        identifier: canaryDepoyment\n                                        steps:\n                                            - step:\n                                                name: Canary Deployment\n                                                identifier: canaryDeployment\n                                                type: K8sCanaryDeploy\n                                                timeout: 10m\n                                                spec:\n                                                    instanceSelection:\n                                                        type: Count\n                                                        spec:\n                                                            count: 1\n                                                    skipDryRun: false\n                                            - step:\n                                                name: Canary Delete\n                                                identifier: canaryDelete\n                                                type: K8sCanaryDelete\n                                                timeout: 10m\n                                                spec: {}\n                                        rollbackSteps:\n                                            - step:\n                                                name: Canary Delete\n                                                identifier: rollbackCanaryDelete\n                                                type: K8sCanaryDelete\n                                                timeout: 10m\n                                                spec: {}\n                                - stepGroup:\n                                        name: Primary Deployment\n                                        identifier: primaryDepoyment\n                                        steps:\n                                            - step:\n                                                name: Rolling Deployment\n                                                identifier: rollingDeployment\n                                                type: K8sRollingDeploy\n                                                timeout: 10m\n                                                spec:\n                                                    skipDryRun: false\n                                        rollbackSteps:\n                                            - step:\n                                                name: Rolling Rollback\n                                                identifier: rollingRollback\n                                                type: K8sRollingRollback\n                                                timeout: 10m\n                                                spec: {}\n                            rollbackSteps: []\n                    tags: {}\n                    failureStrategies:\n                        - onFailure:\n                                errors:\n                                    - AllErrors\n                                action:\n                                    type: StageRollback\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport pipeline\n\n```sh\n$ pulumi import harness:platform/pipeline:Pipeline example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cpipeline_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "gitDetails": {
                    "$ref": "#/types/harness:platform/PipelineGitDetails:PipelineGitDetails",
                    "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "templateApplied": {
                    "type": "boolean",
                    "description": "If true, returns Pipeline YAML with Templates applied on it.\n"
                },
                "templateAppliedPipelineYaml": {
                    "type": "string",
                    "description": "Pipeline YAML after resolving Templates (returned as a String).\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "YAML of the pipeline. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "orgId",
                "projectId",
                "yaml"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "gitDetails": {
                    "$ref": "#/types/harness:platform/PipelineGitDetails:PipelineGitDetails",
                    "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "templateApplied": {
                    "type": "boolean",
                    "description": "If true, returns Pipeline YAML with Templates applied on it.\n"
                },
                "templateAppliedPipelineYaml": {
                    "type": "string",
                    "description": "Pipeline YAML after resolving Templates (returned as a String).\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "YAML of the pipeline. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "orgId",
                "projectId",
                "yaml"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pipeline resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/PipelineGitDetails:PipelineGitDetails",
                        "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "templateApplied": {
                        "type": "boolean",
                        "description": "If true, returns Pipeline YAML with Templates applied on it.\n"
                    },
                    "templateAppliedPipelineYaml": {
                        "type": "string",
                        "description": "Pipeline YAML after resolving Templates (returned as a String).\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "YAML of the pipeline. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/pipelineFilters:PipelineFilters": {
            "description": "Resource for creating Harness Pipeline Filters.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.platform.PipelineFilters(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    type: \"PipelineExecution\",\n    filterProperties: {\n        tags: [\"foo:bar\"],\n        filterType: \"PipelineExecution\",\n    },\n    filterVisibility: \"EveryOne\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.PipelineFilters(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    type=\"PipelineExecution\",\n    filter_properties=harness.platform.PipelineFiltersFilterPropertiesArgs(\n        tags=[\"foo:bar\"],\n        filter_type=\"PipelineExecution\",\n    ),\n    filter_visibility=\"EveryOne\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.PipelineFilters(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Type = \"PipelineExecution\",\n        FilterProperties = new Harness.Platform.Inputs.PipelineFiltersFilterPropertiesArgs\n        {\n            Tags = new[]\n            {\n                \"foo:bar\",\n            },\n            FilterType = \"PipelineExecution\",\n        },\n        FilterVisibility = \"EveryOne\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewPipelineFilters(ctx, \"test\", \u0026platform.PipelineFiltersArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tName:       pulumi.String(\"name\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tType:       pulumi.String(\"PipelineExecution\"),\n\t\t\tFilterProperties: \u0026platform.PipelineFiltersFilterPropertiesArgs{\n\t\t\t\tTags: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t\t},\n\t\t\t\tFilterType: pulumi.String(\"PipelineExecution\"),\n\t\t\t},\n\t\t\tFilterVisibility: pulumi.String(\"EveryOne\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PipelineFilters;\nimport com.pulumi.harness.platform.PipelineFiltersArgs;\nimport com.pulumi.harness.platform.inputs.PipelineFiltersFilterPropertiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new PipelineFilters(\"test\", PipelineFiltersArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .type(\"PipelineExecution\")\n            .filterProperties(PipelineFiltersFilterPropertiesArgs.builder()\n                .tags(\"foo:bar\")\n                .filterType(\"PipelineExecution\")\n                .build())\n            .filterVisibility(\"EveryOne\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:PipelineFilters\n    properties:\n      identifier: identifier\n      name: name\n      orgId: org_id\n      projectId: project_id\n      type: PipelineExecution\n      filterProperties:\n        tags:\n          - foo:bar\n        filterType: PipelineExecution\n      filterVisibility: EveryOne\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level pipeline filter\n\n```sh\n$ pulumi import harness:platform/pipelineFilters:PipelineFilters example \u003cfilter_id\u003e/\u003ctype\u003e\n```\n\nImport org level pipeline filter\n\n```sh\n$ pulumi import harness:platform/pipelineFilters:PipelineFilters example \u003cord_id\u003e/\u003cfilter_id\u003e/\u003ctype\u003e\n```\n\nImport project level pipeline filter\n\n```sh\n$ pulumi import harness:platform/pipelineFilters:PipelineFilters example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cfilter_id\u003e/\u003ctype\u003e\n```\n\n",
            "properties": {
                "filterProperties": {
                    "$ref": "#/types/harness:platform/PipelineFiltersFilterProperties:PipelineFiltersFilterProperties",
                    "description": "Properties of the filters entity defined in Harness.\n"
                },
                "filterVisibility": {
                    "type": "string",
                    "description": "This indicates visibility of filters. By default, everyone can view this filter.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the pipeline filters.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of pipeline filters. Currently supported types are {PipelineSetup, PipelineExecution, Deployment, Template, EnvironmentGroup, Environment}\n"
                }
            },
            "required": [
                "filterProperties",
                "identifier",
                "name",
                "type"
            ],
            "inputProperties": {
                "filterProperties": {
                    "$ref": "#/types/harness:platform/PipelineFiltersFilterProperties:PipelineFiltersFilterProperties",
                    "description": "Properties of the filters entity defined in Harness.\n"
                },
                "filterVisibility": {
                    "type": "string",
                    "description": "This indicates visibility of filters. By default, everyone can view this filter.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the pipeline filters.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of pipeline filters. Currently supported types are {PipelineSetup, PipelineExecution, Deployment, Template, EnvironmentGroup, Environment}\n"
                }
            },
            "requiredInputs": [
                "filterProperties",
                "identifier",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PipelineFilters resources.\n",
                "properties": {
                    "filterProperties": {
                        "$ref": "#/types/harness:platform/PipelineFiltersFilterProperties:PipelineFiltersFilterProperties",
                        "description": "Properties of the filters entity defined in Harness.\n"
                    },
                    "filterVisibility": {
                        "type": "string",
                        "description": "This indicates visibility of filters. By default, everyone can view this filter.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the pipeline filters.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of pipeline filters. Currently supported types are {PipelineSetup, PipelineExecution, Deployment, Template, EnvironmentGroup, Environment}\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/policy:Policy": {
            "description": "Resource for creating a Harness Policy.\n\n## Import\n\nImport using the organization id\n\n```sh\n$ pulumi import harness:platform/policy:Policy example \u003corganization_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "rego": {
                    "type": "string",
                    "description": "Rego code for the policy.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "rego"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "rego": {
                    "type": "string",
                    "description": "Rego code for the policy.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "rego"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Policy resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "rego": {
                        "type": "string",
                        "description": "Rego code for the policy.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/policySet:PolicySet": {
            "description": "Resource for creating a Harness Policyset.\n\n## Import\n\nImport using the organization id\n\n```sh\n$ pulumi import harness:platform/policySet:PolicySet example \u003corganization_id\u003e\n```\n\n",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action for the policyset.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled for the policyset.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/PolicySetPolicy:PolicySetPolicy"
                    },
                    "description": "List of policy identifiers / severity for the policyset.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type for the policyset.\n"
                }
            },
            "required": [
                "action",
                "identifier",
                "name",
                "type"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Action for the policyset.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled for the policyset.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/PolicySetPolicy:PolicySetPolicy"
                    },
                    "description": "List of policy identifiers / severity for the policyset.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type for the policyset.\n"
                }
            },
            "requiredInputs": [
                "action",
                "identifier",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicySet resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Action for the policyset.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled for the policyset.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/PolicySetPolicy:PolicySetPolicy"
                        },
                        "description": "List of policy identifiers / severity for the policyset.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type for the policyset.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/project:Project": {
            "description": "Resource for creating a Harness project.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.platform.Project(\"test\", {\n    identifier: \"testproject\",\n    name: \"Test Project\",\n    orgId: \"org_id\",\n    color: \"#0063F7\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.Project(\"test\",\n    identifier=\"testproject\",\n    name=\"Test Project\",\n    org_id=\"org_id\",\n    color=\"#0063F7\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.Project(\"test\", new()\n    {\n        Identifier = \"testproject\",\n        Name = \"Test Project\",\n        OrgId = \"org_id\",\n        Color = \"#0063F7\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewProject(ctx, \"test\", \u0026platform.ProjectArgs{\n\t\t\tIdentifier: pulumi.String(\"testproject\"),\n\t\t\tName:       pulumi.String(\"Test Project\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tColor:      pulumi.String(\"#0063F7\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Project;\nimport com.pulumi.harness.platform.ProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Project(\"test\", ProjectArgs.builder()\n            .identifier(\"testproject\")\n            .name(\"Test Project\")\n            .orgId(\"org_id\")\n            .color(\"#0063F7\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:Project\n    properties:\n      identifier: testproject\n      name: Test Project\n      orgId: org_id\n      color: '#0063F7'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the organization id and the project id\n\n```sh\n$ pulumi import harness:platform/project:Project example \u003corganization_id\u003e/\u003cproject_id\u003e\n```\n\n",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Color of the project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "modules": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Modules in the project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "color",
                "identifier",
                "modules",
                "name",
                "orgId"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "Color of the project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Color of the project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "modules": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Modules in the project.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/prometheusConnector:PrometheusConnector": {
            "description": "Resource for creating a Prometheus connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.PrometheusConnector(\"example\", {\n    identifier: \"idntifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    url: \"https://prometheus.com/\",\n    delegateSelectors: [\"harness-delegate\"],\n    userName: \"user_name\",\n    passwordRef: \"account.secret_identifier\",\n    headers: [{\n        encryptedValueRef: \"account.secret_identifier\",\n        valueEncrypted: true,\n        key: \"key\",\n        value: \"value\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.PrometheusConnector(\"example\",\n    identifier=\"idntifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    url=\"https://prometheus.com/\",\n    delegate_selectors=[\"harness-delegate\"],\n    user_name=\"user_name\",\n    password_ref=\"account.secret_identifier\",\n    headers=[harness.platform.PrometheusConnectorHeaderArgs(\n        encrypted_value_ref=\"account.secret_identifier\",\n        value_encrypted=True,\n        key=\"key\",\n        value=\"value\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.PrometheusConnector(\"example\", new()\n    {\n        Identifier = \"idntifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://prometheus.com/\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        UserName = \"user_name\",\n        PasswordRef = \"account.secret_identifier\",\n        Headers = new[]\n        {\n            new Harness.Platform.Inputs.PrometheusConnectorHeaderArgs\n            {\n                EncryptedValueRef = \"account.secret_identifier\",\n                ValueEncrypted = true,\n                Key = \"key\",\n                Value = \"value\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewPrometheusConnector(ctx, \"example\", \u0026platform.PrometheusConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"idntifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://prometheus.com/\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tUserName:    pulumi.String(\"user_name\"),\n\t\t\tPasswordRef: pulumi.String(\"account.secret_identifier\"),\n\t\t\tHeaders: platform.PrometheusConnectorHeaderArray{\n\t\t\t\t\u0026platform.PrometheusConnectorHeaderArgs{\n\t\t\t\t\tEncryptedValueRef: pulumi.String(\"account.secret_identifier\"),\n\t\t\t\t\tValueEncrypted:    pulumi.Bool(true),\n\t\t\t\t\tKey:               pulumi.String(\"key\"),\n\t\t\t\t\tValue:             pulumi.String(\"value\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PrometheusConnector;\nimport com.pulumi.harness.platform.PrometheusConnectorArgs;\nimport com.pulumi.harness.platform.inputs.PrometheusConnectorHeaderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new PrometheusConnector(\"example\", PrometheusConnectorArgs.builder()\n            .identifier(\"idntifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .url(\"https://prometheus.com/\")\n            .delegateSelectors(\"harness-delegate\")\n            .userName(\"user_name\")\n            .passwordRef(\"account.secret_identifier\")\n            .headers(PrometheusConnectorHeaderArgs.builder()\n                .encryptedValueRef(\"account.secret_identifier\")\n                .valueEncrypted(true)\n                .key(\"key\")\n                .value(\"value\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:PrometheusConnector\n    properties:\n      identifier: idntifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      url: https://prometheus.com/\n      delegateSelectors:\n        - harness-delegate\n      userName: user_name\n      passwordRef: account.secret_identifier\n      headers:\n        - encryptedValueRef: account.secret_identifier\n          valueEncrypted: true\n          key: key\n          value: value\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level prometheus connector \n\n```sh\n$ pulumi import harness:platform/prometheusConnector:PrometheusConnector example \u003cconnector_id\u003e\n```\n\nImport org level prometheus connector \n\n```sh\n$ pulumi import harness:platform/prometheusConnector:PrometheusConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level prometheus connector \n\n```sh\n$ pulumi import harness:platform/prometheusConnector:PrometheusConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/PrometheusConnectorHeader:PrometheusConnectorHeader"
                    },
                    "description": "Headers.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Prometheus server.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "User name.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/PrometheusConnectorHeader:PrometheusConnectorHeader"
                    },
                    "description": "Headers.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Prometheus server.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "User name.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrometheusConnector resources.\n",
                "properties": {
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "headers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/PrometheusConnectorHeader:PrometheusConnectorHeader"
                        },
                        "description": "Headers.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "passwordRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Prometheus server.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "User name.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/resourceGroup:ResourceGroup": {
            "description": "Resource for creating a Harness Resource Group\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.platform.ResourceGroup(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    accountId: \"account_id\",\n    allowedScopeLevels: [\"account\"],\n    includedScopes: [{\n        filter: \"EXCLUDING_CHILD_SCOPES\",\n        accountId: \"account_id\",\n    }],\n    resourceFilters: [{\n        includeAllResources: false,\n        resources: [{\n            resourceType: \"CONNECTOR\",\n            attributeFilters: [{\n                attributeName: \"category\",\n                attributeValues: [\"CLOUD_COST\"],\n            }],\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.ResourceGroup(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    account_id=\"account_id\",\n    allowed_scope_levels=[\"account\"],\n    included_scopes=[harness.platform.ResourceGroupIncludedScopeArgs(\n        filter=\"EXCLUDING_CHILD_SCOPES\",\n        account_id=\"account_id\",\n    )],\n    resource_filters=[harness.platform.ResourceGroupResourceFilterArgs(\n        include_all_resources=False,\n        resources=[harness.platform.ResourceGroupResourceFilterResourceArgs(\n            resource_type=\"CONNECTOR\",\n            attribute_filters=[harness.platform.ResourceGroupResourceFilterResourceAttributeFilterArgs(\n                attribute_name=\"category\",\n                attribute_values=[\"CLOUD_COST\"],\n            )],\n        )],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.ResourceGroup(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        AccountId = \"account_id\",\n        AllowedScopeLevels = new[]\n        {\n            \"account\",\n        },\n        IncludedScopes = new[]\n        {\n            new Harness.Platform.Inputs.ResourceGroupIncludedScopeArgs\n            {\n                Filter = \"EXCLUDING_CHILD_SCOPES\",\n                AccountId = \"account_id\",\n            },\n        },\n        ResourceFilters = new[]\n        {\n            new Harness.Platform.Inputs.ResourceGroupResourceFilterArgs\n            {\n                IncludeAllResources = false,\n                Resources = new[]\n                {\n                    new Harness.Platform.Inputs.ResourceGroupResourceFilterResourceArgs\n                    {\n                        ResourceType = \"CONNECTOR\",\n                        AttributeFilters = new[]\n                        {\n                            new Harness.Platform.Inputs.ResourceGroupResourceFilterResourceAttributeFilterArgs\n                            {\n                                AttributeName = \"category\",\n                                AttributeValues = new[]\n                                {\n                                    \"CLOUD_COST\",\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewResourceGroup(ctx, \"test\", \u0026platform.ResourceGroupArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tAccountId: pulumi.String(\"account_id\"),\n\t\t\tAllowedScopeLevels: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"account\"),\n\t\t\t},\n\t\t\tIncludedScopes: platform.ResourceGroupIncludedScopeArray{\n\t\t\t\t\u0026platform.ResourceGroupIncludedScopeArgs{\n\t\t\t\t\tFilter:    pulumi.String(\"EXCLUDING_CHILD_SCOPES\"),\n\t\t\t\t\tAccountId: pulumi.String(\"account_id\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tResourceFilters: platform.ResourceGroupResourceFilterArray{\n\t\t\t\t\u0026platform.ResourceGroupResourceFilterArgs{\n\t\t\t\t\tIncludeAllResources: pulumi.Bool(false),\n\t\t\t\t\tResources: platform.ResourceGroupResourceFilterResourceArray{\n\t\t\t\t\t\t\u0026platform.ResourceGroupResourceFilterResourceArgs{\n\t\t\t\t\t\t\tResourceType: pulumi.String(\"CONNECTOR\"),\n\t\t\t\t\t\t\tAttributeFilters: platform.ResourceGroupResourceFilterResourceAttributeFilterArray{\n\t\t\t\t\t\t\t\t\u0026platform.ResourceGroupResourceFilterResourceAttributeFilterArgs{\n\t\t\t\t\t\t\t\t\tAttributeName: pulumi.String(\"category\"),\n\t\t\t\t\t\t\t\t\tAttributeValues: pulumi.StringArray{\n\t\t\t\t\t\t\t\t\t\tpulumi.String(\"CLOUD_COST\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ResourceGroup;\nimport com.pulumi.harness.platform.ResourceGroupArgs;\nimport com.pulumi.harness.platform.inputs.ResourceGroupIncludedScopeArgs;\nimport com.pulumi.harness.platform.inputs.ResourceGroupResourceFilterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new ResourceGroup(\"test\", ResourceGroupArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .accountId(\"account_id\")\n            .allowedScopeLevels(\"account\")\n            .includedScopes(ResourceGroupIncludedScopeArgs.builder()\n                .filter(\"EXCLUDING_CHILD_SCOPES\")\n                .accountId(\"account_id\")\n                .build())\n            .resourceFilters(ResourceGroupResourceFilterArgs.builder()\n                .includeAllResources(false)\n                .resources(ResourceGroupResourceFilterResourceArgs.builder()\n                    .resourceType(\"CONNECTOR\")\n                    .attributeFilters(ResourceGroupResourceFilterResourceAttributeFilterArgs.builder()\n                        .attributeName(\"category\")\n                        .attributeValues(\"CLOUD_COST\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:ResourceGroup\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      accountId: account_id\n      allowedScopeLevels:\n        - account\n      includedScopes:\n        - filter: EXCLUDING_CHILD_SCOPES\n          accountId: account_id\n      resourceFilters:\n        - includeAllResources: false\n          resources:\n            - resourceType: CONNECTOR\n              attributeFilters:\n                - attributeName: category\n                  attributeValues:\n                    - CLOUD_COST\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level resource group\n\n```sh\n$ pulumi import harness:platform/resourceGroup:ResourceGroup example \u003cresource_group_id\u003e\n```\n\nImport org level resource group\n\n```sh\n$ pulumi import harness:platform/resourceGroup:ResourceGroup example \u003cord_id\u003e/\u003cresource_group_id\u003e\n```\n\nImport project level resource group\n\n```sh\n$ pulumi import harness:platform/resourceGroup:ResourceGroup example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cresource_group_id\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier of the account\n"
                },
                "allowedScopeLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scope levels at which this resource group can be used\n"
                },
                "color": {
                    "type": "string",
                    "description": "Color of the environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "includedScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ResourceGroupIncludedScope:ResourceGroupIncludedScope"
                    },
                    "description": "Included scopes\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "resourceFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ResourceGroupResourceFilter:ResourceGroupResourceFilter"
                    },
                    "description": "Contains resource filter for a resource group\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "accountId",
                "allowedScopeLevels",
                "color",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier of the account\n"
                },
                "allowedScopeLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scope levels at which this resource group can be used\n"
                },
                "color": {
                    "type": "string",
                    "description": "Color of the environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "includedScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ResourceGroupIncludedScope:ResourceGroupIncludedScope"
                    },
                    "description": "Included scopes\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "resourceFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/ResourceGroupResourceFilter:ResourceGroupResourceFilter"
                    },
                    "description": "Contains resource filter for a resource group\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceGroup resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier of the account\n"
                    },
                    "allowedScopeLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The scope levels at which this resource group can be used\n"
                    },
                    "color": {
                        "type": "string",
                        "description": "Color of the environment.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "includedScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/ResourceGroupIncludedScope:ResourceGroupIncludedScope"
                        },
                        "description": "Included scopes\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "resourceFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/ResourceGroupResourceFilter:ResourceGroupResourceFilter"
                        },
                        "description": "Contains resource filter for a resource group\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/roleAssignments:RoleAssignments": {
            "description": "Resource for creating role assignments in Harness.\n\n## Import\n\nImport account level role assignments\n\n```sh\n$ pulumi import harness:platform/roleAssignments:RoleAssignments example \u003crole_assignments_id\u003e\n```\n\nImport org level role assignments\n\n```sh\n$ pulumi import harness:platform/roleAssignments:RoleAssignments example \u003cord_id\u003e/\u003crole_assignments_id\u003e\n```\n\nImport project level role assignments\n\n```sh\n$ pulumi import harness:platform/roleAssignments:RoleAssignments example \u003corg_id\u003e/\u003cproject_id\u003e/\u003crole_assignments_id\u003e\n```\n\n",
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "description": "Disabled or not.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier for role assignment.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Managed or not.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Org identifier.\n"
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/RoleAssignmentsPrincipal:RoleAssignmentsPrincipal"
                    },
                    "description": "Principal.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier\n"
                },
                "resourceGroupIdentifier": {
                    "type": "string",
                    "description": "Resource group identifier.\n"
                },
                "roleIdentifier": {
                    "type": "string",
                    "description": "Role identifier.\n"
                }
            },
            "required": [
                "identifier",
                "principals",
                "resourceGroupIdentifier",
                "roleIdentifier"
            ],
            "inputProperties": {
                "disabled": {
                    "type": "boolean",
                    "description": "Disabled or not.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier for role assignment.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Managed or not.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Org identifier.\n"
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/RoleAssignmentsPrincipal:RoleAssignmentsPrincipal"
                    },
                    "description": "Principal.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier\n"
                },
                "resourceGroupIdentifier": {
                    "type": "string",
                    "description": "Resource group identifier.\n"
                },
                "roleIdentifier": {
                    "type": "string",
                    "description": "Role identifier.\n"
                }
            },
            "requiredInputs": [
                "principals",
                "resourceGroupIdentifier",
                "roleIdentifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RoleAssignments resources.\n",
                "properties": {
                    "disabled": {
                        "type": "boolean",
                        "description": "Disabled or not.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier for role assignment.\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Managed or not.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Org identifier.\n"
                    },
                    "principals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/RoleAssignmentsPrincipal:RoleAssignmentsPrincipal"
                        },
                        "description": "Principal.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier\n"
                    },
                    "resourceGroupIdentifier": {
                        "type": "string",
                        "description": "Resource group identifier.\n"
                    },
                    "roleIdentifier": {
                        "type": "string",
                        "description": "Role identifier.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/roles:Roles": {
            "description": "Resource for creating roles.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.Roles(\"example\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    permissions: [\"core_resourcegroup_view\"],\n    allowedScopeLevels: [\"account\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.Roles(\"example\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    permissions=[\"core_resourcegroup_view\"],\n    allowed_scope_levels=[\"account\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.Roles(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Permissions = new[]\n        {\n            \"core_resourcegroup_view\",\n        },\n        AllowedScopeLevels = new[]\n        {\n            \"account\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewRoles(ctx, \"example\", \u0026platform.RolesArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tPermissions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"core_resourcegroup_view\"),\n\t\t\t},\n\t\t\tAllowedScopeLevels: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"account\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Roles;\nimport com.pulumi.harness.platform.RolesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Roles(\"example\", RolesArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .permissions(\"core_resourcegroup_view\")\n            .allowedScopeLevels(\"account\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:Roles\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      permissions:\n        - core_resourcegroup_view\n      allowedScopeLevels:\n        - account\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level roles\n\n```sh\n$ pulumi import harness:platform/roles:Roles example \u003croles_id\u003e\n```\n\nImport org level roles\n\n```sh\n$ pulumi import harness:platform/roles:Roles example \u003cord_id\u003e/\u003croles_id\u003e\n```\n\nImport project level roles\n\n```sh\n$ pulumi import harness:platform/roles:Roles example \u003corg_id\u003e/\u003cproject_id\u003e/\u003croles_id\u003e\n```\n\n",
            "properties": {
                "allowedScopeLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scope levels at which this role can be used\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the permission identifiers\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "allowedScopeLevels",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "allowedScopeLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scope levels at which this role can be used\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the permission identifiers\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Roles resources.\n",
                "properties": {
                    "allowedScopeLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The scope levels at which this role can be used\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the permission identifiers\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/secretFile:SecretFile": {
            "description": "Resource for creating a secret of type secret file in Harness.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.SecretFile(\"example\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    filePath: \"file_path\",\n    secretManagerIdentifier: \"harnessSecretManager\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.SecretFile(\"example\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    file_path=\"file_path\",\n    secret_manager_identifier=\"harnessSecretManager\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.SecretFile(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        FilePath = \"file_path\",\n        SecretManagerIdentifier = \"harnessSecretManager\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewSecretFile(ctx, \"example\", \u0026platform.SecretFileArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tFilePath:                pulumi.String(\"file_path\"),\n\t\t\tSecretManagerIdentifier: pulumi.String(\"harnessSecretManager\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.SecretFile;\nimport com.pulumi.harness.platform.SecretFileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new SecretFile(\"example\", SecretFileArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .filePath(\"file_path\")\n            .secretManagerIdentifier(\"harnessSecretManager\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:SecretFile\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      filePath: file_path\n      secretManagerIdentifier: harnessSecretManager\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level secret file\n\n```sh\n$ pulumi import harness:platform/secretFile:SecretFile example \u003csecret_file_id\u003e\n```\n\nImport org level secret file\n\n```sh\n$ pulumi import harness:platform/secretFile:SecretFile example \u003cord_id\u003e/\u003csecret_file_id\u003e\n```\n\nImport project level secret file\n\n```sh\n$ pulumi import harness:platform/secretFile:SecretFile example \u003corg_id\u003e/\u003cproject_id\u003e/\u003csecret_file_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "Path of the file containing secret value\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "secretManagerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the Secret Manager used to manage the secret.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "filePath",
                "identifier",
                "name",
                "secretManagerIdentifier"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "Path of the file containing secret value\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "secretManagerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the Secret Manager used to manage the secret.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "filePath",
                "identifier",
                "secretManagerIdentifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretFile resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "filePath": {
                        "type": "string",
                        "description": "Path of the file containing secret value\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "secretManagerIdentifier": {
                        "type": "string",
                        "description": "Identifier of the Secret Manager used to manage the secret.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/secretSshkey:SecretSshkey": {
            "description": "Resource for creating an ssh key type secret.\n\n## Import\n\nImport account level secret sshkey\n\n```sh\n$ pulumi import harness:platform/secretSshkey:SecretSshkey example \u003csecret_sshkey_id\u003e\n```\n\nImport org level secret sshkey\n\n```sh\n$ pulumi import harness:platform/secretSshkey:SecretSshkey example \u003cord_id\u003e/\u003csecret_sshkey_id\u003e\n```\n\nImport project level secret sshkey\n\n```sh\n$ pulumi import harness:platform/secretSshkey:SecretSshkey example \u003corg_id\u003e/\u003cproject_id\u003e/\u003csecret_sshkey_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "kerberos": {
                    "$ref": "#/types/harness:platform/SecretSshkeyKerberos:SecretSshkeyKerberos",
                    "description": "Kerberos authentication scheme\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "SSH port\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "ssh": {
                    "$ref": "#/types/harness:platform/SecretSshkeySsh:SecretSshkeySsh",
                    "description": "Kerberos authentication scheme\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "identifier",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "kerberos": {
                    "$ref": "#/types/harness:platform/SecretSshkeyKerberos:SecretSshkeyKerberos",
                    "description": "Kerberos authentication scheme\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "SSH port\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "ssh": {
                    "$ref": "#/types/harness:platform/SecretSshkeySsh:SecretSshkeySsh",
                    "description": "Kerberos authentication scheme\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretSshkey resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "kerberos": {
                        "$ref": "#/types/harness:platform/SecretSshkeyKerberos:SecretSshkeyKerberos",
                        "description": "Kerberos authentication scheme\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "SSH port\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "ssh": {
                        "$ref": "#/types/harness:platform/SecretSshkeySsh:SecretSshkeySsh",
                        "description": "Kerberos authentication scheme\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/secretText:SecretText": {
            "description": "Resource for creating secret of type secret text\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst inline = new harness.platform.SecretText(\"inline\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"example\",\n    tags: [\"foo:bar\"],\n    secretManagerIdentifier: \"harnessSecretManager\",\n    valueType: \"Inline\",\n    value: \"secret\",\n});\nconst reference = new harness.platform.SecretText(\"reference\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"example\",\n    tags: [\"foo:bar\"],\n    secretManagerIdentifier: \"azureSecretManager\",\n    valueType: \"Reference\",\n    value: \"secret\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ninline = harness.platform.SecretText(\"inline\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"example\",\n    tags=[\"foo:bar\"],\n    secret_manager_identifier=\"harnessSecretManager\",\n    value_type=\"Inline\",\n    value=\"secret\")\nreference = harness.platform.SecretText(\"reference\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"example\",\n    tags=[\"foo:bar\"],\n    secret_manager_identifier=\"azureSecretManager\",\n    value_type=\"Reference\",\n    value=\"secret\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var inline = new Harness.Platform.SecretText(\"inline\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"example\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        SecretManagerIdentifier = \"harnessSecretManager\",\n        ValueType = \"Inline\",\n        Value = \"secret\",\n    });\n\n    var reference = new Harness.Platform.SecretText(\"reference\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"example\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        SecretManagerIdentifier = \"azureSecretManager\",\n        ValueType = \"Reference\",\n        Value = \"secret\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewSecretText(ctx, \"inline\", \u0026platform.SecretTextArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tSecretManagerIdentifier: pulumi.String(\"harnessSecretManager\"),\n\t\t\tValueType:               pulumi.String(\"Inline\"),\n\t\t\tValue:                   pulumi.String(\"secret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewSecretText(ctx, \"reference\", \u0026platform.SecretTextArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tSecretManagerIdentifier: pulumi.String(\"azureSecretManager\"),\n\t\t\tValueType:               pulumi.String(\"Reference\"),\n\t\t\tValue:                   pulumi.String(\"secret\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.SecretText;\nimport com.pulumi.harness.platform.SecretTextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var inline = new SecretText(\"inline\", SecretTextArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"example\")\n            .tags(\"foo:bar\")\n            .secretManagerIdentifier(\"harnessSecretManager\")\n            .valueType(\"Inline\")\n            .value(\"secret\")\n            .build());\n\n        var reference = new SecretText(\"reference\", SecretTextArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"example\")\n            .tags(\"foo:bar\")\n            .secretManagerIdentifier(\"azureSecretManager\")\n            .valueType(\"Reference\")\n            .value(\"secret\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  inline:\n    type: harness:platform:SecretText\n    properties:\n      identifier: identifier\n      name: name\n      description: example\n      tags:\n        - foo:bar\n      secretManagerIdentifier: harnessSecretManager\n      valueType: Inline\n      value: secret\n  reference:\n    type: harness:platform:SecretText\n    properties:\n      identifier: identifier\n      name: name\n      description: example\n      tags:\n        - foo:bar\n      secretManagerIdentifier: azureSecretManager\n      valueType: Reference\n      value: secret\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level secret text\n\n```sh\n$ pulumi import harness:platform/secretText:SecretText example \u003csecret_text_id\u003e\n```\n\nImport org level secret text\n\n```sh\n$ pulumi import harness:platform/secretText:SecretText example \u003cord_id\u003e/\u003csecret_text_id\u003e\n```\n\nImport project level secret text\n\n```sh\n$ pulumi import harness:platform/secretText:SecretText example \u003corg_id\u003e/\u003cproject_id\u003e/\u003csecret_text_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "secretManagerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the Secret Manager used to manage the secret.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Secret\n",
                    "secret": true
                },
                "valueType": {
                    "type": "string",
                    "description": "This has details to specify if the secret value is Inline or Reference.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "secretManagerIdentifier",
                "value",
                "valueType"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "secretManagerIdentifier": {
                    "type": "string",
                    "description": "Identifier of the Secret Manager used to manage the secret.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Secret\n",
                    "secret": true
                },
                "valueType": {
                    "type": "string",
                    "description": "This has details to specify if the secret value is Inline or Reference.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "secretManagerIdentifier",
                "value",
                "valueType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretText resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "secretManagerIdentifier": {
                        "type": "string",
                        "description": "Identifier of the Secret Manager used to manage the secret.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value of the Secret\n",
                        "secret": true
                    },
                    "valueType": {
                        "type": "string",
                        "description": "This has details to specify if the secret value is Inline or Reference.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/service:Service": {
            "description": "Resource for creating a Harness project.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.Service(\"example\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    yaml: `service:\n  name: name\n  identifier: identifier\n  serviceDefinition:\n    spec:\n      manifests:\n        - manifest:\n            identifier: manifest1\n            type: K8sManifest\n            spec:\n              store:\n                type: Github\n                spec:\n                  connectorRef: \u003c+input\u003e\n                  gitFetchType: Branch\n                  paths:\n                    - files1\n                  repoName: \u003c+input\u003e\n                  branch: master\n              skipResourceVersioning: false\n      configFiles:\n        - configFile:\n            identifier: configFile1\n            spec:\n              store:\n                type: Harness\n                spec:\n                  files:\n                    - \u003c+org.description\u003e\n      variables:\n        - name: var1\n          type: String\n          value: val1\n        - name: var2\n          type: String\n          value: val2\n    type: Kubernetes\n  gitOpsEnabled: false\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.Service(\"example\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    yaml=\"\"\"service:\n  name: name\n  identifier: identifier\n  serviceDefinition:\n    spec:\n      manifests:\n        - manifest:\n            identifier: manifest1\n            type: K8sManifest\n            spec:\n              store:\n                type: Github\n                spec:\n                  connectorRef: \u003c+input\u003e\n                  gitFetchType: Branch\n                  paths:\n                    - files1\n                  repoName: \u003c+input\u003e\n                  branch: master\n              skipResourceVersioning: false\n      configFiles:\n        - configFile:\n            identifier: configFile1\n            spec:\n              store:\n                type: Harness\n                spec:\n                  files:\n                    - \u003c+org.description\u003e\n      variables:\n        - name: var1\n          type: String\n          value: val1\n        - name: var2\n          type: String\n          value: val2\n    type: Kubernetes\n  gitOpsEnabled: false\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.Service(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Yaml = @\"service:\n  name: name\n  identifier: identifier\n  serviceDefinition:\n    spec:\n      manifests:\n        - manifest:\n            identifier: manifest1\n            type: K8sManifest\n            spec:\n              store:\n                type: Github\n                spec:\n                  connectorRef: \u003c+input\u003e\n                  gitFetchType: Branch\n                  paths:\n                    - files1\n                  repoName: \u003c+input\u003e\n                  branch: master\n              skipResourceVersioning: false\n      configFiles:\n        - configFile:\n            identifier: configFile1\n            spec:\n              store:\n                type: Harness\n                spec:\n                  files:\n                    - \u003c+org.description\u003e\n      variables:\n        - name: var1\n          type: String\n          value: val1\n        - name: var2\n          type: String\n          value: val2\n    type: Kubernetes\n  gitOpsEnabled: false\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewService(ctx, \"example\", \u0026platform.ServiceArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tOrgId:       pulumi.String(\"org_id\"),\n\t\t\tProjectId:   pulumi.String(\"project_id\"),\n\t\t\tYaml: pulumi.String(`service:\n  name: name\n  identifier: identifier\n  serviceDefinition:\n    spec:\n      manifests:\n        - manifest:\n            identifier: manifest1\n            type: K8sManifest\n            spec:\n              store:\n                type: Github\n                spec:\n                  connectorRef: \u003c+input\u003e\n                  gitFetchType: Branch\n                  paths:\n                    - files1\n                  repoName: \u003c+input\u003e\n                  branch: master\n              skipResourceVersioning: false\n      configFiles:\n        - configFile:\n            identifier: configFile1\n            spec:\n              store:\n                type: Harness\n                spec:\n                  files:\n                    - \u003c+org.description\u003e\n      variables:\n        - name: var1\n          type: String\n          value: val1\n        - name: var2\n          type: String\n          value: val2\n    type: Kubernetes\n  gitOpsEnabled: false\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Service;\nimport com.pulumi.harness.platform.ServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Service(\"example\", ServiceArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .yaml(\"\"\"\nservice:\n  name: name\n  identifier: identifier\n  serviceDefinition:\n    spec:\n      manifests:\n        - manifest:\n            identifier: manifest1\n            type: K8sManifest\n            spec:\n              store:\n                type: Github\n                spec:\n                  connectorRef: \u003c+input\u003e\n                  gitFetchType: Branch\n                  paths:\n                    - files1\n                  repoName: \u003c+input\u003e\n                  branch: master\n              skipResourceVersioning: false\n      configFiles:\n        - configFile:\n            identifier: configFile1\n            spec:\n              store:\n                type: Harness\n                spec:\n                  files:\n                    - \u003c+org.description\u003e\n      variables:\n        - name: var1\n          type: String\n          value: val1\n        - name: var2\n          type: String\n          value: val2\n    type: Kubernetes\n  gitOpsEnabled: false\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:Service\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      orgId: org_id\n      projectId: project_id\n      yaml: |\n        service:\n          name: name\n          identifier: identifier\n          serviceDefinition:\n            spec:\n              manifests:\n                - manifest:\n                    identifier: manifest1\n                    type: K8sManifest\n                    spec:\n                      store:\n                        type: Github\n                        spec:\n                          connectorRef: \u003c+input\u003e\n                          gitFetchType: Branch\n                          paths:\n                            - files1\n                          repoName: \u003c+input\u003e\n                          branch: master\n                      skipResourceVersioning: false\n              configFiles:\n                - configFile:\n                    identifier: configFile1\n                    spec:\n                      store:\n                        type: Harness\n                        spec:\n                          files:\n                            - \u003c+org.description\u003e\n              variables:\n                - name: var1\n                  type: String\n                  value: val1\n                - name: var2\n                  type: String\n                  value: val2\n            type: Kubernetes\n          gitOpsEnabled: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level service \n\n```sh\n$ pulumi import harness:platform/service:Service example \u003cservice_id\u003e\n```\n\nImport org level service \n\n```sh\n$ pulumi import harness:platform/service:Service example \u003corg_id\u003e/\u003cservice_id\u003e\n```\n\nImport project level service \n\n```sh\n$ pulumi import harness:platform/service:Service example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cservice_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of service\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Service YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "required": [
                "forceDelete",
                "identifier",
                "name",
                "yaml"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of service\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "Service YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Service resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "forceDelete": {
                        "type": "string",
                        "description": "Enable this flag for force deletion of service\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "Service YAML. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/serviceAccount:ServiceAccount": {
            "description": "Resource for creating service account.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.ServiceAccount(\"example\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    email: \"email@service.harness.io\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    accountId: \"account_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.ServiceAccount(\"example\",\n    identifier=\"identifier\",\n    name=\"name\",\n    email=\"email@service.harness.io\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    account_id=\"account_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.ServiceAccount(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Email = \"email@service.harness.io\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        AccountId = \"account_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewServiceAccount(ctx, \"example\", \u0026platform.ServiceAccountArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tEmail:       pulumi.String(\"email@service.harness.io\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tAccountId: pulumi.String(\"account_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.ServiceAccount;\nimport com.pulumi.harness.platform.ServiceAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ServiceAccount(\"example\", ServiceAccountArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .email(\"email@service.harness.io\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .accountId(\"account_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:ServiceAccount\n    properties:\n      identifier: identifier\n      name: name\n      email: email@service.harness.io\n      description: test\n      tags:\n        - foo:bar\n      accountId: account_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level service account\n\n```sh\n$ pulumi import harness:platform/serviceAccount:ServiceAccount example \u003cservice_account_id\u003e\n```\n\nImport org level service account\n\n```sh\n$ pulumi import harness:platform/serviceAccount:ServiceAccount example \u003cord_id\u003e/\u003cservice_account_id\u003e\n```\n\nImport project level service account\n\n```sh\n$ pulumi import harness:platform/serviceAccount:ServiceAccount example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cservice_account_id\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier for the Entity.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email of the Service Account.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "accountId",
                "email",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier for the Entity.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email of the Service Account.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "email",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccount resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier for the Entity.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email of the Service Account.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/serviceNowConnector:ServiceNowConnector": {
            "description": "Resource for creating a Service Now connector.\n\n## Import\n\nImport account level service now connector \n\n```sh\n$ pulumi import harness:platform/serviceNowConnector:ServiceNowConnector example \u003cconnector_id\u003e\n```\n\nImport org level service now connector \n\n```sh\n$ pulumi import harness:platform/serviceNowConnector:ServiceNowConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level service now connector \n\n```sh\n$ pulumi import harness:platform/serviceNowConnector:ServiceNowConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "auth": {
                    "$ref": "#/types/harness:platform/ServiceNowConnectorAuth:ServiceNowConnectorAuth",
                    "description": "The credentials to use for the service now authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceNowUrl": {
                    "type": "string",
                    "description": "URL of service now.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "required": [
                "auth",
                "identifier",
                "name",
                "passwordRef",
                "serviceNowUrl",
                "username",
                "usernameRef"
            ],
            "inputProperties": {
                "auth": {
                    "$ref": "#/types/harness:platform/ServiceNowConnectorAuth:ServiceNowConnectorAuth",
                    "description": "The credentials to use for the service now authentication.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceNowUrl": {
                    "type": "string",
                    "description": "URL of service now.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for authentication.\n"
                },
                "usernameRef": {
                    "type": "string",
                    "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                }
            },
            "requiredInputs": [
                "auth",
                "identifier",
                "serviceNowUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceNowConnector resources.\n",
                "properties": {
                    "auth": {
                        "$ref": "#/types/harness:platform/ServiceNowConnectorAuth:ServiceNowConnectorAuth",
                        "description": "The credentials to use for the service now authentication.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "passwordRef": {
                        "type": "string",
                        "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "serviceNowUrl": {
                        "type": "string",
                        "description": "URL of service now.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username to use for authentication.\n"
                    },
                    "usernameRef": {
                        "type": "string",
                        "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/serviceOverridesV2:ServiceOverridesV2": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The cluster ID to which the overrides are associated\n"
                },
                "envId": {
                    "type": "string",
                    "description": "The env ID to which the overrides are associated.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "infraId": {
                    "type": "string",
                    "description": "The infrastructure ID to which the overrides are associated\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The service ID to which the overrides applies.\n"
                },
                "spec": {
                    "type": "string",
                    "description": "The overrides specification for the service.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the overrides\n"
                }
            },
            "required": [
                "clusterId",
                "envId",
                "identifier",
                "infraId",
                "serviceId",
                "spec",
                "type"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "string",
                    "description": "The cluster ID to which the overrides are associated\n"
                },
                "envId": {
                    "type": "string",
                    "description": "The env ID to which the overrides are associated.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "infraId": {
                    "type": "string",
                    "description": "The infrastructure ID to which the overrides are associated\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The service ID to which the overrides applies.\n"
                },
                "spec": {
                    "type": "string",
                    "description": "The overrides specification for the service.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the overrides\n"
                }
            },
            "requiredInputs": [
                "envId",
                "identifier",
                "spec",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceOverridesV2 resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster ID to which the overrides are associated\n"
                    },
                    "envId": {
                        "type": "string",
                        "description": "The env ID to which the overrides are associated.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "infraId": {
                        "type": "string",
                        "description": "The infrastructure ID to which the overrides are associated\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The service ID to which the overrides applies.\n"
                    },
                    "spec": {
                        "type": "string",
                        "description": "The overrides specification for the service.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the overrides\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/slo:Slo": {
            "description": "Resource for creating an SLO.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  example:\n    type: harness:platform:Slo\n    properties:\n      accountId: account_id\n      orgId: default\n      projectId: default_project\n      identifier: TerraformSLO\n      request:\n        name: TSLO\n        description: description\n        tags:\n          - foo:bar\n          - bar:foo\n        userJourneyRefs:\n          - one\n          - two\n        sloTarget:\n          type: Rolling\n          sloTargetPercentage: 10\n          spec:\n            fn::toJSON:\n              periodLength: 28d\n        type: Simple\n        spec:\n          fn::toJSON:\n            monitoredServiceRef: monitoredServiceRef\n            healthSourceRef: healthSourceRef\n            serviceLevelIndicatorType: serviceLevelIndicatorType\n        notificationRuleRefs:\n          - notificationRuleRef: notification_rule_ref\n            enabled: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level SLO\n\n```sh\n$ pulumi import harness:platform/slo:Slo example \u003cslo_id\u003e\n```\n\nImport organization level SLO\n\n```sh\n$ pulumi import harness:platform/slo:Slo example \u003corg_id\u003e/\u003cslo_id\u003e\n```\n\nImport project level SLO\n\n```sh\n$ pulumi import harness:platform/slo:Slo example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cslo_id\u003e\n```\n\n",
            "properties": {
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the SLO.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Identifier of the organization in which the SLO is configured.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Identifier of the project in which the SLO is configured.\n"
                },
                "request": {
                    "$ref": "#/types/harness:platform/SloRequest:SloRequest",
                    "description": "Request for creating or updating SLO.\n"
                }
            },
            "required": [
                "identifier",
                "orgId",
                "projectId"
            ],
            "inputProperties": {
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the SLO.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Identifier of the organization in which the SLO is configured.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Identifier of the project in which the SLO is configured.\n"
                },
                "request": {
                    "$ref": "#/types/harness:platform/SloRequest:SloRequest",
                    "description": "Request for creating or updating SLO.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "orgId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Slo resources.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the SLO.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Identifier of the organization in which the SLO is configured.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Identifier of the project in which the SLO is configured.\n"
                    },
                    "request": {
                        "$ref": "#/types/harness:platform/SloRequest:SloRequest",
                        "description": "Request for creating or updating SLO.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/splunkConnector:SplunkConnector": {
            "description": "Resource for creating a Splunk connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.platform.SplunkConnector(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    url: \"https://splunk.com/\",\n    delegateSelectors: [\"harness-delegate\"],\n    accountId: \"splunk_account_id\",\n    username: \"username\",\n    passwordRef: \"account.secret_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.SplunkConnector(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    url=\"https://splunk.com/\",\n    delegate_selectors=[\"harness-delegate\"],\n    account_id=\"splunk_account_id\",\n    username=\"username\",\n    password_ref=\"account.secret_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.SplunkConnector(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://splunk.com/\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        AccountId = \"splunk_account_id\",\n        Username = \"username\",\n        PasswordRef = \"account.secret_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewSplunkConnector(ctx, \"test\", \u0026platform.SplunkConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://splunk.com/\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tAccountId:   pulumi.String(\"splunk_account_id\"),\n\t\t\tUsername:    pulumi.String(\"username\"),\n\t\t\tPasswordRef: pulumi.String(\"account.secret_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.SplunkConnector;\nimport com.pulumi.harness.platform.SplunkConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new SplunkConnector(\"test\", SplunkConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .url(\"https://splunk.com/\")\n            .delegateSelectors(\"harness-delegate\")\n            .accountId(\"splunk_account_id\")\n            .username(\"username\")\n            .passwordRef(\"account.secret_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:SplunkConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      url: https://splunk.com/\n      delegateSelectors:\n        - harness-delegate\n      accountId: splunk_account_id\n      username: username\n      passwordRef: account.secret_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level splunk connector \n\n```sh\n$ pulumi import harness:platform/splunkConnector:SplunkConnector example \u003cconnector_id\u003e\n```\n\nImport org level splunk connector \n\n```sh\n$ pulumi import harness:platform/splunkConnector:SplunkConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level splunk connector \n\n```sh\n$ pulumi import harness:platform/splunkConnector:SplunkConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Splunk account id.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the Splunk password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Splunk server.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username used for connecting to Splunk.\n"
                }
            },
            "required": [
                "accountId",
                "identifier",
                "name",
                "passwordRef",
                "url",
                "username"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Splunk account id.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "passwordRef": {
                    "type": "string",
                    "description": "The reference to the Harness secret containing the Splunk password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Splunk server.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username used for connecting to Splunk.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "identifier",
                "passwordRef",
                "url",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SplunkConnector resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Splunk account id.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "passwordRef": {
                        "type": "string",
                        "description": "The reference to the Harness secret containing the Splunk password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Splunk server.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username used for connecting to Splunk.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/spotConnector:SpotConnector": {
            "description": "Resource for creating a Spot connector.\n\n## Import\n\nImport using spot cloud provider connector id\n\n```sh\n$ pulumi import harness:platform/spotConnector:SpotConnector example \u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "permanentToken": {
                    "$ref": "#/types/harness:platform/SpotConnectorPermanentToken:SpotConnectorPermanentToken",
                    "description": "Authenticate to Spot using account id and permanent token.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "permanentToken"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "permanentToken": {
                    "$ref": "#/types/harness:platform/SpotConnectorPermanentToken:SpotConnectorPermanentToken",
                    "description": "Authenticate to Spot using account id and permanent token.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "permanentToken"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SpotConnector resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "permanentToken": {
                        "$ref": "#/types/harness:platform/SpotConnectorPermanentToken:SpotConnectorPermanentToken",
                        "description": "Authenticate to Spot using account id and permanent token.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/sumologicConnector:SumologicConnector": {
            "description": "Resource for creating a Sumologic connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.platform.SumologicConnector(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    url: \"https://api.us2.sumologic.com/\",\n    delegateSelectors: [\"harness-delegate\"],\n    accessIdRef: \"account.secret_id\",\n    accessKeyRef: \"account.secret_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.SumologicConnector(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    url=\"https://api.us2.sumologic.com/\",\n    delegate_selectors=[\"harness-delegate\"],\n    access_id_ref=\"account.secret_id\",\n    access_key_ref=\"account.secret_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.SumologicConnector(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        Url = \"https://api.us2.sumologic.com/\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        AccessIdRef = \"account.secret_id\",\n        AccessKeyRef = \"account.secret_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewSumologicConnector(ctx, \"test\", \u0026platform.SumologicConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://api.us2.sumologic.com/\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tAccessIdRef:  pulumi.String(\"account.secret_id\"),\n\t\t\tAccessKeyRef: pulumi.String(\"account.secret_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.SumologicConnector;\nimport com.pulumi.harness.platform.SumologicConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new SumologicConnector(\"test\", SumologicConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .url(\"https://api.us2.sumologic.com/\")\n            .delegateSelectors(\"harness-delegate\")\n            .accessIdRef(\"account.secret_id\")\n            .accessKeyRef(\"account.secret_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:SumologicConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      url: https://api.us2.sumologic.com/\n      delegateSelectors:\n        - harness-delegate\n      accessIdRef: account.secret_id\n      accessKeyRef: account.secret_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level sumologic connector \n\n```sh\n$ pulumi import harness:platform/sumologicConnector:SumologicConnector example \u003cconnector_id\u003e\n```\n\nImport org level sumologic connector \n\n```sh\n$ pulumi import harness:platform/sumologicConnector:SumologicConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level sumologic connector \n\n```sh\n$ pulumi import harness:platform/sumologicConnector:SumologicConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "accessIdRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the access id. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "accessKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the SumoLogic server.\n"
                }
            },
            "required": [
                "accessIdRef",
                "accessKeyRef",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "accessIdRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the access id. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "accessKeyRef": {
                    "type": "string",
                    "description": "Reference to the Harness secret containing the access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the SumoLogic server.\n"
                }
            },
            "requiredInputs": [
                "accessIdRef",
                "accessKeyRef",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SumologicConnector resources.\n",
                "properties": {
                    "accessIdRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the access id. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "accessKeyRef": {
                        "type": "string",
                        "description": "Reference to the Harness secret containing the access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the SumoLogic server.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/tasConnector:TasConnector": {
            "description": "Resource for creating an Tas in Harness.\n\n## Import\n\nImport account level tas connector\n\n```sh\n$ pulumi import harness:platform/tasConnector:TasConnector example \u003cconnector_id\u003e\n```\n\nImport organization level tas connector\n\n```sh\n$ pulumi import harness:platform/tasConnector:TasConnector example \u003corganization_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level tas connector\n\n```sh\n$ pulumi import harness:platform/tasConnector:TasConnector example \u003corganization_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/TasConnectorCredentials:TasConnectorCredentials",
                    "description": "Contains Tas connector credentials.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "executeOnDelegate": {
                    "type": "boolean",
                    "description": "Execute on delegate or not.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "required": [
                "credentials",
                "identifier",
                "name"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/TasConnectorCredentials:TasConnectorCredentials",
                    "description": "Contains Tas connector credentials.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to filter delegates for connection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "executeOnDelegate": {
                    "type": "boolean",
                    "description": "Execute on delegate or not.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                }
            },
            "requiredInputs": [
                "credentials",
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TasConnector resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/TasConnectorCredentials:TasConnectorCredentials",
                        "description": "Contains Tas connector credentials.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "executeOnDelegate": {
                        "type": "boolean",
                        "description": "Execute on delegate or not.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/template:Template": {
            "description": "Resource for creating a Template. Description field is deprecated\n\n## Remote Pipeline template\n\nresource \"harness.platform.Template\" \"pipeline_template_remote\" {\n  identifier = \"identifier\"\n  org_id     = harness_platform_project.test.org_id\n  project_id = harness_platform_project.test.id\n  name       = \"name\"\n  comments   = \"comments\"\n  version    = \"ab\"\n  is_stable  = true\n  git_details {\n    branch_name    = \"main\"\n    commit_message = \"Commit\"\n    file_path      = \"file_path\"\n    connector_ref  = \"account.connector_ref\"\n    store_type     = \"REMOTE\"\n    repo_name      = \"repo_name\"\n  }\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: Pipeline\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    stages:\n      - stage:\n          identifier: dvvdvd\n          name: dvvdvd\n          description: \"\"\n          type: Deployment\n          spec:\n            deploymentType: Kubernetes\n            service:\n              serviceRef: \u003c+input\u003e\n              serviceInputs: \u003c+input\u003e\n            environment:\n              environmentRef: \u003c+input\u003e\n              deployToAll: false\n              environmentInputs: \u003c+input\u003e\n              serviceOverrideInputs: \u003c+input\u003e\n              infrastructureDefinitions: \u003c+input\u003e\n            execution:\n              steps:\n                - step:\n                    name: Rollout Deployment\n                    identifier: rolloutDeployment\n                    type: K8sRollingDeploy\n                    timeout: 10m\n                    spec:\n                      skipDryRun: false\n                      pruningEnabled: false\n              rollbackSteps:\n                - step:\n                    name: Rollback Rollout Deployment\n                    identifier: rollbackRolloutDeployment\n                    type: K8sRollingRollback\n                    timeout: 10m\n                    spec:\n                      pruningEnabled: false\n          tags: {}\n          failureStrategies:\n            - onFailure:\n                errors:\n                  - AllErrors\n                action:\n                  type: StageRollback\n\n  EOT\n}\n\n## Remote Pipeline template to create new branch from existing base branch\n\nresource \"harness.platform.Template\" \"pipeline_template_remote\" {\n  identifier = \"identifier\"\n  org_id     = harness_platform_project.test.org_id\n  project_id = harness_platform_project.test.id\n  name       = \"name\"\n  comments   = \"comments\"\n  version    = \"ab\"\n  is_stable  = true\n  git_details {\n    branch_name    = \"new_branch\"\n    commit_message = \"Commit\"\n    file_path      = \"file_path\"\n    connector_ref  = \"account.connector_ref\"\n    store_type     = \"REMOTE\"\n    repo_name      = \"repo_name\"\n    base_branch    = \"main\"\n  }\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: Pipeline\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    stages:\n      - stage:\n          identifier: dvvdvd\n          name: dvvdvd\n          description: \"\"\n          type: Deployment\n          spec:\n            deploymentType: Kubernetes\n            service:\n              serviceRef: \u003c+input\u003e\n              serviceInputs: \u003c+input\u003e\n            environment:\n              environmentRef: \u003c+input\u003e\n              deployToAll: false\n              environmentInputs: \u003c+input\u003e\n              serviceOverrideInputs: \u003c+input\u003e\n              infrastructureDefinitions: \u003c+input\u003e\n            execution:\n              steps:\n                - step:\n                    name: Rollout Deployment\n                    identifier: rolloutDeployment\n                    type: K8sRollingDeploy\n                    timeout: 10m\n                    spec:\n                      skipDryRun: false\n                      pruningEnabled: false\n              rollbackSteps:\n                - step:\n                    name: Rollback Rollout Deployment\n                    identifier: rollbackRolloutDeployment\n                    type: K8sRollingRollback\n                    timeout: 10m\n                    spec:\n                      pruningEnabled: false\n          tags: {}\n          failureStrategies:\n            - onFailure:\n                errors:\n                  - AllErrors\n                action:\n                  type: StageRollback\n\n  EOT\n}\n\n## Inline Pipeline template\n\nresource \"harness.platform.Template\" \"pipeline_template_inline\" {\n  identifier    = \"identifier\"\n  org_id        = harness_platform_project.test.org_id\n  project_id    = harness_platform_project.test.id\n  name          = \"name\"\n  comments      = \"comments\"\n  version       = \"ab\"\n  is_stable     = true\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: Pipeline\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    stages:\n      - stage:\n          identifier: dvvdvd\n          name: dvvdvd\n          description: \"\"\n          type: Deployment\n          spec:\n            deploymentType: Kubernetes\n            service:\n              serviceRef: \u003c+input\u003e\n              serviceInputs: \u003c+input\u003e\n            environment:\n              environmentRef: \u003c+input\u003e\n              deployToAll: false\n              environmentInputs: \u003c+input\u003e\n              serviceOverrideInputs: \u003c+input\u003e\n              infrastructureDefinitions: \u003c+input\u003e\n            execution:\n              steps:\n                - step:\n                    name: Rollout Deployment\n                    identifier: rolloutDeployment\n                    type: K8sRollingDeploy\n                    timeout: 10m\n                    spec:\n                      skipDryRun: false\n                      pruningEnabled: false\n              rollbackSteps:\n                - step:\n                    name: Rollback Rollout Deployment\n                    identifier: rollbackRolloutDeployment\n                    type: K8sRollingRollback\n                    timeout: 10m\n                    spec:\n                      pruningEnabled: false\n          tags: {}\n          failureStrategies:\n            - onFailure:\n                errors:\n                  - AllErrors\n                action:\n                  type: StageRollback\n    \n  EOT\n}\n\n## Inline Step template\n\nresource \"harness.platform.Template\" \"step_template_inline\" {\n  identifier    = \"identifier\"\n  org_id        = harness_platform_project.test.org_id\n  project_id    = harness_platform_project.test.id\n  name          = \"name\"\n  comments      = \"comments\"\n  version       = \"ab\"\n  is_stable     = true\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: Step\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    timeout: 10m\n    type: ShellScript\n    spec:\n      shell: Bash\n      onDelegate: true\n      source:\n        type: Inline\n        spec:\n          script: \u003c+input\u003e\n      environmentVariables: []\n      outputVariables: []\n\n  EOT\n}\n\n## Remote Step template\n\nresource \"harness.platform.Template\" \"step_template_remote\" {\n  identifier = \"identifier\"\n  org_id     = harness_platform_project.test.org_id\n  project_id = harness_platform_project.test.id\n  name       = \"name\"\n  comments   = \"comments\"\n  version    = \"ab\"\n  is_stable  = true\n  git_details {\n    branch_name    = \"main\"\n    commit_message = \"Commit\"\n    file_path      = \"file_path\"\n    connector_ref  = \"account.connector_ref\"\n    store_type     = \"REMOTE\"\n    repo_name      = \"repo_name\"\n  }\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: Step\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    timeout: 10m\n    type: ShellScript\n    spec:\n      shell: Bash\n      onDelegate: true\n      source:\n        type: Inline\n        spec:\n          script: \u003c+input\u003e\n      environmentVariables: []\n      outputVariables: []\n\n  EOT\n}\n\n## Remote Step template to create new branch from existing branch\n\nresource \"harness.platform.Template\" \"step_template_remote\" {\n  identifier = \"identifier\"\n  org_id     = harness_platform_project.test.org_id\n  project_id = harness_platform_project.test.id\n  name       = \"name\"\n  comments   = \"comments\"\n  version    = \"ab\"\n  is_stable  = true\n  git_details {\n    branch_name    = \"new_branch\"\n    commit_message = \"Commit\"\n    file_path      = \"file_path\"\n    connector_ref  = \"account.connector_ref\"\n    store_type     = \"REMOTE\"\n    repo_name      = \"repo_name\"\n    base_branch    = \"main\"\n  }\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: Step\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    timeout: 10m\n    type: ShellScript\n    spec:\n      shell: Bash\n      onDelegate: true\n      source:\n        type: Inline\n        spec:\n          script: \u003c+input\u003e\n      environmentVariables: []\n      outputVariables: []\n\n  EOT\n}\n\n## Inline Stage template\n\nresource \"harness.platform.Template\" \"stage_template_inline\" {\n  identifier    = \"identifier\"\n  org_id        = harness_platform_project.test.org_id\n  project_id    = harness_platform_project.test.id\n  name          = \"name\"\n  comments      = \"comments\"\n  version       = \"ab\"\n  is_stable     = true\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: Stage\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    type: Deployment\n    spec:\n      deploymentType: Kubernetes\n      service:\n        serviceRef: \u003c+input\u003e\n        serviceInputs: \u003c+input\u003e\n      environment:\n        environmentRef: \u003c+input\u003e\n        deployToAll: false\n        environmentInputs: \u003c+input\u003e\n        infrastructureDefinitions: \u003c+input\u003e\n      execution:\n        steps:\n          - step:\n              type: ShellScript\n              name: Shell Script_1\n              identifier: ShellScript_1\n              spec:\n                shell: Bash\n                onDelegate: true\n                source:\n                  type: Inline\n                  spec:\n                    script: \u003c+input\u003e\n                environmentVariables: []\n                outputVariables: []\n              timeout: \u003c+input\u003e\n        rollbackSteps: []\n    failureStrategies:\n      - onFailure:\n          errors:\n            - AllErrors\n          action:\n            type: StageRollback\n\n  EOT\n}\n\n## Remote Stage template\n\nresource \"harness.platform.Template\" \"stage_template_remote\" {\n  identifier = \"identifier\"\n  org_id     = harness_platform_project.test.org_id\n  project_id = harness_platform_project.test.id\n  name       = \"name\"\n  comments   = \"comments\"\n  version    = \"ab\"\n  is_stable  = true\n  git_details {\n    branch_name    = \"main\"\n    commit_message = \"Commit\"\n    file_path      = \"file_path\"\n    connector_ref  = \"account.connector_ref\"\n    store_type     = \"REMOTE\"\n    repo_name      = \"repo_name\"\n  }\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: Stage\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    type: Deployment\n    spec:\n      deploymentType: Kubernetes\n      service:\n        serviceRef: \u003c+input\u003e\n        serviceInputs: \u003c+input\u003e\n      environment:\n        environmentRef: \u003c+input\u003e\n        deployToAll: false\n        environmentInputs: \u003c+input\u003e\n        infrastructureDefinitions: \u003c+input\u003e\n      execution:\n        steps:\n          - step:\n              type: ShellScript\n              name: Shell Script_1\n              identifier: ShellScript_1\n              spec:\n                shell: Bash\n                onDelegate: true\n                source:\n                  type: Inline\n                  spec:\n                    script: \u003c+input\u003e\n                environmentVariables: []\n                outputVariables: []\n              timeout: \u003c+input\u003e\n        rollbackSteps: []\n    failureStrategies:\n      - onFailure:\n          errors:\n            - AllErrors\n          action:\n            type: StageRollback\n\n  EOT\n}\n\n## Remote Stage template to create new branch from existing branch\n\nresource \"harness.platform.Template\" \"stage_template_remote\" {\n  identifier = \"identifier\"\n  org_id     = harness_platform_project.test.org_id\n  project_id = harness_platform_project.test.id\n  name       = \"name\"\n  comments   = \"comments\"\n  version    = \"ab\"\n  is_stable  = true\n  git_details {\n    branch_name    = \"new_branch\"\n    commit_message = \"Commit\"\n    file_path      = \"file_path\"\n    connector_ref  = \"account.connector_ref\"\n    store_type     = \"REMOTE\"\n    repo_name      = \"repo_name\"\n    base_branch    = \"main\"\n  }\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: Stage\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    type: Deployment\n    spec:\n      deploymentType: Kubernetes\n      service:\n        serviceRef: \u003c+input\u003e\n        serviceInputs: \u003c+input\u003e\n      environment:\n        environmentRef: \u003c+input\u003e\n        deployToAll: false\n        environmentInputs: \u003c+input\u003e\n        infrastructureDefinitions: \u003c+input\u003e\n      execution:\n        steps:\n          - step:\n              type: ShellScript\n              name: Shell Script_1\n              identifier: ShellScript_1\n              spec:\n                shell: Bash\n                onDelegate: true\n                source:\n                  type: Inline\n                  spec:\n                    script: \u003c+input\u003e\n                environmentVariables: []\n                outputVariables: []\n              timeout: \u003c+input\u003e\n        rollbackSteps: []\n    failureStrategies:\n      - onFailure:\n          errors:\n            - AllErrors\n          action:\n            type: StageRollback\n\n  EOT\n}\n\n## Inline StepGroup template\n\nresource \"harness.platform.Template\" \"stepgroup_template_inline\" {\n  identifier    = \"identifier\"\n  org_id        = harness_platform_project.test.org_id\n  project_id    = harness_platform_project.test.id\n  name          = \"name\"\n  comments      = \"comments\"\n  version       = \"ab\"\n  is_stable     = true\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: StepGroup\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    stageType: Deployment\n    steps:\n      - step:\n          type: ShellScript\n          name: Shell Script_1\n          identifier: ShellScript_1\n          spec:\n            shell: Bash\n            onDelegate: true\n            source:\n              type: Inline\n              spec:\n                script: \u003c+input\u003e\n            environmentVariables: []\n            outputVariables: []\n          timeout: 10m\n\n  EOT\n}\n\n## Remote StepGroup template\n\nresource \"harness.platform.Template\" \"stepgroup_template_remote\" {\n  identifier = \"identifier\"\n  org_id     = harness_platform_project.test.org_id\n  project_id = harness_platform_project.test.id\n  name       = \"name\"\n  comments   = \"comments\"\n  version    = \"ab\"\n  is_stable  = true\n  git_details {\n    branch_name    = \"main\"\n    commit_message = \"Commit\"\n    file_path      = \"file_path\"\n    connector_ref  = \"account.connector_ref\"\n    store_type     = \"REMOTE\"\n    repo_name      = \"repo_name\"\n  }\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: StepGroup\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    stageType: Deployment\n    steps:\n      - step:\n          type: ShellScript\n          name: Shell Script_1\n          identifier: ShellScript_1\n          spec:\n            shell: Bash\n            onDelegate: true\n            source:\n              type: Inline\n              spec:\n                script: \u003c+input\u003e\n            environmentVariables: []\n            outputVariables: []\n          timeout: 10m\n\n  EOT\n}\n\n## Remote StepGroup template to create new branch from existing branch\n\nresource \"harness.platform.Template\" \"stepgroup_template_remote\" {\n  identifier = \"identifier\"\n  org_id     = harness_platform_project.test.org_id\n  project_id = harness_platform_project.test.id\n  name       = \"name\"\n  comments   = \"comments\"\n  version    = \"ab\"\n  is_stable  = true\n  git_details {\n    branch_name    = \"new_branch\"\n    commit_message = \"Commit\"\n    file_path      = \"file_path\"\n    connector_ref  = \"account.connector_ref\"\n    store_type     = \"REMOTE\"\n    repo_name      = \"repo_name\"\n    base_branch    = \"main\"\n  }\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: StepGroup\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    stageType: Deployment\n    steps:\n      - step:\n          type: ShellScript\n          name: Shell Script_1\n          identifier: ShellScript_1\n          spec:\n            shell: Bash\n            onDelegate: true\n            source:\n              type: Inline\n              spec:\n                script: \u003c+input\u003e\n            environmentVariables: []\n            outputVariables: []\n          timeout: 10m\n\n  EOT\n}\n\n## Inline Monitered Service template\n\nresource \"harness.platform.Template\" \"monitered_service_template_inline\" {\n  identifier    = \"identifier\"\n  org_id        = harness_platform_project.test.org_id\n  project_id    = harness_platform_project.test.id\n  name          = \"name\"\n  comments      = \"comments\"\n  version       = \"ab\"\n  is_stable     = true\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: MonitoredService\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    serviceRef: \u003c+input\u003e\n    environmentRef: \u003c+input\u003e\n    type: Application\n    sources:\n      changeSources:\n        - name: Harness CD Next Gen\n          identifier: harness_cd_next_gen\n          type: HarnessCDNextGen\n          enabled: true\n          category: Deployment\n          spec: {}\n      healthSources:\n        - name: health\n          identifier: health\n          type: AppDynamics\n          spec:\n            applicationName: \u003c+input\u003e\n            tierName: \u003c+input\u003e\n            metricData:\n              Errors: true\n              Performance: true\n            metricDefinitions: []\n            feature: Application Monitoring\n            connectorRef: \u003c+input\u003e\n            metricPacks:\n              - identifier: Errors\n              - identifier: Performance\n\n  EOT\n}\n\n## Artifact Source template\n\nresource \"harness.platform.Template\" \"artifact_source_template\" {\n  identifier    = \"identifier\"\n  org_id        = harness_platform_project.test.org_id\n  project_id    = harness_platform_project.test.id\n  name          = \"name\"\n  comments      = \"comments\"\n  version       = \"ab\"\n  is_stable     = true\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: ArtifactSource\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    type: DockerRegistry\n    spec:\n      imagePath: library/nginx\n      tag: \u003c+input\u003e\n      connectorRef: account.Harness_DockerHub\n\n  EOT\n}\n\n## Deployment template\n\nresource \"harness.platform.Template\" \"deployment_template\" {\n  identifier    = \"identifier\"\n  org_id        = harness_platform_project.test.org_id\n  project_id    = harness_platform_project.test.id\n  name          = \"name\"\n  comments      = \"comments\"\n  version       = \"ab\"\n  is_stable     = true\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: CustomDeployment\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    infrastructure:\n      variables:\n        - name: kubeConnector\n          type: Connector\n          value: \u003c+input\u003e\n          description: \"\"\n      fetchInstancesScript:\n        store:\n          type: Inline\n          spec:\n            content: |\n              #\n              # Script is expected to query Infrastructure and dump json\n              # in $INSTANCE_OUTPUT_PATH file path\n              #\n              # Harness is expected to initialize ${INSTANCE_OUTPUT_PATH}\n              # environment variable - a random unique file path on delegate,\n              # so script execution can save the result.\n              #\n              /opt/harness-delegate/client-tools/kubectl/v1.19.2/kubectl get pods --namespace=harness-delegate-ng -o json \u003e $INSTANCE_OUTPUT_PATH\n      instanceAttributes:\n        - name: instancename\n          jsonPath: metadata.name\n          description: \"\"\n      instancesListPath: items\n    execution:\n      stepTemplateRefs: []\n\n  EOT\n}\n\n## Secrets Manager template\n\nresource \"harness.platform.Template\" \"secrets_manager_template\" {\n  identifier    = \"identifier\"\n  org_id        = harness_platform_project.test.org_id\n  project_id    = harness_platform_project.test.id\n  name          = \"name\"\n  comments      = \"comments\"\n  version       = \"ab\"\n  is_stable     = true\n  template_yaml = \u003c\u003c-EOT\ntemplate:\n  name: \"name\"\n  identifier: \"identifier\"\n  versionLabel: \"ab\"\n  type: SecretManager\n  projectIdentifier: ${harness_platform_project.test.id}\n  orgIdentifier: ${harness_platform_project.test.org_id}\n  tags: {}\n  spec:\n    executionTarget: {}\n    shell: Bash\n    onDelegate: true\n    source:\n      spec:\n        script: |-\n          curl -o secret.json -X GET https://example.com/\u003c+secretManager.environmentVariables.enginename\u003e/\u003c+secretManager.environmentVariables.path\u003e -H 'X-Vault-Token: \u003c+secrets.getValue(\"vaultTokenOne\")\u003e'\n          secret=$(jq -r '.data.\"\u003c+secretManager.environmentVariables.key\u003e\"' secret.json)\n        type: Inline\n    environmentVariables:\n      - name: enginename\n        type: String\n        value: \u003c+input\u003e\n      - name: path\n        type: String\n        value: \u003c+input\u003e\n      - name: key\n        type: String\n        value: \u003c+input\u003e\n\n\n  EOT\n}\n```\n\n## Import\n\nImport account level template\n\n```sh\n$ pulumi import harness:platform/template:Template example \u003ctemplate_id\u003e\n```\n\nImport org level template\n\n```sh\n$ pulumi import harness:platform/template:Template example \u003cord_id\u003e/\u003ctemplate_id\u003e\n```\n\nImport project level template\n\n```sh\n$ pulumi import harness:platform/template:Template example \u003corg_id\u003e/\u003cproject_id\u003e/\u003ctemplate_id\u003e\n```\n\n",
            "properties": {
                "comments": {
                    "type": "string",
                    "description": "Specify comment with respect to changes.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the entity. Description field is deprecated\n",
                    "deprecationMessage": "description field is deprecated"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of template\n"
                },
                "gitDetails": {
                    "$ref": "#/types/harness:platform/TemplateGitDetails:TemplateGitDetails",
                    "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource\n"
                },
                "isStable": {
                    "type": "boolean",
                    "description": "True if given version for template to be set as stable.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Variable\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "templateYaml": {
                    "type": "string",
                    "description": "Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version Label for Template.\n"
                }
            },
            "required": [
                "forceDelete",
                "gitDetails",
                "identifier",
                "name",
                "templateYaml",
                "version"
            ],
            "inputProperties": {
                "comments": {
                    "type": "string",
                    "description": "Specify comment with respect to changes.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the entity. Description field is deprecated\n",
                    "deprecationMessage": "description field is deprecated"
                },
                "forceDelete": {
                    "type": "string",
                    "description": "Enable this flag for force deletion of template\n"
                },
                "gitDetails": {
                    "$ref": "#/types/harness:platform/TemplateGitDetails:TemplateGitDetails",
                    "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource\n"
                },
                "isStable": {
                    "type": "boolean",
                    "description": "True if given version for template to be set as stable.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Variable\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "templateYaml": {
                    "type": "string",
                    "description": "Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version Label for Template.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "templateYaml",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Template resources.\n",
                "properties": {
                    "comments": {
                        "type": "string",
                        "description": "Specify comment with respect to changes.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the entity. Description field is deprecated\n",
                        "deprecationMessage": "description field is deprecated"
                    },
                    "forceDelete": {
                        "type": "string",
                        "description": "Enable this flag for force deletion of template\n"
                    },
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/TemplateGitDetails:TemplateGitDetails",
                        "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource\n"
                    },
                    "isStable": {
                        "type": "boolean",
                        "description": "True if given version for template to be set as stable.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Variable\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "templateYaml": {
                        "type": "string",
                        "description": "Yaml for creating new Template. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version Label for Template.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/templateFilters:TemplateFilters": {
            "description": "Resource for creating a Harness Template Filters.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.platform.TemplateFilters(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    type: \"Template\",\n    filterProperties: {\n        tags: [\"foo:bar\"],\n        filterType: \"Template\",\n    },\n    filterVisibility: \"EveryOne\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.TemplateFilters(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    type=\"Template\",\n    filter_properties=harness.platform.TemplateFiltersFilterPropertiesArgs(\n        tags=[\"foo:bar\"],\n        filter_type=\"Template\",\n    ),\n    filter_visibility=\"EveryOne\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.TemplateFilters(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Type = \"Template\",\n        FilterProperties = new Harness.Platform.Inputs.TemplateFiltersFilterPropertiesArgs\n        {\n            Tags = new[]\n            {\n                \"foo:bar\",\n            },\n            FilterType = \"Template\",\n        },\n        FilterVisibility = \"EveryOne\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewTemplateFilters(ctx, \"test\", \u0026platform.TemplateFiltersArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tName:       pulumi.String(\"name\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tType:       pulumi.String(\"Template\"),\n\t\t\tFilterProperties: \u0026platform.TemplateFiltersFilterPropertiesArgs{\n\t\t\t\tTags: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t\t},\n\t\t\t\tFilterType: pulumi.String(\"Template\"),\n\t\t\t},\n\t\t\tFilterVisibility: pulumi.String(\"EveryOne\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.TemplateFilters;\nimport com.pulumi.harness.platform.TemplateFiltersArgs;\nimport com.pulumi.harness.platform.inputs.TemplateFiltersFilterPropertiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new TemplateFilters(\"test\", TemplateFiltersArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .type(\"Template\")\n            .filterProperties(TemplateFiltersFilterPropertiesArgs.builder()\n                .tags(\"foo:bar\")\n                .filterType(\"Template\")\n                .build())\n            .filterVisibility(\"EveryOne\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:TemplateFilters\n    properties:\n      identifier: identifier\n      name: name\n      orgId: org_id\n      projectId: project_id\n      type: Template\n      filterProperties:\n        tags:\n          - foo:bar\n        filterType: Template\n      filterVisibility: EveryOne\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level template filter\n\n```sh\n$ pulumi import harness:platform/templateFilters:TemplateFilters example \u003cfilter_id\u003e/\u003ctype\u003e\n```\n\nImport org level template filter\n\n```sh\n$ pulumi import harness:platform/templateFilters:TemplateFilters example \u003corg_id\u003e/\u003cfilter_id\u003e/\u003ctype\u003e\n```\n\nImport project level template filter\n\n```sh\n$ pulumi import harness:platform/templateFilters:TemplateFilters example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cfilter_id\u003e/\u003ctype\u003e\n```\n\n",
            "properties": {
                "filterProperties": {
                    "$ref": "#/types/harness:platform/TemplateFiltersFilterProperties:TemplateFiltersFilterProperties",
                    "description": "Properties of the filters entity defined in Harness.\n"
                },
                "filterVisibility": {
                    "type": "string",
                    "description": "This indicates visibility of filters. By default, everyone can view this filter.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the template filters.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of template filters. Currently supported types are { Template}\n"
                }
            },
            "required": [
                "filterProperties",
                "identifier",
                "name",
                "type"
            ],
            "inputProperties": {
                "filterProperties": {
                    "$ref": "#/types/harness:platform/TemplateFiltersFilterProperties:TemplateFiltersFilterProperties",
                    "description": "Properties of the filters entity defined in Harness.\n"
                },
                "filterVisibility": {
                    "type": "string",
                    "description": "This indicates visibility of filters. By default, everyone can view this filter.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the template filters.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of template filters. Currently supported types are { Template}\n"
                }
            },
            "requiredInputs": [
                "filterProperties",
                "identifier",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TemplateFilters resources.\n",
                "properties": {
                    "filterProperties": {
                        "$ref": "#/types/harness:platform/TemplateFiltersFilterProperties:TemplateFiltersFilterProperties",
                        "description": "Properties of the filters entity defined in Harness.\n"
                    },
                    "filterVisibility": {
                        "type": "string",
                        "description": "This indicates visibility of filters. By default, everyone can view this filter.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the template filters.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of template filters. Currently supported types are { Template}\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/terraformCloudConnector:TerraformCloudConnector": {
            "description": "## Example Usage\n\n## Import\n\nImport account level Terraform Cloud provider connector \n\n```sh\n$ pulumi import harness:platform/terraformCloudConnector:TerraformCloudConnector example \u003cconnector_id\u003e\n```\n\nImport org level Terraform Cloud provider connector \n\n```sh\n$ pulumi import harness:platform/terraformCloudConnector:TerraformCloudConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level Terraform Cloud provider connector \n\n```sh\n$ pulumi import harness:platform/terraformCloudConnector:TerraformCloudConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/TerraformCloudConnectorCredentials:TerraformCloudConnectorCredentials"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect only using delegates with these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string"
                }
            },
            "required": [
                "credentials",
                "identifier",
                "name",
                "url"
            ],
            "inputProperties": {
                "credentials": {
                    "$ref": "#/types/harness:platform/TerraformCloudConnectorCredentials:TerraformCloudConnectorCredentials"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Connect only using delegates with these tags.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "url": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "credentials",
                "identifier",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TerraformCloudConnector resources.\n",
                "properties": {
                    "credentials": {
                        "$ref": "#/types/harness:platform/TerraformCloudConnectorCredentials:TerraformCloudConnectorCredentials"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Connect only using delegates with these tags.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/token:Token": {
            "description": "Resource for creating tokens.\n\n## Import\n\nImport account level token\n\n```sh\n$ pulumi import harness:platform/token:Token harness_platform_token \u003cparent_id\u003e/\u003capikey_id\u003e/\u003capikey_type\u003e/\u003ctoken_id\u003e\n```\n\nImport org level token\n\n```sh\n$ pulumi import harness:platform/token:Token harness_platform_token \u003corg_id\u003e/\u003cparent_id\u003e/\u003capikey_id\u003e/\u003capikey_type\u003e/\u003ctoken_id\u003e\n```\n\nImport project level token\n\n```sh\n$ pulumi import harness:platform/token:Token harness_platform_token \u003corg_id\u003e/\u003cproject_id\u003e/\u003cparent_id\u003e/\u003capikey_id\u003e/\u003capikey_type\u003e/\u003ctoken_id\u003e\n```\n\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier for the Entity\n"
                },
                "apikeyId": {
                    "type": "string",
                    "description": "Identifier of the API Key\n"
                },
                "apikeyType": {
                    "type": "string",
                    "description": "Type of the API Key\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Token\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email Id of the user who created the Token\n"
                },
                "encodedPassword": {
                    "type": "string",
                    "description": "Encoded password of the Token\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the Token\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Token\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "Parent Entity Identifier of the API Key\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity\n"
                },
                "scheduledExpireTime": {
                    "type": "integer",
                    "description": "Scheduled expiry time in milliseconds\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags for the Token\n"
                },
                "username": {
                    "type": "string",
                    "description": "Name of the user who created the Token\n"
                },
                "valid": {
                    "type": "boolean",
                    "description": "Boolean value to indicate if Token is valid or not.\n"
                },
                "validFrom": {
                    "type": "integer",
                    "description": "This is the time from which the Token is valid. The time is in milliseconds\n"
                },
                "validTo": {
                    "type": "integer",
                    "description": "This is the time till which the Token is valid. The time is in milliseconds\n"
                }
            },
            "required": [
                "accountId",
                "apikeyId",
                "apikeyType",
                "identifier",
                "name",
                "parentId",
                "scheduledExpireTime",
                "valid",
                "validFrom",
                "validTo"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "Account Identifier for the Entity\n"
                },
                "apikeyId": {
                    "type": "string",
                    "description": "Identifier of the API Key\n"
                },
                "apikeyType": {
                    "type": "string",
                    "description": "Type of the API Key\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Token\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email Id of the user who created the Token\n"
                },
                "encodedPassword": {
                    "type": "string",
                    "description": "Encoded password of the Token\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the Token\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Token\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "Parent Entity Identifier of the API Key\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity\n"
                },
                "scheduledExpireTime": {
                    "type": "integer",
                    "description": "Scheduled expiry time in milliseconds\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags for the Token\n"
                },
                "username": {
                    "type": "string",
                    "description": "Name of the user who created the Token\n"
                },
                "valid": {
                    "type": "boolean",
                    "description": "Boolean value to indicate if Token is valid or not.\n"
                },
                "validFrom": {
                    "type": "integer",
                    "description": "This is the time from which the Token is valid. The time is in milliseconds\n"
                },
                "validTo": {
                    "type": "integer",
                    "description": "This is the time till which the Token is valid. The time is in milliseconds\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "apikeyId",
                "apikeyType",
                "identifier",
                "parentId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Token resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier for the Entity\n"
                    },
                    "apikeyId": {
                        "type": "string",
                        "description": "Identifier of the API Key\n"
                    },
                    "apikeyType": {
                        "type": "string",
                        "description": "Type of the API Key\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Token\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email Id of the user who created the Token\n"
                    },
                    "encodedPassword": {
                        "type": "string",
                        "description": "Encoded password of the Token\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the Token\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Token\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity\n"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "Parent Entity Identifier of the API Key\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity\n"
                    },
                    "scheduledExpireTime": {
                        "type": "integer",
                        "description": "Scheduled expiry time in milliseconds\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Tags for the Token\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Name of the user who created the Token\n"
                    },
                    "valid": {
                        "type": "boolean",
                        "description": "Boolean value to indicate if Token is valid or not.\n"
                    },
                    "validFrom": {
                        "type": "integer",
                        "description": "This is the time from which the Token is valid. The time is in milliseconds\n"
                    },
                    "validTo": {
                        "type": "integer",
                        "description": "This is the time till which the Token is valid. The time is in milliseconds\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/triggers:Triggers": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.platform.Triggers(\"example\", {\n    identifier: \"identifier\",\n    orgId: \"orgIdentifer\",\n    projectId: \"projectIdentifier\",\n    name: \"name\",\n    targetId: \"pipelineIdentifier\",\n    yaml: `trigger:\n  name: name\n  identifier: identifier\n  enabled: true\n  description: \"\"\n  tags: {}\n  projectIdentifier: projectIdentifier\n  orgIdentifier: orgIdentifer\n  pipelineIdentifier: pipelineIdentifier\n  source:\n    type: Webhook\n    spec:\n      type: Github\n      spec:\n        type: Push\n        spec:\n          connectorRef: account.TestAccResourceConnectorGithub_Ssh_IZBeG\n          autoAbortPreviousExecutions: false\n          payloadConditions:\n          - key: changedFiles\n            operator: Equals\n            value: value\n          - key: targetBranch\n            operator: Equals\n            value: value\n          headerConditions: []\n          repoName: repoName\n          actions: []\n  inputYaml: |\n    pipeline: {}\\\\n\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.Triggers(\"example\",\n    identifier=\"identifier\",\n    org_id=\"orgIdentifer\",\n    project_id=\"projectIdentifier\",\n    name=\"name\",\n    target_id=\"pipelineIdentifier\",\n    yaml=\"\"\"trigger:\n  name: name\n  identifier: identifier\n  enabled: true\n  description: \"\"\n  tags: {}\n  projectIdentifier: projectIdentifier\n  orgIdentifier: orgIdentifer\n  pipelineIdentifier: pipelineIdentifier\n  source:\n    type: Webhook\n    spec:\n      type: Github\n      spec:\n        type: Push\n        spec:\n          connectorRef: account.TestAccResourceConnectorGithub_Ssh_IZBeG\n          autoAbortPreviousExecutions: false\n          payloadConditions:\n          - key: changedFiles\n            operator: Equals\n            value: value\n          - key: targetBranch\n            operator: Equals\n            value: value\n          headerConditions: []\n          repoName: repoName\n          actions: []\n  inputYaml: |\n    pipeline: {}\\n\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Platform.Triggers(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"orgIdentifer\",\n        ProjectId = \"projectIdentifier\",\n        Name = \"name\",\n        TargetId = \"pipelineIdentifier\",\n        Yaml = @\"trigger:\n  name: name\n  identifier: identifier\n  enabled: true\n  description: \"\"\"\"\n  tags: {}\n  projectIdentifier: projectIdentifier\n  orgIdentifier: orgIdentifer\n  pipelineIdentifier: pipelineIdentifier\n  source:\n    type: Webhook\n    spec:\n      type: Github\n      spec:\n        type: Push\n        spec:\n          connectorRef: account.TestAccResourceConnectorGithub_Ssh_IZBeG\n          autoAbortPreviousExecutions: false\n          payloadConditions:\n          - key: changedFiles\n            operator: Equals\n            value: value\n          - key: targetBranch\n            operator: Equals\n            value: value\n          headerConditions: []\n          repoName: repoName\n          actions: []\n  inputYaml: |\n    pipeline: {}\\n\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewTriggers(ctx, \"example\", \u0026platform.TriggersArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tOrgId:      pulumi.String(\"orgIdentifer\"),\n\t\t\tProjectId:  pulumi.String(\"projectIdentifier\"),\n\t\t\tName:       pulumi.String(\"name\"),\n\t\t\tTargetId:   pulumi.String(\"pipelineIdentifier\"),\n\t\t\tYaml: pulumi.String(`trigger:\n  name: name\n  identifier: identifier\n  enabled: true\n  description: \"\"\n  tags: {}\n  projectIdentifier: projectIdentifier\n  orgIdentifier: orgIdentifer\n  pipelineIdentifier: pipelineIdentifier\n  source:\n    type: Webhook\n    spec:\n      type: Github\n      spec:\n        type: Push\n        spec:\n          connectorRef: account.TestAccResourceConnectorGithub_Ssh_IZBeG\n          autoAbortPreviousExecutions: false\n          payloadConditions:\n          - key: changedFiles\n            operator: Equals\n            value: value\n          - key: targetBranch\n            operator: Equals\n            value: value\n          headerConditions: []\n          repoName: repoName\n          actions: []\n  inputYaml: |\n    pipeline: {}\\n\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Triggers;\nimport com.pulumi.harness.platform.TriggersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Triggers(\"example\", TriggersArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"orgIdentifer\")\n            .projectId(\"projectIdentifier\")\n            .name(\"name\")\n            .targetId(\"pipelineIdentifier\")\n            .yaml(\"\"\"\ntrigger:\n  name: name\n  identifier: identifier\n  enabled: true\n  description: \"\"\n  tags: {}\n  projectIdentifier: projectIdentifier\n  orgIdentifier: orgIdentifer\n  pipelineIdentifier: pipelineIdentifier\n  source:\n    type: Webhook\n    spec:\n      type: Github\n      spec:\n        type: Push\n        spec:\n          connectorRef: account.TestAccResourceConnectorGithub_Ssh_IZBeG\n          autoAbortPreviousExecutions: false\n          payloadConditions:\n          - key: changedFiles\n            operator: Equals\n            value: value\n          - key: targetBranch\n            operator: Equals\n            value: value\n          headerConditions: []\n          repoName: repoName\n          actions: []\n  inputYaml: |\n    pipeline: {}\\n\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:platform:Triggers\n    properties:\n      identifier: identifier\n      orgId: orgIdentifer\n      projectId: projectIdentifier\n      name: name\n      targetId: pipelineIdentifier\n      yaml: |\n        trigger:\n          name: name\n          identifier: identifier\n          enabled: true\n          description: \"\"\n          tags: {}\n          projectIdentifier: projectIdentifier\n          orgIdentifier: orgIdentifer\n          pipelineIdentifier: pipelineIdentifier\n          source:\n            type: Webhook\n            spec:\n              type: Github\n              spec:\n                type: Push\n                spec:\n                  connectorRef: account.TestAccResourceConnectorGithub_Ssh_IZBeG\n                  autoAbortPreviousExecutions: false\n                  payloadConditions:\n                  - key: changedFiles\n                    operator: Equals\n                    value: value\n                  - key: targetBranch\n                    operator: Equals\n                    value: value\n                  headerConditions: []\n                  repoName: repoName\n                  actions: []\n          inputYaml: |\n            pipeline: {}\\n\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport trigger \n\n```sh\n$ pulumi import harness:platform/triggers:Triggers example \u003corg_id\u003e/\u003cproject_id\u003e/\u003ctarget_id\u003e/\u003ctriggers_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "ifMatch": {
                    "type": "string",
                    "description": "if-Match\n"
                },
                "ignoreError": {
                    "type": "boolean",
                    "description": "ignore error default false\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "targetId": {
                    "type": "string",
                    "description": "Identifier of the target pipeline\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "trigger yaml. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "orgId",
                "projectId",
                "targetId",
                "yaml"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "ifMatch": {
                    "type": "string",
                    "description": "if-Match\n"
                },
                "ignoreError": {
                    "type": "boolean",
                    "description": "ignore error default false\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "targetId": {
                    "type": "string",
                    "description": "Identifier of the target pipeline\n"
                },
                "yaml": {
                    "type": "string",
                    "description": "trigger yaml. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "orgId",
                "projectId",
                "targetId",
                "yaml"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Triggers resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "ifMatch": {
                        "type": "string",
                        "description": "if-Match\n"
                    },
                    "ignoreError": {
                        "type": "boolean",
                        "description": "ignore error default false\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "targetId": {
                        "type": "string",
                        "description": "Identifier of the target pipeline\n"
                    },
                    "yaml": {
                        "type": "string",
                        "description": "trigger yaml. In YAML, to reference an entity at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference an entity at the account scope, prefix 'account` to the expression: account.{identifier}. For eg, to reference a connector with identifier 'connectorId' at the organization scope in a stage mention it as connectorRef: org.connectorId.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/user:User": {
            "description": "Resource for creating a Harness User. This requires your authentication mechanism to be set to SAML, LDAP, or OAuth, and the feature flag AUTO_ACCEPT_SAML_ACCOUNT_INVITES to be enabled.\n\n## Import\n\nImport account level\n\n```sh\n$ pulumi import harness:platform/user:User john_doe \u003cemail_id\u003e\n```\n\nImport org level \n\n```sh\n$ pulumi import harness:platform/user:User john_doe \u003cemail_id\u003e/\u003corg_id\u003e\n```\n\nImport project level\n\n```sh\n$ pulumi import harness:platform/user:User john_doe \u003cemail_id\u003e/\u003corg_id\u003e/\u003cproject_id\u003e\n```\n\n",
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "description": "Whether or not the user account is disabled.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n"
                },
                "externallyManaged": {
                    "type": "boolean",
                    "description": "Whether or not the user account is externally managed.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the user.\n"
                },
                "locked": {
                    "type": "boolean",
                    "description": "Whether or not the user account is locked.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the user.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the user.\n"
                },
                "roleBindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/UserRoleBinding:UserRoleBinding"
                    },
                    "description": "Role Bindings of the user. Cannot be updated.\n"
                },
                "userGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The user group of the user. Cannot be updated.\n"
                }
            },
            "required": [
                "disabled",
                "email",
                "externallyManaged",
                "identifier",
                "locked",
                "name",
                "userGroups"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization identifier of the user.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project identifier of the user.\n"
                },
                "roleBindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/UserRoleBinding:UserRoleBinding"
                    },
                    "description": "Role Bindings of the user. Cannot be updated.\n"
                },
                "userGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The user group of the user. Cannot be updated.\n"
                }
            },
            "requiredInputs": [
                "email",
                "userGroups"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "disabled": {
                        "type": "boolean",
                        "description": "Whether or not the user account is disabled.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n"
                    },
                    "externallyManaged": {
                        "type": "boolean",
                        "description": "Whether or not the user account is externally managed.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the user.\n"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Whether or not the user account is locked.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the user.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the user.\n"
                    },
                    "roleBindings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/UserRoleBinding:UserRoleBinding"
                        },
                        "description": "Role Bindings of the user. Cannot be updated.\n"
                    },
                    "userGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The user group of the user. Cannot be updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/usergroup:Usergroup": {
            "description": "Resource for creating a Harness User Group. Linking SSO providers with User Groups:\n\n\t\tThe following fields need to be populated for LDAP SSO Providers:\n\t\t\n\t\t- linked_sso_id\n\t\t\n\t\t- linked_sso_display_name\n\t\t\n\t\t- sso_group_id\n\t\t\n\t\t- sso_group_name\n\t\t\n\t\t- linked_sso_type\n\t\t\n\t\t- sso_linked\n\t\t\n\t\tThe following fields need to be populated for SAML SSO Providers:\n\t\t\n\t\t- linked_sso_id\n\t\t\n\t\t- linked_sso_display_name\n\t\t\n\t\t- sso_group_name\n\t\t\n\t\t- sso_group_id // same as sso_group_name\n\t\t\n\t\t- linked_sso_type\n\t\t\n\t\t- sso_linked\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst ssoTypeSaml = new harness.platform.Usergroup(\"sso_type_saml\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    linkedSsoId: \"linked_sso_id\",\n    externallyManaged: false,\n    users: [\"user_id\"],\n    notificationConfigs: [\n        {\n            type: \"SLACK\",\n            slackWebhookUrl: \"https://google.com\",\n        },\n        {\n            type: \"EMAIL\",\n            groupEmail: \"email@email.com\",\n            sendEmailToAllUsers: true,\n        },\n        {\n            type: \"MSTEAMS\",\n            microsoftTeamsWebhookUrl: \"https://google.com\",\n        },\n        {\n            type: \"PAGERDUTY\",\n            pagerDutyKey: \"pagerDutyKey\",\n        },\n    ],\n    linkedSsoDisplayName: \"linked_sso_display_name\",\n    ssoGroupId: \"sso_group_name\",\n    ssoGroupName: \"sso_group_name\",\n    linkedSsoType: \"SAML\",\n    ssoLinked: true,\n});\nconst ssoTypeLdap = new harness.platform.Usergroup(\"sso_type_ldap\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    linkedSsoId: \"linked_sso_id\",\n    externallyManaged: false,\n    users: [\"user_id\"],\n    notificationConfigs: [\n        {\n            type: \"SLACK\",\n            slackWebhookUrl: \"https://google.com\",\n        },\n        {\n            type: \"EMAIL\",\n            groupEmail: \"email@email.com\",\n            sendEmailToAllUsers: true,\n        },\n        {\n            type: \"MSTEAMS\",\n            microsoftTeamsWebhookUrl: \"https://google.com\",\n        },\n        {\n            type: \"PAGERDUTY\",\n            pagerDutyKey: \"pagerDutyKey\",\n        },\n    ],\n    linkedSsoDisplayName: \"linked_sso_display_name\",\n    ssoGroupId: \"sso_group_id\",\n    ssoGroupName: \"sso_group_name\",\n    linkedSsoType: \"LDAP\",\n    ssoLinked: true,\n});\n// Create user group by adding user emails\nconst example = new harness.platform.Usergroup(\"example\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    linkedSsoId: \"linked_sso_id\",\n    externallyManaged: false,\n    userEmails: [\"user@email.com\"],\n    notificationConfigs: [\n        {\n            type: \"SLACK\",\n            slackWebhookUrl: \"https://google.com\",\n        },\n        {\n            type: \"EMAIL\",\n            groupEmail: \"email@email.com\",\n            sendEmailToAllUsers: true,\n        },\n        {\n            type: \"MSTEAMS\",\n            microsoftTeamsWebhookUrl: \"https://google.com\",\n        },\n        {\n            type: \"PAGERDUTY\",\n            pagerDutyKey: \"pagerDutyKey\",\n        },\n    ],\n    linkedSsoDisplayName: \"linked_sso_display_name\",\n    ssoGroupId: \"sso_group_name\",\n    ssoGroupName: \"sso_group_name\",\n    linkedSsoType: \"SAML\",\n    ssoLinked: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nsso_type_saml = harness.platform.Usergroup(\"sso_type_saml\",\n    identifier=\"identifier\",\n    name=\"name\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    linked_sso_id=\"linked_sso_id\",\n    externally_managed=False,\n    users=[\"user_id\"],\n    notification_configs=[\n        harness.platform.UsergroupNotificationConfigArgs(\n            type=\"SLACK\",\n            slack_webhook_url=\"https://google.com\",\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            type=\"EMAIL\",\n            group_email=\"email@email.com\",\n            send_email_to_all_users=True,\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            type=\"MSTEAMS\",\n            microsoft_teams_webhook_url=\"https://google.com\",\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            type=\"PAGERDUTY\",\n            pager_duty_key=\"pagerDutyKey\",\n        ),\n    ],\n    linked_sso_display_name=\"linked_sso_display_name\",\n    sso_group_id=\"sso_group_name\",\n    sso_group_name=\"sso_group_name\",\n    linked_sso_type=\"SAML\",\n    sso_linked=True)\nsso_type_ldap = harness.platform.Usergroup(\"sso_type_ldap\",\n    identifier=\"identifier\",\n    name=\"name\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    linked_sso_id=\"linked_sso_id\",\n    externally_managed=False,\n    users=[\"user_id\"],\n    notification_configs=[\n        harness.platform.UsergroupNotificationConfigArgs(\n            type=\"SLACK\",\n            slack_webhook_url=\"https://google.com\",\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            type=\"EMAIL\",\n            group_email=\"email@email.com\",\n            send_email_to_all_users=True,\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            type=\"MSTEAMS\",\n            microsoft_teams_webhook_url=\"https://google.com\",\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            type=\"PAGERDUTY\",\n            pager_duty_key=\"pagerDutyKey\",\n        ),\n    ],\n    linked_sso_display_name=\"linked_sso_display_name\",\n    sso_group_id=\"sso_group_id\",\n    sso_group_name=\"sso_group_name\",\n    linked_sso_type=\"LDAP\",\n    sso_linked=True)\n# Create user group by adding user emails\nexample = harness.platform.Usergroup(\"example\",\n    identifier=\"identifier\",\n    name=\"name\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    linked_sso_id=\"linked_sso_id\",\n    externally_managed=False,\n    user_emails=[\"user@email.com\"],\n    notification_configs=[\n        harness.platform.UsergroupNotificationConfigArgs(\n            type=\"SLACK\",\n            slack_webhook_url=\"https://google.com\",\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            type=\"EMAIL\",\n            group_email=\"email@email.com\",\n            send_email_to_all_users=True,\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            type=\"MSTEAMS\",\n            microsoft_teams_webhook_url=\"https://google.com\",\n        ),\n        harness.platform.UsergroupNotificationConfigArgs(\n            type=\"PAGERDUTY\",\n            pager_duty_key=\"pagerDutyKey\",\n        ),\n    ],\n    linked_sso_display_name=\"linked_sso_display_name\",\n    sso_group_id=\"sso_group_name\",\n    sso_group_name=\"sso_group_name\",\n    linked_sso_type=\"SAML\",\n    sso_linked=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ssoTypeSaml = new Harness.Platform.Usergroup(\"sso_type_saml\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        LinkedSsoId = \"linked_sso_id\",\n        ExternallyManaged = false,\n        Users = new[]\n        {\n            \"user_id\",\n        },\n        NotificationConfigs = new[]\n        {\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                Type = \"SLACK\",\n                SlackWebhookUrl = \"https://google.com\",\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                Type = \"EMAIL\",\n                GroupEmail = \"email@email.com\",\n                SendEmailToAllUsers = true,\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                Type = \"MSTEAMS\",\n                MicrosoftTeamsWebhookUrl = \"https://google.com\",\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                Type = \"PAGERDUTY\",\n                PagerDutyKey = \"pagerDutyKey\",\n            },\n        },\n        LinkedSsoDisplayName = \"linked_sso_display_name\",\n        SsoGroupId = \"sso_group_name\",\n        SsoGroupName = \"sso_group_name\",\n        LinkedSsoType = \"SAML\",\n        SsoLinked = true,\n    });\n\n    var ssoTypeLdap = new Harness.Platform.Usergroup(\"sso_type_ldap\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        LinkedSsoId = \"linked_sso_id\",\n        ExternallyManaged = false,\n        Users = new[]\n        {\n            \"user_id\",\n        },\n        NotificationConfigs = new[]\n        {\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                Type = \"SLACK\",\n                SlackWebhookUrl = \"https://google.com\",\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                Type = \"EMAIL\",\n                GroupEmail = \"email@email.com\",\n                SendEmailToAllUsers = true,\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                Type = \"MSTEAMS\",\n                MicrosoftTeamsWebhookUrl = \"https://google.com\",\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                Type = \"PAGERDUTY\",\n                PagerDutyKey = \"pagerDutyKey\",\n            },\n        },\n        LinkedSsoDisplayName = \"linked_sso_display_name\",\n        SsoGroupId = \"sso_group_id\",\n        SsoGroupName = \"sso_group_name\",\n        LinkedSsoType = \"LDAP\",\n        SsoLinked = true,\n    });\n\n    // Create user group by adding user emails\n    var example = new Harness.Platform.Usergroup(\"example\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        LinkedSsoId = \"linked_sso_id\",\n        ExternallyManaged = false,\n        UserEmails = new[]\n        {\n            \"user@email.com\",\n        },\n        NotificationConfigs = new[]\n        {\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                Type = \"SLACK\",\n                SlackWebhookUrl = \"https://google.com\",\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                Type = \"EMAIL\",\n                GroupEmail = \"email@email.com\",\n                SendEmailToAllUsers = true,\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                Type = \"MSTEAMS\",\n                MicrosoftTeamsWebhookUrl = \"https://google.com\",\n            },\n            new Harness.Platform.Inputs.UsergroupNotificationConfigArgs\n            {\n                Type = \"PAGERDUTY\",\n                PagerDutyKey = \"pagerDutyKey\",\n            },\n        },\n        LinkedSsoDisplayName = \"linked_sso_display_name\",\n        SsoGroupId = \"sso_group_name\",\n        SsoGroupName = \"sso_group_name\",\n        LinkedSsoType = \"SAML\",\n        SsoLinked = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewUsergroup(ctx, \"sso_type_saml\", \u0026platform.UsergroupArgs{\n\t\t\tIdentifier:        pulumi.String(\"identifier\"),\n\t\t\tName:              pulumi.String(\"name\"),\n\t\t\tOrgId:             pulumi.String(\"org_id\"),\n\t\t\tProjectId:         pulumi.String(\"project_id\"),\n\t\t\tLinkedSsoId:       pulumi.String(\"linked_sso_id\"),\n\t\t\tExternallyManaged: pulumi.Bool(false),\n\t\t\tUsers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user_id\"),\n\t\t\t},\n\t\t\tNotificationConfigs: platform.UsergroupNotificationConfigArray{\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tType:            pulumi.String(\"SLACK\"),\n\t\t\t\t\tSlackWebhookUrl: pulumi.String(\"https://google.com\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tType:                pulumi.String(\"EMAIL\"),\n\t\t\t\t\tGroupEmail:          pulumi.String(\"email@email.com\"),\n\t\t\t\t\tSendEmailToAllUsers: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tType:                     pulumi.String(\"MSTEAMS\"),\n\t\t\t\t\tMicrosoftTeamsWebhookUrl: pulumi.String(\"https://google.com\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tType:         pulumi.String(\"PAGERDUTY\"),\n\t\t\t\t\tPagerDutyKey: pulumi.String(\"pagerDutyKey\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tLinkedSsoDisplayName: pulumi.String(\"linked_sso_display_name\"),\n\t\t\tSsoGroupId:           pulumi.String(\"sso_group_name\"),\n\t\t\tSsoGroupName:         pulumi.String(\"sso_group_name\"),\n\t\t\tLinkedSsoType:        pulumi.String(\"SAML\"),\n\t\t\tSsoLinked:            pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewUsergroup(ctx, \"sso_type_ldap\", \u0026platform.UsergroupArgs{\n\t\t\tIdentifier:        pulumi.String(\"identifier\"),\n\t\t\tName:              pulumi.String(\"name\"),\n\t\t\tOrgId:             pulumi.String(\"org_id\"),\n\t\t\tProjectId:         pulumi.String(\"project_id\"),\n\t\t\tLinkedSsoId:       pulumi.String(\"linked_sso_id\"),\n\t\t\tExternallyManaged: pulumi.Bool(false),\n\t\t\tUsers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user_id\"),\n\t\t\t},\n\t\t\tNotificationConfigs: platform.UsergroupNotificationConfigArray{\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tType:            pulumi.String(\"SLACK\"),\n\t\t\t\t\tSlackWebhookUrl: pulumi.String(\"https://google.com\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tType:                pulumi.String(\"EMAIL\"),\n\t\t\t\t\tGroupEmail:          pulumi.String(\"email@email.com\"),\n\t\t\t\t\tSendEmailToAllUsers: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tType:                     pulumi.String(\"MSTEAMS\"),\n\t\t\t\t\tMicrosoftTeamsWebhookUrl: pulumi.String(\"https://google.com\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tType:         pulumi.String(\"PAGERDUTY\"),\n\t\t\t\t\tPagerDutyKey: pulumi.String(\"pagerDutyKey\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tLinkedSsoDisplayName: pulumi.String(\"linked_sso_display_name\"),\n\t\t\tSsoGroupId:           pulumi.String(\"sso_group_id\"),\n\t\t\tSsoGroupName:         pulumi.String(\"sso_group_name\"),\n\t\t\tLinkedSsoType:        pulumi.String(\"LDAP\"),\n\t\t\tSsoLinked:            pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create user group by adding user emails\n\t\t_, err = platform.NewUsergroup(ctx, \"example\", \u0026platform.UsergroupArgs{\n\t\t\tIdentifier:        pulumi.String(\"identifier\"),\n\t\t\tName:              pulumi.String(\"name\"),\n\t\t\tOrgId:             pulumi.String(\"org_id\"),\n\t\t\tProjectId:         pulumi.String(\"project_id\"),\n\t\t\tLinkedSsoId:       pulumi.String(\"linked_sso_id\"),\n\t\t\tExternallyManaged: pulumi.Bool(false),\n\t\t\tUserEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user@email.com\"),\n\t\t\t},\n\t\t\tNotificationConfigs: platform.UsergroupNotificationConfigArray{\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tType:            pulumi.String(\"SLACK\"),\n\t\t\t\t\tSlackWebhookUrl: pulumi.String(\"https://google.com\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tType:                pulumi.String(\"EMAIL\"),\n\t\t\t\t\tGroupEmail:          pulumi.String(\"email@email.com\"),\n\t\t\t\t\tSendEmailToAllUsers: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tType:                     pulumi.String(\"MSTEAMS\"),\n\t\t\t\t\tMicrosoftTeamsWebhookUrl: pulumi.String(\"https://google.com\"),\n\t\t\t\t},\n\t\t\t\t\u0026platform.UsergroupNotificationConfigArgs{\n\t\t\t\t\tType:         pulumi.String(\"PAGERDUTY\"),\n\t\t\t\t\tPagerDutyKey: pulumi.String(\"pagerDutyKey\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tLinkedSsoDisplayName: pulumi.String(\"linked_sso_display_name\"),\n\t\t\tSsoGroupId:           pulumi.String(\"sso_group_name\"),\n\t\t\tSsoGroupName:         pulumi.String(\"sso_group_name\"),\n\t\t\tLinkedSsoType:        pulumi.String(\"SAML\"),\n\t\t\tSsoLinked:            pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Usergroup;\nimport com.pulumi.harness.platform.UsergroupArgs;\nimport com.pulumi.harness.platform.inputs.UsergroupNotificationConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ssoTypeSaml = new Usergroup(\"ssoTypeSaml\", UsergroupArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .linkedSsoId(\"linked_sso_id\")\n            .externallyManaged(false)\n            .users(\"user_id\")\n            .notificationConfigs(            \n                UsergroupNotificationConfigArgs.builder()\n                    .type(\"SLACK\")\n                    .slackWebhookUrl(\"https://google.com\")\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .type(\"EMAIL\")\n                    .groupEmail(\"email@email.com\")\n                    .sendEmailToAllUsers(true)\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .type(\"MSTEAMS\")\n                    .microsoftTeamsWebhookUrl(\"https://google.com\")\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .type(\"PAGERDUTY\")\n                    .pagerDutyKey(\"pagerDutyKey\")\n                    .build())\n            .linkedSsoDisplayName(\"linked_sso_display_name\")\n            .ssoGroupId(\"sso_group_name\")\n            .ssoGroupName(\"sso_group_name\")\n            .linkedSsoType(\"SAML\")\n            .ssoLinked(true)\n            .build());\n\n        var ssoTypeLdap = new Usergroup(\"ssoTypeLdap\", UsergroupArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .linkedSsoId(\"linked_sso_id\")\n            .externallyManaged(false)\n            .users(\"user_id\")\n            .notificationConfigs(            \n                UsergroupNotificationConfigArgs.builder()\n                    .type(\"SLACK\")\n                    .slackWebhookUrl(\"https://google.com\")\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .type(\"EMAIL\")\n                    .groupEmail(\"email@email.com\")\n                    .sendEmailToAllUsers(true)\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .type(\"MSTEAMS\")\n                    .microsoftTeamsWebhookUrl(\"https://google.com\")\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .type(\"PAGERDUTY\")\n                    .pagerDutyKey(\"pagerDutyKey\")\n                    .build())\n            .linkedSsoDisplayName(\"linked_sso_display_name\")\n            .ssoGroupId(\"sso_group_id\")\n            .ssoGroupName(\"sso_group_name\")\n            .linkedSsoType(\"LDAP\")\n            .ssoLinked(true)\n            .build());\n\n        // Create user group by adding user emails\n        var example = new Usergroup(\"example\", UsergroupArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .linkedSsoId(\"linked_sso_id\")\n            .externallyManaged(false)\n            .userEmails(\"user@email.com\")\n            .notificationConfigs(            \n                UsergroupNotificationConfigArgs.builder()\n                    .type(\"SLACK\")\n                    .slackWebhookUrl(\"https://google.com\")\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .type(\"EMAIL\")\n                    .groupEmail(\"email@email.com\")\n                    .sendEmailToAllUsers(true)\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .type(\"MSTEAMS\")\n                    .microsoftTeamsWebhookUrl(\"https://google.com\")\n                    .build(),\n                UsergroupNotificationConfigArgs.builder()\n                    .type(\"PAGERDUTY\")\n                    .pagerDutyKey(\"pagerDutyKey\")\n                    .build())\n            .linkedSsoDisplayName(\"linked_sso_display_name\")\n            .ssoGroupId(\"sso_group_name\")\n            .ssoGroupName(\"sso_group_name\")\n            .linkedSsoType(\"SAML\")\n            .ssoLinked(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ssoTypeSaml:\n    type: harness:platform:Usergroup\n    name: sso_type_saml\n    properties:\n      identifier: identifier\n      name: name\n      orgId: org_id\n      projectId: project_id\n      linkedSsoId: linked_sso_id\n      externallyManaged: false\n      users:\n        - user_id\n      notificationConfigs:\n        - type: SLACK\n          slackWebhookUrl: https://google.com\n        - type: EMAIL\n          groupEmail: email@email.com\n          sendEmailToAllUsers: true\n        - type: MSTEAMS\n          microsoftTeamsWebhookUrl: https://google.com\n        - type: PAGERDUTY\n          pagerDutyKey: pagerDutyKey\n      linkedSsoDisplayName: linked_sso_display_name\n      ssoGroupId: sso_group_name\n      ssoGroupName: sso_group_name\n      linkedSsoType: SAML\n      ssoLinked: true\n  ssoTypeLdap:\n    type: harness:platform:Usergroup\n    name: sso_type_ldap\n    properties:\n      identifier: identifier\n      name: name\n      orgId: org_id\n      projectId: project_id\n      linkedSsoId: linked_sso_id\n      externallyManaged: false\n      users:\n        - user_id\n      notificationConfigs:\n        - type: SLACK\n          slackWebhookUrl: https://google.com\n        - type: EMAIL\n          groupEmail: email@email.com\n          sendEmailToAllUsers: true\n        - type: MSTEAMS\n          microsoftTeamsWebhookUrl: https://google.com\n        - type: PAGERDUTY\n          pagerDutyKey: pagerDutyKey\n      linkedSsoDisplayName: linked_sso_display_name\n      ssoGroupId: sso_group_id\n      ssoGroupName: sso_group_name\n      linkedSsoType: LDAP\n      ssoLinked: true\n  # Create user group by adding user emails\n  example:\n    type: harness:platform:Usergroup\n    properties:\n      identifier: identifier\n      name: name\n      orgId: org_id\n      projectId: project_id\n      linkedSsoId: linked_sso_id\n      externallyManaged: false\n      userEmails:\n        - user@email.com\n      notificationConfigs:\n        - type: SLACK\n          slackWebhookUrl: https://google.com\n        - type: EMAIL\n          groupEmail: email@email.com\n          sendEmailToAllUsers: true\n        - type: MSTEAMS\n          microsoftTeamsWebhookUrl: https://google.com\n        - type: PAGERDUTY\n          pagerDutyKey: pagerDutyKey\n      linkedSsoDisplayName: linked_sso_display_name\n      ssoGroupId: sso_group_name\n      ssoGroupName: sso_group_name\n      linkedSsoType: SAML\n      ssoLinked: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level user group\n\n```sh\n$ pulumi import harness:platform/usergroup:Usergroup example \u003cusergroup_id\u003e\n```\n\nImport org level user group\n\n```sh\n$ pulumi import harness:platform/usergroup:Usergroup example \u003cord_id\u003e/\u003cusergroup_id\u003e\n```\n\nImport project level user group\n\n```sh\n$ pulumi import harness:platform/usergroup:Usergroup example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cusergroup_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "externallyManaged": {
                    "type": "boolean",
                    "description": "Whether the user group is externally managed.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "linkedSsoDisplayName": {
                    "type": "string",
                    "description": "Name of the linked SSO.\n"
                },
                "linkedSsoId": {
                    "type": "string",
                    "description": "The SSO account ID that the user group is linked to.\n"
                },
                "linkedSsoType": {
                    "type": "string",
                    "description": "Type of linked SSO.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "notificationConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/UsergroupNotificationConfig:UsergroupNotificationConfig"
                    },
                    "description": "List of notification settings.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "ssoGroupId": {
                    "type": "string",
                    "description": "Identifier of the userGroup in SSO.\n"
                },
                "ssoGroupName": {
                    "type": "string",
                    "description": "Name of the SSO userGroup.\n"
                },
                "ssoLinked": {
                    "type": "boolean",
                    "description": "Whether sso is linked or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "userEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of user emails in the UserGroup. Either provide list of users or list of user emails.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of users in the UserGroup. Either provide list of users or list of user emails.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "ssoLinked"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "externallyManaged": {
                    "type": "boolean",
                    "description": "Whether the user group is externally managed.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "linkedSsoDisplayName": {
                    "type": "string",
                    "description": "Name of the linked SSO.\n"
                },
                "linkedSsoId": {
                    "type": "string",
                    "description": "The SSO account ID that the user group is linked to.\n"
                },
                "linkedSsoType": {
                    "type": "string",
                    "description": "Type of linked SSO.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "notificationConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:platform/UsergroupNotificationConfig:UsergroupNotificationConfig"
                    },
                    "description": "List of notification settings.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "ssoGroupId": {
                    "type": "string",
                    "description": "Identifier of the userGroup in SSO.\n"
                },
                "ssoGroupName": {
                    "type": "string",
                    "description": "Name of the SSO userGroup.\n"
                },
                "ssoLinked": {
                    "type": "boolean",
                    "description": "Whether sso is linked or not.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "userEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of user emails in the UserGroup. Either provide list of users or list of user emails.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of users in the UserGroup. Either provide list of users or list of user emails.\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Usergroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "externallyManaged": {
                        "type": "boolean",
                        "description": "Whether the user group is externally managed.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "linkedSsoDisplayName": {
                        "type": "string",
                        "description": "Name of the linked SSO.\n"
                    },
                    "linkedSsoId": {
                        "type": "string",
                        "description": "The SSO account ID that the user group is linked to.\n"
                    },
                    "linkedSsoType": {
                        "type": "string",
                        "description": "Type of linked SSO.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "notificationConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/UsergroupNotificationConfig:UsergroupNotificationConfig"
                        },
                        "description": "List of notification settings.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "ssoGroupId": {
                        "type": "string",
                        "description": "Identifier of the userGroup in SSO.\n"
                    },
                    "ssoGroupName": {
                        "type": "string",
                        "description": "Name of the SSO userGroup.\n"
                    },
                    "ssoLinked": {
                        "type": "boolean",
                        "description": "Whether sso is linked or not.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "userEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of user emails in the UserGroup. Either provide list of users or list of user emails.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of users in the UserGroup. Either provide list of users or list of user emails.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/variables:Variables": {
            "description": "Resource for creating a Harness Variables.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = new harness.platform.Variables(\"test\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    type: \"String\",\n    spec: {\n        valueType: \"FIXED\",\n        fixedValue: \"fixedValue\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.Variables(\"test\",\n    identifier=\"identifier\",\n    name=\"name\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    type=\"String\",\n    spec=harness.platform.VariablesSpecArgs(\n        value_type=\"FIXED\",\n        fixed_value=\"fixedValue\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Harness.Platform.Variables(\"test\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Type = \"String\",\n        Spec = new Harness.Platform.Inputs.VariablesSpecArgs\n        {\n            ValueType = \"FIXED\",\n            FixedValue = \"fixedValue\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewVariables(ctx, \"test\", \u0026platform.VariablesArgs{\n\t\t\tIdentifier: pulumi.String(\"identifier\"),\n\t\t\tName:       pulumi.String(\"name\"),\n\t\t\tOrgId:      pulumi.String(\"org_id\"),\n\t\t\tProjectId:  pulumi.String(\"project_id\"),\n\t\t\tType:       pulumi.String(\"String\"),\n\t\t\tSpec: \u0026platform.VariablesSpecArgs{\n\t\t\t\tValueType:  pulumi.String(\"FIXED\"),\n\t\t\t\tFixedValue: pulumi.String(\"fixedValue\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.Variables;\nimport com.pulumi.harness.platform.VariablesArgs;\nimport com.pulumi.harness.platform.inputs.VariablesSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Variables(\"test\", VariablesArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .type(\"String\")\n            .spec(VariablesSpecArgs.builder()\n                .valueType(\"FIXED\")\n                .fixedValue(\"fixedValue\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: harness:platform:Variables\n    properties:\n      identifier: identifier\n      name: name\n      orgId: org_id\n      projectId: project_id\n      type: String\n      spec:\n        valueType: FIXED\n        fixedValue: fixedValue\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level variables\n\n```sh\n$ pulumi import harness:platform/variables:Variables example \u003cvariable_id\u003e\n```\n\nImport org level variables\n\n```sh\n$ pulumi import harness:platform/variables:Variables example \u003cord_id\u003e/\u003cvariable_id\u003e\n```\n\nImport project level variables\n\n```sh\n$ pulumi import harness:platform/variables:Variables example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cvariable_id\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the entity\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Variable\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity\n"
                },
                "spec": {
                    "$ref": "#/types/harness:platform/VariablesSpec:VariablesSpec",
                    "description": "List of Spec Fields.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of Variable\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "spec",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the entity\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Variable\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Organization Identifier for the Entity\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project Identifier for the Entity\n"
                },
                "spec": {
                    "$ref": "#/types/harness:platform/VariablesSpec:VariablesSpec",
                    "description": "List of Spec Fields.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of Variable\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "spec",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Variables resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the entity\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Variable\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity\n"
                    },
                    "spec": {
                        "$ref": "#/types/harness:platform/VariablesSpec:VariablesSpec",
                        "description": "List of Spec Fields.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Variable\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:platform/vaultConnector:VaultConnector": {
            "description": "Resource for creating a HashiCorp Vault Secret Manager connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst awsAuth = new harness.platform.VaultConnector(\"aws_auth\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    awsRegion: \"aws_region\",\n    basePath: \"base_path\",\n    accessType: \"AWS_IAM\",\n    \"default\": false,\n    xvaultAwsIamServerId: `account.${test.id}`,\n    readOnly: true,\n    renewalIntervalMinutes: 60,\n    secretEngineManuallyConfigured: true,\n    secretEngineName: \"secret_engine_name\",\n    secretEngineVersion: 2,\n    vaultAwsIamRole: \"vault_aws_iam_role\",\n    useAwsIam: true,\n    useK8sAuth: false,\n    useVaultAgent: false,\n    delegateSelectors: [\"harness-delegate\"],\n    vaultUrl: \"https://vault_url.com\",\n});\nconst appRole = new harness.platform.VaultConnector(\"app_role\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    appRoleId: \"app_role_id\",\n    basePath: \"base_path\",\n    accessType: \"APP_ROLE\",\n    \"default\": false,\n    secretId: `account.${test.id}`,\n    readOnly: true,\n    renewalIntervalMinutes: 60,\n    secretEngineManuallyConfigured: true,\n    secretEngineName: \"secret_engine_name\",\n    secretEngineVersion: 2,\n    useAwsIam: false,\n    useK8sAuth: false,\n    useVaultAgent: false,\n    renewAppRoleToken: true,\n    delegateSelectors: [\"harness-delegate\"],\n    vaultUrl: \"https://vault_url.com\",\n});\nconst k8sAuth = new harness.platform.VaultConnector(\"k8s_auth\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    authToken: `account.${test.id}`,\n    basePath: \"base_path\",\n    accessType: \"K8s_AUTH\",\n    \"default\": false,\n    k8sAuthEndpoint: \"k8s_auth_endpoint\",\n    namespace: \"namespace\",\n    readOnly: true,\n    renewalIntervalMinutes: 10,\n    secretEngineManuallyConfigured: true,\n    secretEngineName: \"secret_engine_name\",\n    secretEngineVersion: 2,\n    serviceAccountTokenPath: \"service_account_token_path\",\n    useAwsIam: false,\n    useK8sAuth: true,\n    useVaultAgent: false,\n    vaultK8sAuthRole: \"vault_k8s_auth_role\",\n    vaultAwsIamRole: \"vault_aws_iam_role\",\n    delegateSelectors: [\"harness-delegate\"],\n    vaultUrl: \"https://vault_url.com\",\n});\nconst vaultAgent = new harness.platform.VaultConnector(\"vault_agent\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    authToken: `account.${test.id}`,\n    basePath: \"base_path\",\n    accessType: \"VAULT_AGENT\",\n    \"default\": false,\n    namespace: \"namespace\",\n    readOnly: true,\n    renewalIntervalMinutes: 10,\n    secretEngineManuallyConfigured: true,\n    secretEngineName: \"secret_engine_name\",\n    secretEngineVersion: 2,\n    useAwsIam: false,\n    useK8sAuth: false,\n    useVaultAgent: true,\n    sinkPath: \"sink_path\",\n    delegateSelectors: [\"harness-delegate\"],\n    vaultUrl: \"https://vault_url.com\",\n});\nconst token = new harness.platform.VaultConnector(\"token\", {\n    identifier: \"identifier\",\n    name: \"name\",\n    description: \"test\",\n    tags: [\"foo:bar\"],\n    authToken: `account.${test.id}`,\n    basePath: \"base_path\",\n    accessType: \"TOKEN\",\n    \"default\": false,\n    namespace: \"namespace\",\n    readOnly: true,\n    renewalIntervalMinutes: 10,\n    secretEngineManuallyConfigured: true,\n    secretEngineName: \"secret_engine_name\",\n    secretEngineVersion: 2,\n    useAwsIam: false,\n    useK8sAuth: false,\n    vaultUrl: \"https://vault_url.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\naws_auth = harness.platform.VaultConnector(\"aws_auth\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    aws_region=\"aws_region\",\n    base_path=\"base_path\",\n    access_type=\"AWS_IAM\",\n    default=False,\n    xvault_aws_iam_server_id=f\"account.{test['id']}\",\n    read_only=True,\n    renewal_interval_minutes=60,\n    secret_engine_manually_configured=True,\n    secret_engine_name=\"secret_engine_name\",\n    secret_engine_version=2,\n    vault_aws_iam_role=\"vault_aws_iam_role\",\n    use_aws_iam=True,\n    use_k8s_auth=False,\n    use_vault_agent=False,\n    delegate_selectors=[\"harness-delegate\"],\n    vault_url=\"https://vault_url.com\")\napp_role = harness.platform.VaultConnector(\"app_role\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    app_role_id=\"app_role_id\",\n    base_path=\"base_path\",\n    access_type=\"APP_ROLE\",\n    default=False,\n    secret_id=f\"account.{test['id']}\",\n    read_only=True,\n    renewal_interval_minutes=60,\n    secret_engine_manually_configured=True,\n    secret_engine_name=\"secret_engine_name\",\n    secret_engine_version=2,\n    use_aws_iam=False,\n    use_k8s_auth=False,\n    use_vault_agent=False,\n    renew_app_role_token=True,\n    delegate_selectors=[\"harness-delegate\"],\n    vault_url=\"https://vault_url.com\")\nk8s_auth = harness.platform.VaultConnector(\"k8s_auth\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    auth_token=f\"account.{test['id']}\",\n    base_path=\"base_path\",\n    access_type=\"K8s_AUTH\",\n    default=False,\n    k8s_auth_endpoint=\"k8s_auth_endpoint\",\n    namespace=\"namespace\",\n    read_only=True,\n    renewal_interval_minutes=10,\n    secret_engine_manually_configured=True,\n    secret_engine_name=\"secret_engine_name\",\n    secret_engine_version=2,\n    service_account_token_path=\"service_account_token_path\",\n    use_aws_iam=False,\n    use_k8s_auth=True,\n    use_vault_agent=False,\n    vault_k8s_auth_role=\"vault_k8s_auth_role\",\n    vault_aws_iam_role=\"vault_aws_iam_role\",\n    delegate_selectors=[\"harness-delegate\"],\n    vault_url=\"https://vault_url.com\")\nvault_agent = harness.platform.VaultConnector(\"vault_agent\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    auth_token=f\"account.{test['id']}\",\n    base_path=\"base_path\",\n    access_type=\"VAULT_AGENT\",\n    default=False,\n    namespace=\"namespace\",\n    read_only=True,\n    renewal_interval_minutes=10,\n    secret_engine_manually_configured=True,\n    secret_engine_name=\"secret_engine_name\",\n    secret_engine_version=2,\n    use_aws_iam=False,\n    use_k8s_auth=False,\n    use_vault_agent=True,\n    sink_path=\"sink_path\",\n    delegate_selectors=[\"harness-delegate\"],\n    vault_url=\"https://vault_url.com\")\ntoken = harness.platform.VaultConnector(\"token\",\n    identifier=\"identifier\",\n    name=\"name\",\n    description=\"test\",\n    tags=[\"foo:bar\"],\n    auth_token=f\"account.{test['id']}\",\n    base_path=\"base_path\",\n    access_type=\"TOKEN\",\n    default=False,\n    namespace=\"namespace\",\n    read_only=True,\n    renewal_interval_minutes=10,\n    secret_engine_manually_configured=True,\n    secret_engine_name=\"secret_engine_name\",\n    secret_engine_version=2,\n    use_aws_iam=False,\n    use_k8s_auth=False,\n    vault_url=\"https://vault_url.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var awsAuth = new Harness.Platform.VaultConnector(\"aws_auth\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        AwsRegion = \"aws_region\",\n        BasePath = \"base_path\",\n        AccessType = \"AWS_IAM\",\n        Default = false,\n        XvaultAwsIamServerId = $\"account.{test.Id}\",\n        ReadOnly = true,\n        RenewalIntervalMinutes = 60,\n        SecretEngineManuallyConfigured = true,\n        SecretEngineName = \"secret_engine_name\",\n        SecretEngineVersion = 2,\n        VaultAwsIamRole = \"vault_aws_iam_role\",\n        UseAwsIam = true,\n        UseK8sAuth = false,\n        UseVaultAgent = false,\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        VaultUrl = \"https://vault_url.com\",\n    });\n\n    var appRole = new Harness.Platform.VaultConnector(\"app_role\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        AppRoleId = \"app_role_id\",\n        BasePath = \"base_path\",\n        AccessType = \"APP_ROLE\",\n        Default = false,\n        SecretId = $\"account.{test.Id}\",\n        ReadOnly = true,\n        RenewalIntervalMinutes = 60,\n        SecretEngineManuallyConfigured = true,\n        SecretEngineName = \"secret_engine_name\",\n        SecretEngineVersion = 2,\n        UseAwsIam = false,\n        UseK8sAuth = false,\n        UseVaultAgent = false,\n        RenewAppRoleToken = true,\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        VaultUrl = \"https://vault_url.com\",\n    });\n\n    var k8sAuth = new Harness.Platform.VaultConnector(\"k8s_auth\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        AuthToken = $\"account.{test.Id}\",\n        BasePath = \"base_path\",\n        AccessType = \"K8s_AUTH\",\n        Default = false,\n        K8sAuthEndpoint = \"k8s_auth_endpoint\",\n        Namespace = \"namespace\",\n        ReadOnly = true,\n        RenewalIntervalMinutes = 10,\n        SecretEngineManuallyConfigured = true,\n        SecretEngineName = \"secret_engine_name\",\n        SecretEngineVersion = 2,\n        ServiceAccountTokenPath = \"service_account_token_path\",\n        UseAwsIam = false,\n        UseK8sAuth = true,\n        UseVaultAgent = false,\n        VaultK8sAuthRole = \"vault_k8s_auth_role\",\n        VaultAwsIamRole = \"vault_aws_iam_role\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        VaultUrl = \"https://vault_url.com\",\n    });\n\n    var vaultAgent = new Harness.Platform.VaultConnector(\"vault_agent\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        AuthToken = $\"account.{test.Id}\",\n        BasePath = \"base_path\",\n        AccessType = \"VAULT_AGENT\",\n        Default = false,\n        Namespace = \"namespace\",\n        ReadOnly = true,\n        RenewalIntervalMinutes = 10,\n        SecretEngineManuallyConfigured = true,\n        SecretEngineName = \"secret_engine_name\",\n        SecretEngineVersion = 2,\n        UseAwsIam = false,\n        UseK8sAuth = false,\n        UseVaultAgent = true,\n        SinkPath = \"sink_path\",\n        DelegateSelectors = new[]\n        {\n            \"harness-delegate\",\n        },\n        VaultUrl = \"https://vault_url.com\",\n    });\n\n    var token = new Harness.Platform.VaultConnector(\"token\", new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        Description = \"test\",\n        Tags = new[]\n        {\n            \"foo:bar\",\n        },\n        AuthToken = $\"account.{test.Id}\",\n        BasePath = \"base_path\",\n        AccessType = \"TOKEN\",\n        Default = false,\n        Namespace = \"namespace\",\n        ReadOnly = true,\n        RenewalIntervalMinutes = 10,\n        SecretEngineManuallyConfigured = true,\n        SecretEngineName = \"secret_engine_name\",\n        SecretEngineVersion = 2,\n        UseAwsIam = false,\n        UseK8sAuth = false,\n        VaultUrl = \"https://vault_url.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.NewVaultConnector(ctx, \"aws_auth\", \u0026platform.VaultConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tAwsRegion:                      pulumi.String(\"aws_region\"),\n\t\t\tBasePath:                       pulumi.String(\"base_path\"),\n\t\t\tAccessType:                     pulumi.String(\"AWS_IAM\"),\n\t\t\tDefault:                        pulumi.Bool(false),\n\t\t\tXvaultAwsIamServerId:           pulumi.String(fmt.Sprintf(\"account.%v\", test.Id)),\n\t\t\tReadOnly:                       pulumi.Bool(true),\n\t\t\tRenewalIntervalMinutes:         pulumi.Int(60),\n\t\t\tSecretEngineManuallyConfigured: pulumi.Bool(true),\n\t\t\tSecretEngineName:               pulumi.String(\"secret_engine_name\"),\n\t\t\tSecretEngineVersion:            pulumi.Int(2),\n\t\t\tVaultAwsIamRole:                pulumi.String(\"vault_aws_iam_role\"),\n\t\t\tUseAwsIam:                      pulumi.Bool(true),\n\t\t\tUseK8sAuth:                     pulumi.Bool(false),\n\t\t\tUseVaultAgent:                  pulumi.Bool(false),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tVaultUrl: pulumi.String(\"https://vault_url.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewVaultConnector(ctx, \"app_role\", \u0026platform.VaultConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tAppRoleId:                      pulumi.String(\"app_role_id\"),\n\t\t\tBasePath:                       pulumi.String(\"base_path\"),\n\t\t\tAccessType:                     pulumi.String(\"APP_ROLE\"),\n\t\t\tDefault:                        pulumi.Bool(false),\n\t\t\tSecretId:                       pulumi.String(fmt.Sprintf(\"account.%v\", test.Id)),\n\t\t\tReadOnly:                       pulumi.Bool(true),\n\t\t\tRenewalIntervalMinutes:         pulumi.Int(60),\n\t\t\tSecretEngineManuallyConfigured: pulumi.Bool(true),\n\t\t\tSecretEngineName:               pulumi.String(\"secret_engine_name\"),\n\t\t\tSecretEngineVersion:            pulumi.Int(2),\n\t\t\tUseAwsIam:                      pulumi.Bool(false),\n\t\t\tUseK8sAuth:                     pulumi.Bool(false),\n\t\t\tUseVaultAgent:                  pulumi.Bool(false),\n\t\t\tRenewAppRoleToken:              pulumi.Bool(true),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tVaultUrl: pulumi.String(\"https://vault_url.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewVaultConnector(ctx, \"k8s_auth\", \u0026platform.VaultConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tAuthToken:                      pulumi.String(fmt.Sprintf(\"account.%v\", test.Id)),\n\t\t\tBasePath:                       pulumi.String(\"base_path\"),\n\t\t\tAccessType:                     pulumi.String(\"K8s_AUTH\"),\n\t\t\tDefault:                        pulumi.Bool(false),\n\t\t\tK8sAuthEndpoint:                pulumi.String(\"k8s_auth_endpoint\"),\n\t\t\tNamespace:                      pulumi.String(\"namespace\"),\n\t\t\tReadOnly:                       pulumi.Bool(true),\n\t\t\tRenewalIntervalMinutes:         pulumi.Int(10),\n\t\t\tSecretEngineManuallyConfigured: pulumi.Bool(true),\n\t\t\tSecretEngineName:               pulumi.String(\"secret_engine_name\"),\n\t\t\tSecretEngineVersion:            pulumi.Int(2),\n\t\t\tServiceAccountTokenPath:        pulumi.String(\"service_account_token_path\"),\n\t\t\tUseAwsIam:                      pulumi.Bool(false),\n\t\t\tUseK8sAuth:                     pulumi.Bool(true),\n\t\t\tUseVaultAgent:                  pulumi.Bool(false),\n\t\t\tVaultK8sAuthRole:               pulumi.String(\"vault_k8s_auth_role\"),\n\t\t\tVaultAwsIamRole:                pulumi.String(\"vault_aws_iam_role\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tVaultUrl: pulumi.String(\"https://vault_url.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewVaultConnector(ctx, \"vault_agent\", \u0026platform.VaultConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tAuthToken:                      pulumi.String(fmt.Sprintf(\"account.%v\", test.Id)),\n\t\t\tBasePath:                       pulumi.String(\"base_path\"),\n\t\t\tAccessType:                     pulumi.String(\"VAULT_AGENT\"),\n\t\t\tDefault:                        pulumi.Bool(false),\n\t\t\tNamespace:                      pulumi.String(\"namespace\"),\n\t\t\tReadOnly:                       pulumi.Bool(true),\n\t\t\tRenewalIntervalMinutes:         pulumi.Int(10),\n\t\t\tSecretEngineManuallyConfigured: pulumi.Bool(true),\n\t\t\tSecretEngineName:               pulumi.String(\"secret_engine_name\"),\n\t\t\tSecretEngineVersion:            pulumi.Int(2),\n\t\t\tUseAwsIam:                      pulumi.Bool(false),\n\t\t\tUseK8sAuth:                     pulumi.Bool(false),\n\t\t\tUseVaultAgent:                  pulumi.Bool(true),\n\t\t\tSinkPath:                       pulumi.String(\"sink_path\"),\n\t\t\tDelegateSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"harness-delegate\"),\n\t\t\t},\n\t\t\tVaultUrl: pulumi.String(\"https://vault_url.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.NewVaultConnector(ctx, \"token\", \u0026platform.VaultConnectorArgs{\n\t\t\tIdentifier:  pulumi.String(\"identifier\"),\n\t\t\tName:        pulumi.String(\"name\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo:bar\"),\n\t\t\t},\n\t\t\tAuthToken:                      pulumi.String(fmt.Sprintf(\"account.%v\", test.Id)),\n\t\t\tBasePath:                       pulumi.String(\"base_path\"),\n\t\t\tAccessType:                     pulumi.String(\"TOKEN\"),\n\t\t\tDefault:                        pulumi.Bool(false),\n\t\t\tNamespace:                      pulumi.String(\"namespace\"),\n\t\t\tReadOnly:                       pulumi.Bool(true),\n\t\t\tRenewalIntervalMinutes:         pulumi.Int(10),\n\t\t\tSecretEngineManuallyConfigured: pulumi.Bool(true),\n\t\t\tSecretEngineName:               pulumi.String(\"secret_engine_name\"),\n\t\t\tSecretEngineVersion:            pulumi.Int(2),\n\t\t\tUseAwsIam:                      pulumi.Bool(false),\n\t\t\tUseK8sAuth:                     pulumi.Bool(false),\n\t\t\tVaultUrl:                       pulumi.String(\"https://vault_url.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.VaultConnector;\nimport com.pulumi.harness.platform.VaultConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var awsAuth = new VaultConnector(\"awsAuth\", VaultConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .awsRegion(\"aws_region\")\n            .basePath(\"base_path\")\n            .accessType(\"AWS_IAM\")\n            .default_(false)\n            .xvaultAwsIamServerId(String.format(\"account.%s\", test.id()))\n            .readOnly(true)\n            .renewalIntervalMinutes(60)\n            .secretEngineManuallyConfigured(true)\n            .secretEngineName(\"secret_engine_name\")\n            .secretEngineVersion(2)\n            .vaultAwsIamRole(\"vault_aws_iam_role\")\n            .useAwsIam(true)\n            .useK8sAuth(false)\n            .useVaultAgent(false)\n            .delegateSelectors(\"harness-delegate\")\n            .vaultUrl(\"https://vault_url.com\")\n            .build());\n\n        var appRole = new VaultConnector(\"appRole\", VaultConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .appRoleId(\"app_role_id\")\n            .basePath(\"base_path\")\n            .accessType(\"APP_ROLE\")\n            .default_(false)\n            .secretId(String.format(\"account.%s\", test.id()))\n            .readOnly(true)\n            .renewalIntervalMinutes(60)\n            .secretEngineManuallyConfigured(true)\n            .secretEngineName(\"secret_engine_name\")\n            .secretEngineVersion(2)\n            .useAwsIam(false)\n            .useK8sAuth(false)\n            .useVaultAgent(false)\n            .renewAppRoleToken(true)\n            .delegateSelectors(\"harness-delegate\")\n            .vaultUrl(\"https://vault_url.com\")\n            .build());\n\n        var k8sAuth = new VaultConnector(\"k8sAuth\", VaultConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .authToken(String.format(\"account.%s\", test.id()))\n            .basePath(\"base_path\")\n            .accessType(\"K8s_AUTH\")\n            .default_(false)\n            .k8sAuthEndpoint(\"k8s_auth_endpoint\")\n            .namespace(\"namespace\")\n            .readOnly(true)\n            .renewalIntervalMinutes(10)\n            .secretEngineManuallyConfigured(true)\n            .secretEngineName(\"secret_engine_name\")\n            .secretEngineVersion(2)\n            .serviceAccountTokenPath(\"service_account_token_path\")\n            .useAwsIam(false)\n            .useK8sAuth(true)\n            .useVaultAgent(false)\n            .vaultK8sAuthRole(\"vault_k8s_auth_role\")\n            .vaultAwsIamRole(\"vault_aws_iam_role\")\n            .delegateSelectors(\"harness-delegate\")\n            .vaultUrl(\"https://vault_url.com\")\n            .build());\n\n        var vaultAgent = new VaultConnector(\"vaultAgent\", VaultConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .authToken(String.format(\"account.%s\", test.id()))\n            .basePath(\"base_path\")\n            .accessType(\"VAULT_AGENT\")\n            .default_(false)\n            .namespace(\"namespace\")\n            .readOnly(true)\n            .renewalIntervalMinutes(10)\n            .secretEngineManuallyConfigured(true)\n            .secretEngineName(\"secret_engine_name\")\n            .secretEngineVersion(2)\n            .useAwsIam(false)\n            .useK8sAuth(false)\n            .useVaultAgent(true)\n            .sinkPath(\"sink_path\")\n            .delegateSelectors(\"harness-delegate\")\n            .vaultUrl(\"https://vault_url.com\")\n            .build());\n\n        var token = new VaultConnector(\"token\", VaultConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .description(\"test\")\n            .tags(\"foo:bar\")\n            .authToken(String.format(\"account.%s\", test.id()))\n            .basePath(\"base_path\")\n            .accessType(\"TOKEN\")\n            .default_(false)\n            .namespace(\"namespace\")\n            .readOnly(true)\n            .renewalIntervalMinutes(10)\n            .secretEngineManuallyConfigured(true)\n            .secretEngineName(\"secret_engine_name\")\n            .secretEngineVersion(2)\n            .useAwsIam(false)\n            .useK8sAuth(false)\n            .vaultUrl(\"https://vault_url.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  awsAuth:\n    type: harness:platform:VaultConnector\n    name: aws_auth\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      awsRegion: aws_region\n      basePath: base_path\n      accessType: AWS_IAM\n      default: false\n      xvaultAwsIamServerId: account.${test.id}\n      readOnly: true\n      renewalIntervalMinutes: 60\n      secretEngineManuallyConfigured: true\n      secretEngineName: secret_engine_name\n      secretEngineVersion: 2\n      vaultAwsIamRole: vault_aws_iam_role\n      useAwsIam: true\n      useK8sAuth: false\n      useVaultAgent: false\n      delegateSelectors:\n        - harness-delegate\n      vaultUrl: https://vault_url.com\n  appRole:\n    type: harness:platform:VaultConnector\n    name: app_role\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      appRoleId: app_role_id\n      basePath: base_path\n      accessType: APP_ROLE\n      default: false\n      secretId: account.${test.id}\n      readOnly: true\n      renewalIntervalMinutes: 60\n      secretEngineManuallyConfigured: true\n      secretEngineName: secret_engine_name\n      secretEngineVersion: 2\n      useAwsIam: false\n      useK8sAuth: false\n      useVaultAgent: false\n      renewAppRoleToken: true\n      delegateSelectors:\n        - harness-delegate\n      vaultUrl: https://vault_url.com\n  k8sAuth:\n    type: harness:platform:VaultConnector\n    name: k8s_auth\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      authToken: account.${test.id}\n      basePath: base_path\n      accessType: K8s_AUTH\n      default: false\n      k8sAuthEndpoint: k8s_auth_endpoint\n      namespace: namespace\n      readOnly: true\n      renewalIntervalMinutes: 10\n      secretEngineManuallyConfigured: true\n      secretEngineName: secret_engine_name\n      secretEngineVersion: 2\n      serviceAccountTokenPath: service_account_token_path\n      useAwsIam: false\n      useK8sAuth: true\n      useVaultAgent: false\n      vaultK8sAuthRole: vault_k8s_auth_role\n      vaultAwsIamRole: vault_aws_iam_role\n      delegateSelectors:\n        - harness-delegate\n      vaultUrl: https://vault_url.com\n  vaultAgent:\n    type: harness:platform:VaultConnector\n    name: vault_agent\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      authToken: account.${test.id}\n      basePath: base_path\n      accessType: VAULT_AGENT\n      default: false\n      namespace: namespace\n      readOnly: true\n      renewalIntervalMinutes: 10\n      secretEngineManuallyConfigured: true\n      secretEngineName: secret_engine_name\n      secretEngineVersion: 2\n      useAwsIam: false\n      useK8sAuth: false\n      useVaultAgent: true\n      sinkPath: sink_path\n      delegateSelectors:\n        - harness-delegate\n      vaultUrl: https://vault_url.com\n  token:\n    type: harness:platform:VaultConnector\n    properties:\n      identifier: identifier\n      name: name\n      description: test\n      tags:\n        - foo:bar\n      authToken: account.${test.id}\n      basePath: base_path\n      accessType: TOKEN\n      default: false\n      namespace: namespace\n      readOnly: true\n      renewalIntervalMinutes: 10\n      secretEngineManuallyConfigured: true\n      secretEngineName: secret_engine_name\n      secretEngineVersion: 2\n      useAwsIam: false\n      useK8sAuth: false\n      vaultUrl: https://vault_url.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport account level vault connector \n\n```sh\n$ pulumi import harness:platform/vaultConnector:VaultConnector example \u003cconnector_id\u003e\n```\n\nImport org level vault connector \n\n```sh\n$ pulumi import harness:platform/vaultConnector:VaultConnector example \u003cord_id\u003e/\u003cconnector_id\u003e\n```\n\nImport project level vault connector \n\n```sh\n$ pulumi import harness:platform/vaultConnector:VaultConnector example \u003corg_id\u003e/\u003cproject_id\u003e/\u003cconnector_id\u003e\n```\n\n",
            "properties": {
                "accessType": {
                    "type": "string",
                    "description": "Access type.\n"
                },
                "appRoleId": {
                    "type": "string",
                    "description": "ID of App Role.\n"
                },
                "authToken": {
                    "type": "string",
                    "description": "Authentication token for Vault.\n"
                },
                "awsRegion": {
                    "type": "string",
                    "description": "AWS region where the AWS IAM authentication will happen.\n"
                },
                "basePath": {
                    "type": "string",
                    "description": "Location of the Vault directory where the secret will be stored.\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Is default or not.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Is default or not.\n"
                },
                "isReadOnly": {
                    "type": "boolean",
                    "description": "Read only or not.\n"
                },
                "k8sAuthEndpoint": {
                    "type": "string",
                    "description": "The path where Kubernetes Auth is enabled in Vault.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Vault namespace where the Secret will be created.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Read only.\n"
                },
                "renewAppRoleToken": {
                    "type": "boolean",
                    "description": "Boolean value to indicate if AppRole token renewal is enabled or not.\n"
                },
                "renewalIntervalMinutes": {
                    "type": "integer",
                    "description": "The time interval for the token renewal.\n"
                },
                "secretEngineManuallyConfigured": {
                    "type": "boolean",
                    "description": "Manually entered Secret Engine.\n"
                },
                "secretEngineName": {
                    "type": "string",
                    "description": "Name of the Secret Engine.\n"
                },
                "secretEngineVersion": {
                    "type": "integer",
                    "description": "Version of Secret Engine.\n"
                },
                "secretId": {
                    "type": "string",
                    "description": "ID of the Secret.\n"
                },
                "serviceAccountTokenPath": {
                    "type": "string",
                    "description": "The Service Account token path in the K8s pod where the token is mounted.\n"
                },
                "sinkPath": {
                    "type": "string",
                    "description": "The location from which the authentication token should be read.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "useAwsIam": {
                    "type": "boolean",
                    "description": "Boolean value to indicate if AWS IAM is used for authentication.\n"
                },
                "useK8sAuth": {
                    "type": "boolean",
                    "description": "Boolean value to indicate if K8s Auth is used for authentication.\n"
                },
                "useVaultAgent": {
                    "type": "boolean",
                    "description": "Boolean value to indicate if Vault Agent is used for authentication.\n"
                },
                "vaultAwsIamRole": {
                    "type": "string",
                    "description": "The Vault role defined to bind to aws iam account/role being accessed.\n"
                },
                "vaultK8sAuthRole": {
                    "type": "string",
                    "description": "The role where K8s Auth will happen.\n"
                },
                "vaultUrl": {
                    "type": "string",
                    "description": "URL of the HashiCorp Vault.\n"
                },
                "xvaultAwsIamServerId": {
                    "type": "string",
                    "description": "The AWS IAM Header Server ID that has been configured for this AWS IAM instance.\n"
                }
            },
            "required": [
                "authToken",
                "identifier",
                "name",
                "renewAppRoleToken",
                "renewalIntervalMinutes",
                "vaultUrl"
            ],
            "inputProperties": {
                "accessType": {
                    "type": "string",
                    "description": "Access type.\n"
                },
                "appRoleId": {
                    "type": "string",
                    "description": "ID of App Role.\n"
                },
                "authToken": {
                    "type": "string",
                    "description": "Authentication token for Vault.\n"
                },
                "awsRegion": {
                    "type": "string",
                    "description": "AWS region where the AWS IAM authentication will happen.\n"
                },
                "basePath": {
                    "type": "string",
                    "description": "Location of the Vault directory where the secret will be stored.\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Is default or not.\n"
                },
                "delegateSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Unique identifier of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Is default or not.\n"
                },
                "isReadOnly": {
                    "type": "boolean",
                    "description": "Read only or not.\n"
                },
                "k8sAuthEndpoint": {
                    "type": "string",
                    "description": "The path where Kubernetes Auth is enabled in Vault.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resource.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Vault namespace where the Secret will be created.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "Unique identifier of the organization.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier of the project.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Read only.\n"
                },
                "renewAppRoleToken": {
                    "type": "boolean",
                    "description": "Boolean value to indicate if AppRole token renewal is enabled or not.\n"
                },
                "renewalIntervalMinutes": {
                    "type": "integer",
                    "description": "The time interval for the token renewal.\n"
                },
                "secretEngineManuallyConfigured": {
                    "type": "boolean",
                    "description": "Manually entered Secret Engine.\n"
                },
                "secretEngineName": {
                    "type": "string",
                    "description": "Name of the Secret Engine.\n"
                },
                "secretEngineVersion": {
                    "type": "integer",
                    "description": "Version of Secret Engine.\n"
                },
                "secretId": {
                    "type": "string",
                    "description": "ID of the Secret.\n"
                },
                "serviceAccountTokenPath": {
                    "type": "string",
                    "description": "The Service Account token path in the K8s pod where the token is mounted.\n"
                },
                "sinkPath": {
                    "type": "string",
                    "description": "The location from which the authentication token should be read.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags to associate with the resource.\n"
                },
                "useAwsIam": {
                    "type": "boolean",
                    "description": "Boolean value to indicate if AWS IAM is used for authentication.\n"
                },
                "useK8sAuth": {
                    "type": "boolean",
                    "description": "Boolean value to indicate if K8s Auth is used for authentication.\n"
                },
                "useVaultAgent": {
                    "type": "boolean",
                    "description": "Boolean value to indicate if Vault Agent is used for authentication.\n"
                },
                "vaultAwsIamRole": {
                    "type": "string",
                    "description": "The Vault role defined to bind to aws iam account/role being accessed.\n"
                },
                "vaultK8sAuthRole": {
                    "type": "string",
                    "description": "The role where K8s Auth will happen.\n"
                },
                "vaultUrl": {
                    "type": "string",
                    "description": "URL of the HashiCorp Vault.\n"
                },
                "xvaultAwsIamServerId": {
                    "type": "string",
                    "description": "The AWS IAM Header Server ID that has been configured for this AWS IAM instance.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "renewalIntervalMinutes",
                "vaultUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VaultConnector resources.\n",
                "properties": {
                    "accessType": {
                        "type": "string",
                        "description": "Access type.\n"
                    },
                    "appRoleId": {
                        "type": "string",
                        "description": "ID of App Role.\n"
                    },
                    "authToken": {
                        "type": "string",
                        "description": "Authentication token for Vault.\n"
                    },
                    "awsRegion": {
                        "type": "string",
                        "description": "AWS region where the AWS IAM authentication will happen.\n"
                    },
                    "basePath": {
                        "type": "string",
                        "description": "Location of the Vault directory where the secret will be stored.\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Is default or not.\n"
                    },
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Is default or not.\n"
                    },
                    "isReadOnly": {
                        "type": "boolean",
                        "description": "Read only or not.\n"
                    },
                    "k8sAuthEndpoint": {
                        "type": "string",
                        "description": "The path where Kubernetes Auth is enabled in Vault.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Vault namespace where the Secret will be created.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Read only.\n"
                    },
                    "renewAppRoleToken": {
                        "type": "boolean",
                        "description": "Boolean value to indicate if AppRole token renewal is enabled or not.\n"
                    },
                    "renewalIntervalMinutes": {
                        "type": "integer",
                        "description": "The time interval for the token renewal.\n"
                    },
                    "secretEngineManuallyConfigured": {
                        "type": "boolean",
                        "description": "Manually entered Secret Engine.\n"
                    },
                    "secretEngineName": {
                        "type": "string",
                        "description": "Name of the Secret Engine.\n"
                    },
                    "secretEngineVersion": {
                        "type": "integer",
                        "description": "Version of Secret Engine.\n"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "ID of the Secret.\n"
                    },
                    "serviceAccountTokenPath": {
                        "type": "string",
                        "description": "The Service Account token path in the K8s pod where the token is mounted.\n"
                    },
                    "sinkPath": {
                        "type": "string",
                        "description": "The location from which the authentication token should be read.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to associate with the resource.\n"
                    },
                    "useAwsIam": {
                        "type": "boolean",
                        "description": "Boolean value to indicate if AWS IAM is used for authentication.\n"
                    },
                    "useK8sAuth": {
                        "type": "boolean",
                        "description": "Boolean value to indicate if K8s Auth is used for authentication.\n"
                    },
                    "useVaultAgent": {
                        "type": "boolean",
                        "description": "Boolean value to indicate if Vault Agent is used for authentication.\n"
                    },
                    "vaultAwsIamRole": {
                        "type": "string",
                        "description": "The Vault role defined to bind to aws iam account/role being accessed.\n"
                    },
                    "vaultK8sAuthRole": {
                        "type": "string",
                        "description": "The role where K8s Auth will happen.\n"
                    },
                    "vaultUrl": {
                        "type": "string",
                        "description": "URL of the HashiCorp Vault.\n"
                    },
                    "xvaultAwsIamServerId": {
                        "type": "string",
                        "description": "The AWS IAM Header Server ID that has been configured for this AWS IAM instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/ami:Ami": {
            "description": "Resource for creating an AMI service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.Application(\"example\", {name: \"example\"});\nconst exampleAmi = new harness.service.Ami(\"example\", {\n    appId: example.id,\n    name: \"ami-example\",\n    description: \"Service for deploying AMI's\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.Application(\"example\", name=\"example\")\nexample_ami = harness.service.Ami(\"example\",\n    app_id=example.id,\n    name=\"ami-example\",\n    description=\"Service for deploying AMI's\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Application(\"example\", new()\n    {\n        Name = \"example\",\n    });\n\n    var exampleAmi = new Harness.Service.Ami(\"example\", new()\n    {\n        AppId = example.Id,\n        Name = \"ami-example\",\n        Description = \"Service for deploying AMI's\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := harness.NewApplication(ctx, \"example\", \u0026harness.ApplicationArgs{\n\t\t\tName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewAmi(ctx, \"example\", \u0026service.AmiArgs{\n\t\t\tAppId:       example.ID(),\n\t\t\tName:        pulumi.String(\"ami-example\"),\n\t\t\tDescription: pulumi.String(\"Service for deploying AMI's\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.ApplicationArgs;\nimport com.pulumi.harness.service.Ami;\nimport com.pulumi.harness.service.AmiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Application(\"example\", ApplicationArgs.builder()\n            .name(\"example\")\n            .build());\n\n        var exampleAmi = new Ami(\"exampleAmi\", AmiArgs.builder()\n            .appId(example.id())\n            .name(\"ami-example\")\n            .description(\"Service for deploying AMI's\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:Application\n    properties:\n      name: example\n  exampleAmi:\n    type: harness:service:Ami\n    name: example\n    properties:\n      appId: ${example.id}\n      name: ami-example\n      description: Service for deploying AMI's\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n$ pulumi import harness:service/ami:Ami example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/AmiVariable:AmiVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/AmiVariable:AmiVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ami resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/AmiVariable:AmiVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/codedeploy:Codedeploy": {
            "description": "Resource for creating an AWS CodeDeploy service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.Application(\"example\", {name: \"example\"});\nconst exampleCodedeploy = new harness.service.Codedeploy(\"example\", {\n    appId: example.id,\n    name: \"aws-codedeploy\",\n    description: \"Service for AWS codedeploy applications.\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.Application(\"example\", name=\"example\")\nexample_codedeploy = harness.service.Codedeploy(\"example\",\n    app_id=example.id,\n    name=\"aws-codedeploy\",\n    description=\"Service for AWS codedeploy applications.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Application(\"example\", new()\n    {\n        Name = \"example\",\n    });\n\n    var exampleCodedeploy = new Harness.Service.Codedeploy(\"example\", new()\n    {\n        AppId = example.Id,\n        Name = \"aws-codedeploy\",\n        Description = \"Service for AWS codedeploy applications.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := harness.NewApplication(ctx, \"example\", \u0026harness.ApplicationArgs{\n\t\t\tName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewCodedeploy(ctx, \"example\", \u0026service.CodedeployArgs{\n\t\t\tAppId:       example.ID(),\n\t\t\tName:        pulumi.String(\"aws-codedeploy\"),\n\t\t\tDescription: pulumi.String(\"Service for AWS codedeploy applications.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.ApplicationArgs;\nimport com.pulumi.harness.service.Codedeploy;\nimport com.pulumi.harness.service.CodedeployArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Application(\"example\", ApplicationArgs.builder()\n            .name(\"example\")\n            .build());\n\n        var exampleCodedeploy = new Codedeploy(\"exampleCodedeploy\", CodedeployArgs.builder()\n            .appId(example.id())\n            .name(\"aws-codedeploy\")\n            .description(\"Service for AWS codedeploy applications.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:Application\n    properties:\n      name: example\n  exampleCodedeploy:\n    type: harness:service:Codedeploy\n    name: example\n    properties:\n      appId: ${example.id}\n      name: aws-codedeploy\n      description: Service for AWS codedeploy applications.\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n$ pulumi import harness:service/codedeploy:Codedeploy example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/CodedeployVariable:CodedeployVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/CodedeployVariable:CodedeployVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Codedeploy resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/CodedeployVariable:CodedeployVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/ecs:Ecs": {
            "description": "Resource for creating an AWS ECS service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.Application(\"example\", {name: \"example\"});\nconst exampleEcs = new harness.service.Ecs(\"example\", {\n    appId: example.id,\n    name: \"ecs-example-service\",\n    description: \"Service for deploying AWS ECS tasks.\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.Application(\"example\", name=\"example\")\nexample_ecs = harness.service.Ecs(\"example\",\n    app_id=example.id,\n    name=\"ecs-example-service\",\n    description=\"Service for deploying AWS ECS tasks.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Application(\"example\", new()\n    {\n        Name = \"example\",\n    });\n\n    var exampleEcs = new Harness.Service.Ecs(\"example\", new()\n    {\n        AppId = example.Id,\n        Name = \"ecs-example-service\",\n        Description = \"Service for deploying AWS ECS tasks.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := harness.NewApplication(ctx, \"example\", \u0026harness.ApplicationArgs{\n\t\t\tName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewEcs(ctx, \"example\", \u0026service.EcsArgs{\n\t\t\tAppId:       example.ID(),\n\t\t\tName:        pulumi.String(\"ecs-example-service\"),\n\t\t\tDescription: pulumi.String(\"Service for deploying AWS ECS tasks.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.ApplicationArgs;\nimport com.pulumi.harness.service.Ecs;\nimport com.pulumi.harness.service.EcsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Application(\"example\", ApplicationArgs.builder()\n            .name(\"example\")\n            .build());\n\n        var exampleEcs = new Ecs(\"exampleEcs\", EcsArgs.builder()\n            .appId(example.id())\n            .name(\"ecs-example-service\")\n            .description(\"Service for deploying AWS ECS tasks.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:Application\n    properties:\n      name: example\n  exampleEcs:\n    type: harness:service:Ecs\n    name: example\n    properties:\n      appId: ${example.id}\n      name: ecs-example-service\n      description: Service for deploying AWS ECS tasks.\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n$ pulumi import harness:service/ecs:Ecs example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/EcsVariable:EcsVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/EcsVariable:EcsVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ecs resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/EcsVariable:EcsVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/helm:Helm": {
            "description": "Resource for creating a Kubernetes Helm service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.Application(\"example\", {name: \"example\"});\nconst exampleHelm = new harness.service.Helm(\"example\", {\n    appId: example.id,\n    name: \"helm-example-service\",\n    description: \"Service for deploying native Helm application.s\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.Application(\"example\", name=\"example\")\nexample_helm = harness.service.Helm(\"example\",\n    app_id=example.id,\n    name=\"helm-example-service\",\n    description=\"Service for deploying native Helm application.s\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Application(\"example\", new()\n    {\n        Name = \"example\",\n    });\n\n    var exampleHelm = new Harness.Service.Helm(\"example\", new()\n    {\n        AppId = example.Id,\n        Name = \"helm-example-service\",\n        Description = \"Service for deploying native Helm application.s\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := harness.NewApplication(ctx, \"example\", \u0026harness.ApplicationArgs{\n\t\t\tName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewHelm(ctx, \"example\", \u0026service.HelmArgs{\n\t\t\tAppId:       example.ID(),\n\t\t\tName:        pulumi.String(\"helm-example-service\"),\n\t\t\tDescription: pulumi.String(\"Service for deploying native Helm application.s\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.ApplicationArgs;\nimport com.pulumi.harness.service.Helm;\nimport com.pulumi.harness.service.HelmArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Application(\"example\", ApplicationArgs.builder()\n            .name(\"example\")\n            .build());\n\n        var exampleHelm = new Helm(\"exampleHelm\", HelmArgs.builder()\n            .appId(example.id())\n            .name(\"helm-example-service\")\n            .description(\"Service for deploying native Helm application.s\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:Application\n    properties:\n      name: example\n  exampleHelm:\n    type: harness:service:Helm\n    name: example\n    properties:\n      appId: ${example.id}\n      name: helm-example-service\n      description: Service for deploying native Helm application.s\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n$ pulumi import harness:service/helm:Helm example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/HelmVariable:HelmVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/HelmVariable:HelmVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Helm resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/HelmVariable:HelmVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/kubernetes:Kubernetes": {
            "description": "Resource for creating a Kubernetes service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.Application(\"example\", {name: \"example\"});\nconst exampleKubernetes = new harness.service.Kubernetes(\"example\", {\n    appId: example.id,\n    name: \"k8s-svc\",\n    helmVersion: \"V3\",\n    description: \"Service for deploying Kubernetes manifests\",\n    variables: [\n        {\n            name: \"test\",\n            value: \"test_value\",\n            type: \"TEXT\",\n        },\n        {\n            name: \"test2\",\n            value: \"test_value2\",\n            type: \"TEXT\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.Application(\"example\", name=\"example\")\nexample_kubernetes = harness.service.Kubernetes(\"example\",\n    app_id=example.id,\n    name=\"k8s-svc\",\n    helm_version=\"V3\",\n    description=\"Service for deploying Kubernetes manifests\",\n    variables=[\n        harness.service.KubernetesVariableArgs(\n            name=\"test\",\n            value=\"test_value\",\n            type=\"TEXT\",\n        ),\n        harness.service.KubernetesVariableArgs(\n            name=\"test2\",\n            value=\"test_value2\",\n            type=\"TEXT\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Application(\"example\", new()\n    {\n        Name = \"example\",\n    });\n\n    var exampleKubernetes = new Harness.Service.Kubernetes(\"example\", new()\n    {\n        AppId = example.Id,\n        Name = \"k8s-svc\",\n        HelmVersion = \"V3\",\n        Description = \"Service for deploying Kubernetes manifests\",\n        Variables = new[]\n        {\n            new Harness.Service.Inputs.KubernetesVariableArgs\n            {\n                Name = \"test\",\n                Value = \"test_value\",\n                Type = \"TEXT\",\n            },\n            new Harness.Service.Inputs.KubernetesVariableArgs\n            {\n                Name = \"test2\",\n                Value = \"test_value2\",\n                Type = \"TEXT\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := harness.NewApplication(ctx, \"example\", \u0026harness.ApplicationArgs{\n\t\t\tName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewKubernetes(ctx, \"example\", \u0026service.KubernetesArgs{\n\t\t\tAppId:       example.ID(),\n\t\t\tName:        pulumi.String(\"k8s-svc\"),\n\t\t\tHelmVersion: pulumi.String(\"V3\"),\n\t\t\tDescription: pulumi.String(\"Service for deploying Kubernetes manifests\"),\n\t\t\tVariables: service.KubernetesVariableArray{\n\t\t\t\t\u0026service.KubernetesVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"test\"),\n\t\t\t\t\tValue: pulumi.String(\"test_value\"),\n\t\t\t\t\tType:  pulumi.String(\"TEXT\"),\n\t\t\t\t},\n\t\t\t\t\u0026service.KubernetesVariableArgs{\n\t\t\t\t\tName:  pulumi.String(\"test2\"),\n\t\t\t\t\tValue: pulumi.String(\"test_value2\"),\n\t\t\t\t\tType:  pulumi.String(\"TEXT\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.ApplicationArgs;\nimport com.pulumi.harness.service.Kubernetes;\nimport com.pulumi.harness.service.KubernetesArgs;\nimport com.pulumi.harness.service.inputs.KubernetesVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Application(\"example\", ApplicationArgs.builder()\n            .name(\"example\")\n            .build());\n\n        var exampleKubernetes = new Kubernetes(\"exampleKubernetes\", KubernetesArgs.builder()\n            .appId(example.id())\n            .name(\"k8s-svc\")\n            .helmVersion(\"V3\")\n            .description(\"Service for deploying Kubernetes manifests\")\n            .variables(            \n                KubernetesVariableArgs.builder()\n                    .name(\"test\")\n                    .value(\"test_value\")\n                    .type(\"TEXT\")\n                    .build(),\n                KubernetesVariableArgs.builder()\n                    .name(\"test2\")\n                    .value(\"test_value2\")\n                    .type(\"TEXT\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:Application\n    properties:\n      name: example\n  exampleKubernetes:\n    type: harness:service:Kubernetes\n    name: example\n    properties:\n      appId: ${example.id}\n      name: k8s-svc\n      helmVersion: V3\n      description: Service for deploying Kubernetes manifests\n      variables:\n        - name: test\n          value: test_value\n          type: TEXT\n        - name: test2\n          value: test_value2\n          type: TEXT\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n$ pulumi import harness:service/kubernetes:Kubernetes example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "helmVersion": {
                    "type": "string",
                    "description": "The version of Helm to use. Options are `V2` and `V3`. Defaults to 'V2'. Only used when `type` is `KUBERNETES` or `HELM`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/KubernetesVariable:KubernetesVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "helmVersion": {
                    "type": "string",
                    "description": "The version of Helm to use. Options are `V2` and `V3`. Defaults to 'V2'. Only used when `type` is `KUBERNETES` or `HELM`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/KubernetesVariable:KubernetesVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Kubernetes resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "helmVersion": {
                        "type": "string",
                        "description": "The version of Helm to use. Options are `V2` and `V3`. Defaults to 'V2'. Only used when `type` is `KUBERNETES` or `HELM`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/KubernetesVariable:KubernetesVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/lambda:Lambda": {
            "description": "Resource for creating an AWS Lambda service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.Application(\"example\", {name: \"example\"});\nconst exampleLambda = new harness.service.Lambda(\"example\", {\n    appId: example.id,\n    name: \"my-lambda-service\",\n    description: \"Service for deploying AWS Lambda functions.\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.Application(\"example\", name=\"example\")\nexample_lambda = harness.service.Lambda(\"example\",\n    app_id=example.id,\n    name=\"my-lambda-service\",\n    description=\"Service for deploying AWS Lambda functions.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Application(\"example\", new()\n    {\n        Name = \"example\",\n    });\n\n    var exampleLambda = new Harness.Service.Lambda(\"example\", new()\n    {\n        AppId = example.Id,\n        Name = \"my-lambda-service\",\n        Description = \"Service for deploying AWS Lambda functions.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := harness.NewApplication(ctx, \"example\", \u0026harness.ApplicationArgs{\n\t\t\tName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewLambda(ctx, \"example\", \u0026service.LambdaArgs{\n\t\t\tAppId:       example.ID(),\n\t\t\tName:        pulumi.String(\"my-lambda-service\"),\n\t\t\tDescription: pulumi.String(\"Service for deploying AWS Lambda functions.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.ApplicationArgs;\nimport com.pulumi.harness.service.Lambda;\nimport com.pulumi.harness.service.LambdaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Application(\"example\", ApplicationArgs.builder()\n            .name(\"example\")\n            .build());\n\n        var exampleLambda = new Lambda(\"exampleLambda\", LambdaArgs.builder()\n            .appId(example.id())\n            .name(\"my-lambda-service\")\n            .description(\"Service for deploying AWS Lambda functions.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:Application\n    properties:\n      name: example\n  exampleLambda:\n    type: harness:service:Lambda\n    name: example\n    properties:\n      appId: ${example.id}\n      name: my-lambda-service\n      description: Service for deploying AWS Lambda functions.\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n$ pulumi import harness:service/lambda:Lambda example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/LambdaVariable:LambdaVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/LambdaVariable:LambdaVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Lambda resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/LambdaVariable:LambdaVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/ssh:Ssh": {
            "description": "Resource for creating an SSH service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.Application(\"example\", {name: \"example\"});\nconst exampleSsh = new harness.service.Ssh(\"example\", {\n    appId: example.id,\n    artifactType: \"TAR\",\n    name: \"ssh-example\",\n    description: \"Service for deploying applications with SSH.\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.Application(\"example\", name=\"example\")\nexample_ssh = harness.service.Ssh(\"example\",\n    app_id=example.id,\n    artifact_type=\"TAR\",\n    name=\"ssh-example\",\n    description=\"Service for deploying applications with SSH.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Application(\"example\", new()\n    {\n        Name = \"example\",\n    });\n\n    var exampleSsh = new Harness.Service.Ssh(\"example\", new()\n    {\n        AppId = example.Id,\n        ArtifactType = \"TAR\",\n        Name = \"ssh-example\",\n        Description = \"Service for deploying applications with SSH.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := harness.NewApplication(ctx, \"example\", \u0026harness.ApplicationArgs{\n\t\t\tName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewSsh(ctx, \"example\", \u0026service.SshArgs{\n\t\t\tAppId:        example.ID(),\n\t\t\tArtifactType: pulumi.String(\"TAR\"),\n\t\t\tName:         pulumi.String(\"ssh-example\"),\n\t\t\tDescription:  pulumi.String(\"Service for deploying applications with SSH.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.ApplicationArgs;\nimport com.pulumi.harness.service.Ssh;\nimport com.pulumi.harness.service.SshArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Application(\"example\", ApplicationArgs.builder()\n            .name(\"example\")\n            .build());\n\n        var exampleSsh = new Ssh(\"exampleSsh\", SshArgs.builder()\n            .appId(example.id())\n            .artifactType(\"TAR\")\n            .name(\"ssh-example\")\n            .description(\"Service for deploying applications with SSH.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:Application\n    properties:\n      name: example\n  exampleSsh:\n    type: harness:service:Ssh\n    name: example\n    properties:\n      appId: ${example.id}\n      artifactType: TAR\n      name: ssh-example\n      description: Service for deploying applications with SSH.\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n$ pulumi import harness:service/ssh:Ssh example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "artifactType": {
                    "type": "string",
                    "description": "The type of artifact to deploy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/SshVariable:SshVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "artifactType",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "artifactType": {
                    "type": "string",
                    "description": "The type of artifact to deploy.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/SshVariable:SshVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId",
                "artifactType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ssh resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "artifactType": {
                        "type": "string",
                        "description": "The type of artifact to deploy.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/SshVariable:SshVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/tanzu:Tanzu": {
            "description": "Resource for creating a Tanzu (PCF) service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.Application(\"example\", {name: \"example\"});\nconst exampleTanzu = new harness.service.Tanzu(\"example\", {\n    appId: example.id,\n    name: \"tanzu-svc\",\n    description: \"A service for deploying Tanzu applications.\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.Application(\"example\", name=\"example\")\nexample_tanzu = harness.service.Tanzu(\"example\",\n    app_id=example.id,\n    name=\"tanzu-svc\",\n    description=\"A service for deploying Tanzu applications.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Application(\"example\", new()\n    {\n        Name = \"example\",\n    });\n\n    var exampleTanzu = new Harness.Service.Tanzu(\"example\", new()\n    {\n        AppId = example.Id,\n        Name = \"tanzu-svc\",\n        Description = \"A service for deploying Tanzu applications.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := harness.NewApplication(ctx, \"example\", \u0026harness.ApplicationArgs{\n\t\t\tName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewTanzu(ctx, \"example\", \u0026service.TanzuArgs{\n\t\t\tAppId:       example.ID(),\n\t\t\tName:        pulumi.String(\"tanzu-svc\"),\n\t\t\tDescription: pulumi.String(\"A service for deploying Tanzu applications.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.ApplicationArgs;\nimport com.pulumi.harness.service.Tanzu;\nimport com.pulumi.harness.service.TanzuArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Application(\"example\", ApplicationArgs.builder()\n            .name(\"example\")\n            .build());\n\n        var exampleTanzu = new Tanzu(\"exampleTanzu\", TanzuArgs.builder()\n            .appId(example.id())\n            .name(\"tanzu-svc\")\n            .description(\"A service for deploying Tanzu applications.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:Application\n    properties:\n      name: example\n  exampleTanzu:\n    type: harness:service:Tanzu\n    name: example\n    properties:\n      appId: ${example.id}\n      name: tanzu-svc\n      description: A service for deploying Tanzu applications.\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n$ pulumi import harness:service/tanzu:Tanzu example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/TanzuVariable:TanzuVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/TanzuVariable:TanzuVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tanzu resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/TanzuVariable:TanzuVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        },
        "harness:service/winrm:Winrm": {
            "description": "Resource for creating an WinRM service. This resource uses the config-as-code API's. When updating the `name` or `path` of this resource you should typically also set the `create_before_destroy = true` lifecycle setting.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = new harness.Application(\"example\", {name: \"example\"});\nconst exampleWinrm = new harness.service.Winrm(\"example\", {\n    appId: example.id,\n    artifactType: \"IIS_APP\",\n    name: \"iis-app-winrm-svc\",\n    description: \"Service for deploying IIS appliactions using winrm.\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.Application(\"example\", name=\"example\")\nexample_winrm = harness.service.Winrm(\"example\",\n    app_id=example.id,\n    artifact_type=\"IIS_APP\",\n    name=\"iis-app-winrm-svc\",\n    description=\"Service for deploying IIS appliactions using winrm.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Harness.Application(\"example\", new()\n    {\n        Name = \"example\",\n    });\n\n    var exampleWinrm = new Harness.Service.Winrm(\"example\", new()\n    {\n        AppId = example.Id,\n        ArtifactType = \"IIS_APP\",\n        Name = \"iis-app-winrm-svc\",\n        Description = \"Service for deploying IIS appliactions using winrm.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/service\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := harness.NewApplication(ctx, \"example\", \u0026harness.ApplicationArgs{\n\t\t\tName: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = service.NewWinrm(ctx, \"example\", \u0026service.WinrmArgs{\n\t\t\tAppId:        example.ID(),\n\t\t\tArtifactType: pulumi.String(\"IIS_APP\"),\n\t\t\tName:         pulumi.String(\"iis-app-winrm-svc\"),\n\t\t\tDescription:  pulumi.String(\"Service for deploying IIS appliactions using winrm.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.Application;\nimport com.pulumi.harness.ApplicationArgs;\nimport com.pulumi.harness.service.Winrm;\nimport com.pulumi.harness.service.WinrmArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Application(\"example\", ApplicationArgs.builder()\n            .name(\"example\")\n            .build());\n\n        var exampleWinrm = new Winrm(\"exampleWinrm\", WinrmArgs.builder()\n            .appId(example.id())\n            .artifactType(\"IIS_APP\")\n            .name(\"iis-app-winrm-svc\")\n            .description(\"Service for deploying IIS appliactions using winrm.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: harness:Application\n    properties:\n      name: example\n  exampleWinrm:\n    type: harness:service:Winrm\n    name: example\n    properties:\n      appId: ${example.id}\n      artifactType: IIS_APP\n      name: iis-app-winrm-svc\n      description: Service for deploying IIS appliactions using winrm.\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nImport using the Harness application id and service id\n\n```sh\n$ pulumi import harness:service/winrm:Winrm example \u003capp_id\u003e/\u003csvc_id\u003e\n```\n\n",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n"
                },
                "artifactType": {
                    "type": "string",
                    "description": "The type of artifact to deploy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/WinrmVariable:WinrmVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "required": [
                "appId",
                "artifactType",
                "name"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "The id of the application the service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "artifactType": {
                    "type": "string",
                    "description": "The type of artifact to deploy.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of th service\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/harness:service/WinrmVariable:WinrmVariable"
                    },
                    "description": "Variables to be used in the service\n"
                }
            },
            "requiredInputs": [
                "appId",
                "artifactType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Winrm resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "artifactType": {
                        "type": "string",
                        "description": "The type of artifact to deploy.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of th service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:service/WinrmVariable:WinrmVariable"
                        },
                        "description": "Variables to be used in the service\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "harness:cloudprovider/getDelegateIds:getDelegateIds": {
            "description": "Use this data source to get a list of delegate ID's matching the specified search criteria.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDelegateIds.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the delegate to query for.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDelegateIds.\n",
                "properties": {
                    "delegateIds": {
                        "description": "A list of delegate ID's matching the specified search criteria.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the delegate to query for.\n",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT\n",
                        "type": "string"
                    }
                },
                "required": [
                    "delegateIds",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:index/getApplication:getApplication": {
            "description": "Data source for retrieving a Harness application\n",
            "inputs": {
                "description": "A collection of arguments for invoking getApplication.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The application description\n"
                    },
                    "gitSyncConnectorId": {
                        "type": "string",
                        "description": "The id of the git sync connector\n"
                    },
                    "gitSyncEnabled": {
                        "type": "boolean",
                        "description": "True if git sync is enabled on this application\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the application\n"
                    },
                    "isManualTriggerAuthorized": {
                        "type": "boolean",
                        "description": "When this is set to true, all manual triggers will require API Key authorization\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the application\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getApplication.\n",
                "properties": {
                    "description": {
                        "description": "The application description\n",
                        "type": "string"
                    },
                    "gitSyncConnectorId": {
                        "description": "The id of the git sync connector\n",
                        "type": "string"
                    },
                    "gitSyncEnabled": {
                        "description": "True if git sync is enabled on this application\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "Unique identifier of the application\n",
                        "type": "string"
                    },
                    "isManualTriggerAuthorized": {
                        "description": "When this is set to true, all manual triggers will require API Key authorization\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "The name of the application\n",
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/getCurrentAccount:getCurrentAccount": {
            "description": "Data source for retrieving information about the current Harness account\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCurrentAccount.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the git connector.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCurrentAccount.\n",
                "properties": {
                    "accountId": {
                        "description": "Id of the account.\n",
                        "type": "string"
                    },
                    "endpoint": {
                        "description": "The url of the Harness control plane.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "Id of the git connector.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accountId",
                    "endpoint"
                ],
                "type": "object"
            }
        },
        "harness:index/getDelegate:getDelegate": {
            "description": "Data source for retrieving a Harness delegate. If more than one delegate matches the query the first one will be returned.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.getDelegate({\n    name: \"harness-delegate\",\n    type: \"KUBERNETES\",\n    status: \"ENABLED\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.get_delegate(name=\"harness-delegate\",\n    type=\"KUBERNETES\",\n    status=\"ENABLED\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.GetDelegate.Invoke(new()\n    {\n        Name = \"harness-delegate\",\n        Type = \"KUBERNETES\",\n        Status = \"ENABLED\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.GetDelegate(ctx, \u0026harness.GetDelegateArgs{\n\t\t\tName:   pulumi.StringRef(\"harness-delegate\"),\n\t\t\tType:   pulumi.StringRef(\"KUBERNETES\"),\n\t\t\tStatus: pulumi.StringRef(\"ENABLED\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetDelegateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = HarnessFunctions.getDelegate(GetDelegateArgs.builder()\n            .name(\"harness-delegate\")\n            .type(\"KUBERNETES\")\n            .status(\"ENABLED\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:getDelegate\n      Arguments:\n        name: harness-delegate\n        type: KUBERNETES\n        status: ENABLED\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDelegate.\n",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the delegate.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the delegate\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the delegate to query for.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDelegate.\n",
                "properties": {
                    "accountId": {
                        "description": "The account id the delegate belongs to.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the delegate.\n",
                        "type": "string"
                    },
                    "hostname": {
                        "description": "The hostname of the delegate.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique identifier of the delegate\n",
                        "type": "string"
                    },
                    "ip": {
                        "description": "The ip address of the delegate.\n",
                        "type": "string"
                    },
                    "lastHeartbeat": {
                        "description": "The last time the delegate was heard from.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the delegate to query for.\n",
                        "type": "string"
                    },
                    "pollingModeEnabled": {
                        "description": "Whether the delegate is in polling mode.\n",
                        "type": "boolean"
                    },
                    "profileId": {
                        "description": "The id of the profile assigned to the delegate.\n",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the delegate to query for. Valid values are DELETED, ENABLED, WAITING*FOR*APPROVAL\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of the delegate to query for. Valid values are DOCKER, ECS, HELM*DELEGATE, KUBERNETES, SHELL*SCRIPT\n",
                        "type": "string"
                    },
                    "version": {
                        "description": "The version of the delegate.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accountId",
                    "description",
                    "ip",
                    "lastHeartbeat",
                    "pollingModeEnabled",
                    "profileId",
                    "version"
                ],
                "type": "object"
            }
        },
        "harness:index/getEncryptedText:getEncryptedText": {
            "description": "Data source for retrieving a Harness application\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEncryptedText.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the encrypted secret\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the encrypted secret\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getEncryptedTextUsageScope:getEncryptedTextUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEncryptedText.\n",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the encrypted secret\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the encrypted secret\n",
                        "type": "string"
                    },
                    "secretManagerId": {
                        "description": "The id of the associated secret manager\n",
                        "type": "string"
                    },
                    "usageScopes": {
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n",
                        "items": {
                            "$ref": "#/types/harness:index/getEncryptedTextUsageScope:getEncryptedTextUsageScope"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "secretManagerId"
                ],
                "type": "object"
            }
        },
        "harness:index/getEnvironment:getEnvironment": {
            "description": "Data source for retrieving a Harness service\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironment.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application.\n"
                    },
                    "environmentId": {
                        "type": "string",
                        "description": "The id of the environment.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the environment.\n"
                    },
                    "variableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getEnvironmentVariableOverride:getEnvironmentVariableOverride"
                        },
                        "description": "Override for a service variable\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironment.\n",
                "properties": {
                    "appId": {
                        "description": "The id of the application.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the environment.\n",
                        "type": "string"
                    },
                    "environmentId": {
                        "description": "The id of the environment.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the environment.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the environment.\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of the environment. Valid values are `PROD` and `NON_PROD`\n",
                        "type": "string"
                    },
                    "variableOverrides": {
                        "description": "Override for a service variable\n",
                        "items": {
                            "$ref": "#/types/harness:index/getEnvironmentVariableOverride:getEnvironmentVariableOverride"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "appId",
                    "description",
                    "id",
                    "type",
                    "variableOverrides"
                ],
                "type": "object"
            }
        },
        "harness:index/getGitConnector:getGitConnector": {
            "description": "Data source for retrieving a Harness application\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitConnector.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the git connector.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the git connector.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGitConnector.\n",
                "properties": {
                    "branch": {
                        "description": "The branch of the git connector to use.\n",
                        "type": "string"
                    },
                    "commitDetails": {
                        "description": "Custom details to use when making commits using this git connector.\n",
                        "items": {
                            "$ref": "#/types/harness:index/getGitConnectorCommitDetail:getGitConnectorCommitDetail"
                        },
                        "type": "array"
                    },
                    "createdAt": {
                        "description": "The time the git connector was created.\n",
                        "type": "string"
                    },
                    "delegateSelectors": {
                        "description": "Delegate selectors to apply to this git connector.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "generateWebhookUrl": {
                        "description": "Boolean indicating whether or not to generate a webhook url.\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "Id of the git connector.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the git connector.\n",
                        "type": "string"
                    },
                    "passwordSecretId": {
                        "description": "The id of the secret for connecting to the git repository.\n",
                        "type": "string"
                    },
                    "sshSettingId": {
                        "description": "The id of the SSH secret to use.\n",
                        "type": "string"
                    },
                    "url": {
                        "description": "The URL of the git repository or account/organization.\n",
                        "type": "string"
                    },
                    "urlType": {
                        "description": "The type of git url being used. Options are `ACCOUNT`, and `REPO`.\n",
                        "type": "string"
                    },
                    "username": {
                        "description": "The name of the user used to connect to the git repository.\n",
                        "type": "string"
                    },
                    "webhookUrl": {
                        "description": "The generated webhook url.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "branch",
                    "commitDetails",
                    "createdAt",
                    "delegateSelectors",
                    "generateWebhookUrl",
                    "passwordSecretId",
                    "sshSettingId",
                    "url",
                    "urlType",
                    "username",
                    "webhookUrl"
                ],
                "type": "object"
            }
        },
        "harness:index/getSecretManager:getSecretManager": {
            "description": "Data source for retrieving a Harness secret manager\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecretManager.\n",
                "properties": {
                    "default": {
                        "type": "boolean",
                        "description": "True to lookup the id of the default secret manager\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the secret manager\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret manager\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getSecretManagerUsageScope:getSecretManagerUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecretManager.\n",
                "properties": {
                    "default": {
                        "description": "True to lookup the id of the default secret manager\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "Unique identifier of the secret manager\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the secret manager\n",
                        "type": "string"
                    },
                    "usageScopes": {
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n",
                        "items": {
                            "$ref": "#/types/harness:index/getSecretManagerUsageScope:getSecretManagerUsageScope"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/getService:getService": {
            "description": "Data source for retrieving a Harness service\n",
            "inputs": {
                "description": "A collection of arguments for invoking getService.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application the service belongs to\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the application\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId",
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getService.\n",
                "properties": {
                    "appId": {
                        "description": "The id of the application the service belongs to\n",
                        "type": "string"
                    },
                    "artifactType": {
                        "description": "The type of artifact deployed by the service\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "The application description\n",
                        "type": "string"
                    },
                    "helmVersion": {
                        "description": "The version of Helm being used by the service.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique identifier of the application\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the service\n",
                        "type": "string"
                    },
                    "tags": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Tags for the service\n",
                        "type": "object"
                    },
                    "templateUri": {
                        "description": "The path of the template used for the custom deployment\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of the deployment\n",
                        "type": "string"
                    }
                },
                "required": [
                    "appId",
                    "artifactType",
                    "description",
                    "helmVersion",
                    "id",
                    "name",
                    "tags",
                    "templateUri",
                    "type"
                ],
                "type": "object"
            }
        },
        "harness:index/getSshCredential:getSshCredential": {
            "description": "Data source for retrieving an SSH credential.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSshCredential.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the secret manager\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret manager\n"
                    },
                    "usageScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:index/getSshCredentialUsageScope:getSshCredentialUsageScope"
                        },
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSshCredential.\n",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the secret manager\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the secret manager\n",
                        "type": "string"
                    },
                    "usageScopes": {
                        "description": "This block is used for scoping the resource to a specific set of applications or environments.\n",
                        "items": {
                            "$ref": "#/types/harness:index/getSshCredentialUsageScope:getSshCredentialUsageScope"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/getSsoProvider:getSsoProvider": {
            "description": "Data source for retrieving an SSO providers\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSsoProvider.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the SSO provider.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSO provider.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSsoProvider.\n",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the SSO provider.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the SSO provider.\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of SSO provider.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            }
        },
        "harness:index/getTrigger:getTrigger": {
            "description": "Data source for retrieving a Harness trigger.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst exampleByName = harness.getTrigger({\n    appId: \"app_id\",\n    name: \"name\",\n});\nconst exampleById = harness.getTrigger({\n    id: \"trigger_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample_by_name = harness.get_trigger(app_id=\"app_id\",\n    name=\"name\")\nexample_by_id = harness.get_trigger(id=\"trigger_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleByName = Harness.GetTrigger.Invoke(new()\n    {\n        AppId = \"app_id\",\n        Name = \"name\",\n    });\n\n    var exampleById = Harness.GetTrigger.Invoke(new()\n    {\n        Id = \"trigger_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := harness.GetTrigger(ctx, \u0026harness.GetTriggerArgs{\n\t\t\tAppId: pulumi.StringRef(\"app_id\"),\n\t\t\tName:  pulumi.StringRef(\"name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = harness.GetTrigger(ctx, \u0026harness.GetTriggerArgs{\n\t\t\tId: pulumi.StringRef(\"trigger_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.HarnessFunctions;\nimport com.pulumi.harness.inputs.GetTriggerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleByName = HarnessFunctions.getTrigger(GetTriggerArgs.builder()\n            .appId(\"app_id\")\n            .name(\"name\")\n            .build());\n\n        final var exampleById = HarnessFunctions.getTrigger(GetTriggerArgs.builder()\n            .id(\"trigger_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleByName:\n    fn::invoke:\n      Function: harness:getTrigger\n      Arguments:\n        appId: app_id\n        name: name\n  exampleById:\n    fn::invoke:\n      Function: harness:getTrigger\n      Arguments:\n        id: trigger_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTrigger.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The id of the application.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The trigger description.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the trigger.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the trigger.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTrigger.\n",
                "properties": {
                    "appId": {
                        "description": "The id of the application.\n",
                        "type": "string"
                    },
                    "conditions": {
                        "description": "The condition that will execute the Trigger: On new artifact, On pipeline completion, On Cron schedule, On webhook, On New Manifest.\n",
                        "items": {
                            "$ref": "#/types/harness:index/getTriggerCondition:getTriggerCondition"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "The trigger description.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique identifier of the trigger.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the trigger.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "conditions"
                ],
                "type": "object"
            }
        },
        "harness:index/getUser:getUser": {
            "description": "Data source for retrieving a Harness user\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the user\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "email": {
                        "description": "The email of the user.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique identifier of the user\n",
                        "type": "string"
                    },
                    "isEmailVerified": {
                        "description": "Flag indicating whether or not the users email has been verified.\n",
                        "type": "boolean"
                    },
                    "isImportedFromIdentityProvider": {
                        "description": "Flag indicating whether or not the user was imported from an identity provider.\n",
                        "type": "boolean"
                    },
                    "isPasswordExpired": {
                        "description": "Flag indicating whether or not the users password has expired.\n",
                        "type": "boolean"
                    },
                    "isTwoFactorAuthEnabled": {
                        "description": "Flag indicating whether or not two-factor authentication is enabled for the user.\n",
                        "type": "boolean"
                    },
                    "isUserLocked": {
                        "description": "Flag indicating whether or not the user is locked out.\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "The name of the user.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "isEmailVerified",
                    "isImportedFromIdentityProvider",
                    "isPasswordExpired",
                    "isTwoFactorAuthEnabled",
                    "isUserLocked",
                    "name"
                ],
                "type": "object"
            }
        },
        "harness:index/getUserGroup:getUserGroup": {
            "description": "Data source for retrieving a Harness user group\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUserGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the user group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user group.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUserGroup.\n",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the user group\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the user group.\n",
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "harness:index/getYamlConfig:getYamlConfig": {
            "description": "Data source for retrieving a yaml config.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getYamlConfig.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "Unique identifier of the application. This is not required for account level resources (i.e. cloud providers, connectors, etc.).\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path to the yaml file.\n"
                    }
                },
                "type": "object",
                "required": [
                    "path"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getYamlConfig.\n",
                "properties": {
                    "appId": {
                        "description": "Unique identifier of the application. This is not required for account level resources (i.e. cloud providers, connectors, etc.).\n",
                        "type": "string"
                    },
                    "content": {
                        "description": "Content of the yaml file.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique identifier of the yaml resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the yaml resource.\n",
                        "type": "string"
                    },
                    "path": {
                        "description": "Path to the yaml file.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "content",
                    "id",
                    "name",
                    "path"
                ],
                "type": "object"
            }
        },
        "harness:platform/getApiKey:getApiKey": {
            "inputs": {
                "description": "A collection of arguments for invoking getApiKey.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "apikeyType": {
                        "type": "string"
                    },
                    "defaultTimeToExpireToken": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "identifier": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "apikeyType",
                    "identifier",
                    "name",
                    "parentId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getApiKey.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "apikeyType": {
                        "type": "string"
                    },
                    "defaultTimeToExpireToken": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "tags": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "accountId",
                    "apikeyType",
                    "identifier",
                    "name",
                    "parentId",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getAppDynamicsConnector:getAppDynamicsConnector": {
            "description": "Datasource for looking up an App Dynamics connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getAppDynamicsConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_app_dynamics_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetAppDynamicsConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupAppDynamicsConnector(ctx, \u0026platform.LookupAppDynamicsConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetAppDynamicsConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getAppDynamicsConnector(GetAppDynamicsConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getAppDynamicsConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAppDynamicsConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAppDynamicsConnector.\n",
                "properties": {
                    "accountName": {
                        "description": "The App Dynamics account name.\n",
                        "type": "string"
                    },
                    "apiTokens": {
                        "description": "Authenticate to App Dynamics using api token.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getAppDynamicsConnectorApiToken:getAppDynamicsConnectorApiToken"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "url": {
                        "description": "URL of the App Dynamics controller.\n",
                        "type": "string"
                    },
                    "usernamePasswords": {
                        "description": "Authenticate to App Dynamics using username and password.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getAppDynamicsConnectorUsernamePassword:getAppDynamicsConnectorUsernamePassword"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "accountName",
                    "apiTokens",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "usernamePasswords",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getArtifactoryConnector:getArtifactoryConnector": {
            "description": "Resource for looking up an App Dynamics connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getArtifactoryConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_artifactory_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetArtifactoryConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupArtifactoryConnector(ctx, \u0026platform.LookupArtifactoryConnectorArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetArtifactoryConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getArtifactoryConnector(GetArtifactoryConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getArtifactoryConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getArtifactoryConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getArtifactoryConnector.\n",
                "properties": {
                    "credentials": {
                        "description": "Credentials to use for authentication.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getArtifactoryConnectorCredential:getArtifactoryConnectorCredential"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "url": {
                        "description": "URL of the Artifactory server.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "tags",
                    "url",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getAwsCCConnector:getAwsCCConnector": {
            "description": "Datasource for looking up an AWS Cloud Cost connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getAwsCCConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_aws_cc_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetAwsCCConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupAwsCCConnector(ctx, \u0026platform.LookupAwsCCConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetAwsCCConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getAwsCCConnector(GetAwsCCConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getAwsCCConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAwsCCConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAwsCCConnector.\n",
                "properties": {
                    "accountId": {
                        "description": "The AWS account id.\n",
                        "type": "string"
                    },
                    "crossAccountAccesses": {
                        "description": "Harness uses the secure cross-account role to access your AWS account. The role includes a restricted policy to access the cost and usage reports and resources for the sole purpose of cost analysis and cost optimization.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsCCConnectorCrossAccountAccess:getAwsCCConnectorCrossAccountAccess"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "featuresEnableds": {
                        "description": "The features enabled for the connector. Valid values are BILLING, OPTIMIZATION, VISIBILITY.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "reportName": {
                        "description": "The cost and usage report name. Provided in the delivery options when the template is opened in the AWS console.\n",
                        "type": "string"
                    },
                    "s3Bucket": {
                        "description": "The name of s3 bucket.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "accountId",
                    "crossAccountAccesses",
                    "description",
                    "featuresEnableds",
                    "identifier",
                    "reportName",
                    "s3Bucket",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getAwsConnector:getAwsConnector": {
            "description": "Datasource for looking up an AWS connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getAwsConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_aws_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetAwsConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupAwsConnector(ctx, \u0026platform.LookupAwsConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetAwsConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getAwsConnector(GetAwsConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getAwsConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAwsConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAwsConnector.\n",
                "properties": {
                    "crossAccountAccesses": {
                        "description": "Select this option if you want to use one AWS account for the connection, but you want to deploy or build in a different AWS account. In this scenario, the AWS account used for AWS access in Credentials will assume the IAM role you specify in Cross-account role ARN setting. This option uses the AWS Security Token Service (STS) feature.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsConnectorCrossAccountAccess:getAwsConnectorCrossAccountAccess"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "equalJitterBackoffStrategies": {
                        "description": "Equal Jitter BackOff Strategy.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsConnectorEqualJitterBackoffStrategy:getAwsConnectorEqualJitterBackoffStrategy"
                        },
                        "type": "array"
                    },
                    "fixedDelayBackoffStrategies": {
                        "description": "Fixed Delay BackOff Strategy.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsConnectorFixedDelayBackoffStrategy:getAwsConnectorFixedDelayBackoffStrategy"
                        },
                        "type": "array"
                    },
                    "fullJitterBackoffStrategies": {
                        "description": "Full Jitter BackOff Strategy.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsConnectorFullJitterBackoffStrategy:getAwsConnectorFullJitterBackoffStrategy"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "inheritFromDelegates": {
                        "description": "Inherit credentials from the delegate.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsConnectorInheritFromDelegate:getAwsConnectorInheritFromDelegate"
                        },
                        "type": "array"
                    },
                    "irsas": {
                        "description": "Use IAM role for service accounts.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsConnectorIrsa:getAwsConnectorIrsa"
                        },
                        "type": "array"
                    },
                    "manuals": {
                        "description": "Use IAM role for service accounts.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsConnectorManual:getAwsConnectorManual"
                        },
                        "type": "array"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "crossAccountAccesses",
                    "description",
                    "equalJitterBackoffStrategies",
                    "fixedDelayBackoffStrategies",
                    "fullJitterBackoffStrategies",
                    "identifier",
                    "inheritFromDelegates",
                    "irsas",
                    "manuals",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getAwsKmsConnector:getAwsKmsConnector": {
            "description": "Datasource for looking up an AWS KMS connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getAwsKmsConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_aws_kms_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetAwsKmsConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupAwsKmsConnector(ctx, \u0026platform.LookupAwsKmsConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetAwsKmsConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getAwsKmsConnector(GetAwsKmsConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getAwsKmsConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAwsKmsConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAwsKmsConnector.\n",
                "properties": {
                    "arnRef": {
                        "description": "A reference to the Harness secret containing the ARN of the AWS KMS. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n",
                        "type": "string"
                    },
                    "credentials": {
                        "description": "Credentials to connect to AWS.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsKmsConnectorCredential:getAwsKmsConnectorCredential"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "region": {
                        "description": "The AWS region where the AWS Secret Manager is.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "arnRef",
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "region",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getAwsSecretManagerConnector:getAwsSecretManagerConnector": {
            "description": "Datasource for looking up an AWS Secret Manager connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getAwsSecretManagerConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_aws_secret_manager_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetAwsSecretManagerConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupAwsSecretManagerConnector(ctx, \u0026platform.LookupAwsSecretManagerConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetAwsSecretManagerConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getAwsSecretManagerConnector(GetAwsSecretManagerConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getAwsSecretManagerConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAwsSecretManagerConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAwsSecretManagerConnector.\n",
                "properties": {
                    "credentials": {
                        "description": "Credentials to connect to AWS.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getAwsSecretManagerConnectorCredential:getAwsSecretManagerConnectorCredential"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "region": {
                        "description": "The AWS region where the AWS Secret Manager is.\n",
                        "type": "string"
                    },
                    "secretNamePrefix": {
                        "description": "A prefix to be added to all secrets.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "region",
                    "secretNamePrefix",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getAzureCloudCostConnector:getAzureCloudCostConnector": {
            "description": "Datasource for looking up an Azure Cloud Cost Connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getAzureCloudCostConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_azure_cloud_cost_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetAzureCloudCostConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupAzureCloudCostConnector(ctx, \u0026platform.LookupAzureCloudCostConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetAzureCloudCostConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getAzureCloudCostConnector(GetAzureCloudCostConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getAzureCloudCostConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAzureCloudCostConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAzureCloudCostConnector.\n",
                "properties": {
                    "billingExportSpecs": {
                        "description": "Returns billing details for the Azure account.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getAzureCloudCostConnectorBillingExportSpec:getAzureCloudCostConnectorBillingExportSpec"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "featuresEnableds": {
                        "description": "Indicates which feature to enable among Billing, Optimization, and Visibility.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "subscriptionId": {
                        "description": "Subsription id.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "description": "Tenant id.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "billingExportSpecs",
                    "description",
                    "featuresEnableds",
                    "identifier",
                    "subscriptionId",
                    "tags",
                    "tenantId",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getAzureCloudProviderConnector:getAzureCloudProviderConnector": {
            "description": "Datasource for looking up an Azure Cloud Provider Connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getAzureCloudProviderConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_azure_cloud_provider_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetAzureCloudProviderConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupAzureCloudProviderConnector(ctx, \u0026platform.LookupAzureCloudProviderConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetAzureCloudProviderConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getAzureCloudProviderConnector(GetAzureCloudProviderConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getAzureCloudProviderConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAzureCloudProviderConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAzureCloudProviderConnector.\n",
                "properties": {
                    "azureEnvironmentType": {
                        "description": "Specifies the Azure Environment type, which is AZURE by default. Can either be AZURE or AZURE*US*GOVERNMENT\n",
                        "type": "string"
                    },
                    "credentials": {
                        "description": "Contains Azure connector credentials.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getAzureCloudProviderConnectorCredential:getAzureCloudProviderConnectorCredential"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "executeOnDelegate": {
                        "description": "Execute on delegate or not.\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "azureEnvironmentType",
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "executeOnDelegate",
                    "identifier",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getAzureKeyVaultConnector:getAzureKeyVaultConnector": {
            "description": "Data source for looking up an Azure key vault connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getAzureKeyVaultConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_azure_key_vault_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetAzureKeyVaultConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupAzureKeyVaultConnector(ctx, \u0026platform.LookupAzureKeyVaultConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetAzureKeyVaultConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getAzureKeyVaultConnector(GetAzureKeyVaultConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getAzureKeyVaultConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAzureKeyVaultConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAzureKeyVaultConnector.\n",
                "properties": {
                    "azureEnvironmentType": {
                        "description": "Azure environment type. Possible values: AZURE or AZURE*US*GOVERNMENT. Default value: AZURE\n",
                        "type": "string"
                    },
                    "clientId": {
                        "description": "Application ID of the Azure App.\n",
                        "type": "string"
                    },
                    "delegateSelectors": {
                        "description": "Connect using only the delegates which have these tags.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "isDefault": {
                        "description": "Specifies whether or not is the default value.\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "secretKey": {
                        "description": "The Harness text secret with the Azure authentication key as its value.\n",
                        "type": "string"
                    },
                    "subscription": {
                        "description": "Azure subscription ID.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "tenantId": {
                        "description": "The Azure Active Directory (AAD) directory ID where you created your application.\n",
                        "type": "string"
                    },
                    "vaultName": {
                        "description": "Name of the vault.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "azureEnvironmentType",
                    "clientId",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "isDefault",
                    "secretKey",
                    "subscription",
                    "tags",
                    "tenantId",
                    "vaultName",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getBitbucketConnector:getBitbucketConnector": {
            "description": "Datasource for looking up a Bitbucket connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getBitbucketConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_bitbucket_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetBitbucketConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupBitbucketConnector(ctx, \u0026platform.LookupBitbucketConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetBitbucketConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getBitbucketConnector(GetBitbucketConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getBitbucketConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getBitbucketConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getBitbucketConnector.\n",
                "properties": {
                    "apiAuthentications": {
                        "description": "Configuration for using the BitBucket api. API Access is required for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getBitbucketConnectorApiAuthentication:getBitbucketConnectorApiAuthentication"
                        },
                        "type": "array"
                    },
                    "connectionType": {
                        "description": "Whether the connection we're making is to a BitBucket repository or a BitBucket account. Valid values are Account, Repo.\n",
                        "type": "string"
                    },
                    "credentials": {
                        "description": "Credentials to use for the connection.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getBitbucketConnectorCredential:getBitbucketConnectorCredential"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "url": {
                        "description": "URL of the BitBucket repository or account.\n",
                        "type": "string"
                    },
                    "validationRepo": {
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "apiAuthentications",
                    "connectionType",
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "validationRepo",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getCcmFilters:getCcmFilters": {
            "description": "Data source for retrieving a Harness CCM Filter.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getCcmFilters({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    type: \"CCMRecommendation\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_ccm_filters(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    type=\"CCMRecommendation\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetCcmFilters.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Type = \"CCMRecommendation\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.GetCcmFilters(ctx, \u0026platform.GetCcmFiltersArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t\tType:       \"CCMRecommendation\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetCcmFiltersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getCcmFilters(GetCcmFiltersArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .type(\"CCMRecommendation\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getCcmFilters\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n        type: CCMRecommendation\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCcmFilters.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of filter.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier",
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCcmFilters.\n",
                "properties": {
                    "filterProperties": {
                        "description": "Properties of the filter entity defined in Harness.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getCcmFiltersFilterProperty:getCcmFiltersFilterProperty"
                        },
                        "type": "array"
                    },
                    "filterVisibility": {
                        "description": "This indicates visibility of filter. By default, everyone can view this filter.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the Filter.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Organization Identifier for the Entity.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project Identifier for the Entity.\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of filter.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "filterProperties",
                    "filterVisibility",
                    "identifier",
                    "name",
                    "type",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getCurrentUser:getCurrentUser": {
            "description": "Data source for retrieving the current user based on the API key.\n",
            "outputs": {
                "description": "A collection of values returned by getCurrentUser.\n",
                "properties": {
                    "admin": {
                        "description": "Whether the user is an administrator.\n",
                        "type": "boolean"
                    },
                    "billingFrequency": {
                        "description": "Billing frequency of the user.\n",
                        "type": "string"
                    },
                    "defaultAccountId": {
                        "description": "Default account ID of the user.\n",
                        "type": "string"
                    },
                    "edition": {
                        "description": "Edition of the platform being used.\n",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email address of the user.\n",
                        "type": "string"
                    },
                    "emailVerified": {
                        "description": "Whether the user's email address has been verified.\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "intent": {
                        "description": "Intent of the user.\n",
                        "type": "string"
                    },
                    "isTwoFactorAuthEnabled": {
                        "description": "Whether 2FA is enabled for the user.\n",
                        "type": "boolean"
                    },
                    "locked": {
                        "description": "Whether or not the user account is locked.\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Name of the user.\n",
                        "type": "string"
                    },
                    "signupAction": {
                        "description": "Signup action of the user.\n",
                        "type": "string"
                    },
                    "token": {
                        "description": "Token used to authenticate the user.\n",
                        "type": "string"
                    },
                    "uuid": {
                        "description": "Unique identifier of the user.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "admin",
                    "billingFrequency",
                    "defaultAccountId",
                    "edition",
                    "email",
                    "emailVerified",
                    "intent",
                    "isTwoFactorAuthEnabled",
                    "locked",
                    "name",
                    "signupAction",
                    "token",
                    "uuid",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getDatadogConnector:getDatadogConnector": {
            "description": "Datasource for looking up a Datadog connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getDatadogConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_datadog_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetDatadogConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupDatadogConnector(ctx, \u0026platform.LookupDatadogConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetDatadogConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getDatadogConnector(GetDatadogConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getDatadogConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatadogConnector.\n",
                "properties": {
                    "delegateSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags to filter delegates for connection.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatadogConnector.\n",
                "properties": {
                    "apiKeyRef": {
                        "description": "Reference to the Harness secret containing the api key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n",
                        "type": "string"
                    },
                    "applicationKeyRef": {
                        "description": "Reference to the Harness secret containing the application key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n",
                        "type": "string"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "url": {
                        "description": "URL of the Datadog server.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "apiKeyRef",
                    "applicationKeyRef",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getDockerConnector:getDockerConnector": {
            "description": "Datasource for looking up a Datadog connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getDockerConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_docker_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetDockerConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupDockerConnector(ctx, \u0026platform.LookupDockerConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetDockerConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getDockerConnector(GetDockerConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getDockerConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDockerConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDockerConnector.\n",
                "properties": {
                    "credentials": {
                        "description": "The credentials to use for the docker registry. If not specified then the connection is made to the registry anonymously.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getDockerConnectorCredential:getDockerConnectorCredential"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "The type of the docker registry. Valid options are DockerHub, Harbor, Other, Quay\n",
                        "type": "string"
                    },
                    "url": {
                        "description": "The URL of the docker registry.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "type",
                    "url",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getDynatraceConnector:getDynatraceConnector": {
            "description": "Datasource for looking up a Dynatrace connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getDynatraceConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_dynatrace_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetDynatraceConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupDynatraceConnector(ctx, \u0026platform.LookupDynatraceConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetDynatraceConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getDynatraceConnector(GetDynatraceConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getDynatraceConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDynatraceConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDynatraceConnector.\n",
                "properties": {
                    "apiTokenRef": {
                        "description": "The reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n",
                        "type": "string"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "url": {
                        "description": "URL of the Dynatrace server.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "apiTokenRef",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getElasticsearchConnector:getElasticsearchConnector": {
            "description": "Datasource for looking up an ElasticSearch connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getElasticsearchConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_elasticsearch_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetElasticsearchConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupElasticsearchConnector(ctx, \u0026platform.LookupElasticsearchConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetElasticsearchConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getElasticsearchConnector(GetElasticsearchConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getElasticsearchConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getElasticsearchConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getElasticsearchConnector.\n",
                "properties": {
                    "apiTokens": {
                        "description": "Authenticate to ElasticSearch using api token.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getElasticsearchConnectorApiToken:getElasticsearchConnectorApiToken"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "url": {
                        "description": "URL of the ElasticSearch controller.\n",
                        "type": "string"
                    },
                    "usernamePasswords": {
                        "description": "Authenticate to ElasticSearch using username and password.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getElasticsearchConnectorUsernamePassword:getElasticsearchConnectorUsernamePassword"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "apiTokens",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "usernamePasswords",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getEnvironment:getEnvironment": {
            "description": "Data source for retrieving a Harness environment.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getEnvironment({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_environment(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetEnvironment.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupEnvironment(ctx, \u0026platform.LookupEnvironmentArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getEnvironment(GetEnvironmentArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getEnvironment\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironment.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironment.\n",
                "properties": {
                    "color": {
                        "description": "Color of the environment.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "The type of environment.\n",
                        "type": "string"
                    },
                    "yaml": {
                        "description": "Input Set YAML\n",
                        "type": "string"
                    }
                },
                "required": [
                    "color",
                    "description",
                    "identifier",
                    "tags",
                    "type",
                    "yaml",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getEnvironmentClustersMapping:getEnvironmentClustersMapping": {
            "description": "Data source for retrieving a Harness Cluster.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getEnvironmentClustersMapping({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_environment_clusters_mapping(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetEnvironmentClustersMapping.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupEnvironmentClustersMapping(ctx, \u0026platform.LookupEnvironmentClustersMappingArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetEnvironmentClustersMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getEnvironmentClustersMapping(GetEnvironmentClustersMappingArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getEnvironmentClustersMapping\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironmentClustersMapping.\n",
                "properties": {
                    "envId": {
                        "type": "string",
                        "description": "environment identifier of the cluster.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "identifier of the cluster.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "org_id of the cluster.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project_id of the cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "envId",
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironmentClustersMapping.\n",
                "properties": {
                    "envId": {
                        "description": "environment identifier of the cluster.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "identifier of the cluster.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "org_id of the cluster.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "project_id of the cluster.\n",
                        "type": "string"
                    },
                    "scope": {
                        "description": "scope at which the cluster exists in harness gitops\n",
                        "type": "string"
                    }
                },
                "required": [
                    "envId",
                    "identifier",
                    "scope",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getEnvironmentGroup:getEnvironmentGroup": {
            "description": "Data source for retrieving a Harness environment group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getEnvironmentGroup({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_environment_group(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetEnvironmentGroup.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupEnvironmentGroup(ctx, \u0026platform.LookupEnvironmentGroupArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      \"org_id\",\n\t\t\tProjectId:  \"project_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetEnvironmentGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getEnvironmentGroup(GetEnvironmentGroupArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getEnvironmentGroup\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironmentGroup.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Color of the environment group.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "identifier of the environment group.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "org_id of the environment group.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project_id of the environment group.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier",
                    "orgId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironmentGroup.\n",
                "properties": {
                    "color": {
                        "description": "Color of the environment group.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "identifier of the environment group.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "org_id of the environment group.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "project_id of the environment group.\n",
                        "type": "string"
                    },
                    "yaml": {
                        "description": "Input Set YAML\n",
                        "type": "string"
                    }
                },
                "required": [
                    "color",
                    "identifier",
                    "orgId",
                    "projectId",
                    "yaml",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getEnvironmentServiceOverrides:getEnvironmentServiceOverrides": {
            "description": "Data source for Harness environment service overrides.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getEnvironmentServiceOverrides({\n    orgId: \"orgIdentifier\",\n    projectId: \"projectIdentifier\",\n    envId: \"environmentIdentifier\",\n    serviceId: \"serviceIdentifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_environment_service_overrides(org_id=\"orgIdentifier\",\n    project_id=\"projectIdentifier\",\n    env_id=\"environmentIdentifier\",\n    service_id=\"serviceIdentifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetEnvironmentServiceOverrides.Invoke(new()\n    {\n        OrgId = \"orgIdentifier\",\n        ProjectId = \"projectIdentifier\",\n        EnvId = \"environmentIdentifier\",\n        ServiceId = \"serviceIdentifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupEnvironmentServiceOverrides(ctx, \u0026platform.LookupEnvironmentServiceOverridesArgs{\n\t\t\tOrgId:     pulumi.StringRef(\"orgIdentifier\"),\n\t\t\tProjectId: pulumi.StringRef(\"projectIdentifier\"),\n\t\t\tEnvId:     \"environmentIdentifier\",\n\t\t\tServiceId: pulumi.StringRef(\"serviceIdentifier\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetEnvironmentServiceOverridesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getEnvironmentServiceOverrides(GetEnvironmentServiceOverridesArgs.builder()\n            .orgId(\"orgIdentifier\")\n            .projectId(\"projectIdentifier\")\n            .envId(\"environmentIdentifier\")\n            .serviceId(\"serviceIdentifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getEnvironmentServiceOverrides\n      Arguments:\n        orgId: orgIdentifier\n        projectId: projectIdentifier\n        envId: environmentIdentifier\n        serviceId: serviceIdentifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironmentServiceOverrides.\n",
                "properties": {
                    "envId": {
                        "type": "string",
                        "description": "The env Id associated with the overrides. To reference an environment at the organization scope, prefix 'org' to the expression: org.{env*id}. To reference an environment at the account scope, prefix 'account' to the expression: account.{env*id}).\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "identifier of the service overrides.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The service Id associated with the overrides. To reference a service at the organization scope, prefix 'org' to the expression: org.{service*id}. To reference a service at the account scope, prefix 'account' to the expression: account.{service*id}).\n"
                    }
                },
                "type": "object",
                "required": [
                    "envId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironmentServiceOverrides.\n",
                "properties": {
                    "envId": {
                        "description": "The env Id associated with the overrides. To reference an environment at the organization scope, prefix 'org' to the expression: org.{env*id}. To reference an environment at the account scope, prefix 'account' to the expression: account.{env*id}).\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "identifier of the service overrides.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "serviceId": {
                        "description": "The service Id associated with the overrides. To reference a service at the organization scope, prefix 'org' to the expression: org.{service*id}. To reference a service at the account scope, prefix 'account' to the expression: account.{service*id}).\n",
                        "type": "string"
                    },
                    "yaml": {
                        "description": "Environment Service Overrides YAML\n",
                        "type": "string"
                    }
                },
                "required": [
                    "envId",
                    "identifier",
                    "yaml",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getFilters:getFilters": {
            "description": "Data source for retrieving a Harness Filter. This data source allow to fetch filters of types {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getFilters({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    type: \"Connector\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_filters(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    type=\"Connector\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetFilters.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Type = \"Connector\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupFilters(ctx, \u0026platform.LookupFiltersArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t\tType:       \"Connector\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetFiltersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getFilters(GetFiltersArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .type(\"Connector\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getFilters\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n        type: Connector\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFilters.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "organization Identifier for the Entity\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project Identifier for the Entity\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier",
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFilters.\n",
                "properties": {
                    "filterProperties": {
                        "description": "Properties of the filter entity defined in Harness.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getFiltersFilterProperty:getFiltersFilterProperty"
                        },
                        "type": "array"
                    },
                    "filterVisibility": {
                        "description": "This indicates visibility of filter. By default, everyone can view this filter.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the Filter\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "organization Identifier for the Entity\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "project Identifier for the Entity\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of filter. Currently supported types are {Connector, DelegateProfile, Delegate, EnvironmentGroup, FileStore, Environment}.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "filterProperties",
                    "filterVisibility",
                    "identifier",
                    "name",
                    "type",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getGcpCloudCostConnector:getGcpCloudCostConnector": {
            "description": "Datasource for looking up a GCP Cloud Cost Connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGcpCloudCostConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_gcp_cloud_cost_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGcpCloudCostConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupGcpCloudCostConnector(ctx, \u0026platform.LookupGcpCloudCostConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGcpCloudCostConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGcpCloudCostConnector(GetGcpCloudCostConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGcpCloudCostConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGcpCloudCostConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGcpCloudCostConnector.\n",
                "properties": {
                    "billingExportSpecs": {
                        "description": "Returns billing details.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getGcpCloudCostConnectorBillingExportSpec:getGcpCloudCostConnectorBillingExportSpec"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "featuresEnableds": {
                        "description": "Indicates which features to enable among Billing, Optimization, and Visibility.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "gcpProjectId": {
                        "description": "GCP Project Id.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "serviceAccountEmail": {
                        "description": "Email corresponding to the Service Account.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "billingExportSpecs",
                    "description",
                    "featuresEnableds",
                    "gcpProjectId",
                    "identifier",
                    "serviceAccountEmail",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getGcpConnector:getGcpConnector": {
            "description": "Datasource for looking up a Gcp connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGcpConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_gcp_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGcpConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupGcpConnector(ctx, \u0026platform.LookupGcpConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGcpConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGcpConnector(GetGcpConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGcpConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGcpConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGcpConnector.\n",
                "properties": {
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "inheritFromDelegates": {
                        "description": "Inherit configuration from delegate.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getGcpConnectorInheritFromDelegate:getGcpConnectorInheritFromDelegate"
                        },
                        "type": "array"
                    },
                    "manuals": {
                        "description": "Manual credential configuration.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getGcpConnectorManual:getGcpConnectorManual"
                        },
                        "type": "array"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "description",
                    "identifier",
                    "inheritFromDelegates",
                    "manuals",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getGcpSecretManagerConnector:getGcpSecretManagerConnector": {
            "description": "Datasource for looking up GCP Secret Manager connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGcpSecretManagerConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_gcp_secret_manager_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGcpSecretManagerConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupGcpSecretManagerConnector(ctx, \u0026platform.LookupGcpSecretManagerConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGcpSecretManagerConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGcpSecretManagerConnector(GetGcpSecretManagerConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGcpSecretManagerConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGcpSecretManagerConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGcpSecretManagerConnector.\n",
                "properties": {
                    "credentialsRef": {
                        "description": "Reference to the secret containing credentials of IAM service account for Google Secret Manager. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n",
                        "type": "string"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "isDefault": {
                        "description": "Indicative if this is default Secret manager for secrets.\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "credentialsRef",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "isDefault",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getGitConnector:getGitConnector": {
            "description": "Datasource for looking up a Git connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGitConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_git_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGitConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupGitConnector(ctx, \u0026platform.LookupGitConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGitConnector(GetGitConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGitConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitConnector.\n",
                "properties": {
                    "connectionType": {
                        "description": "Whether the connection we're making is to a git repository or a git account. Valid values are Account, Repo.\n",
                        "type": "string"
                    },
                    "credentials": {
                        "description": "Credentials to use for the connection.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitConnectorCredential:getGitConnectorCredential"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "url": {
                        "description": "URL of the git repository or account.\n",
                        "type": "string"
                    },
                    "validationRepo": {
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "connectionType",
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "validationRepo",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getGithubConnector:getGithubConnector": {
            "description": "Datasource for looking up a Github connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGithubConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_github_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGithubConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupGithubConnector(ctx, \u0026platform.LookupGithubConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGithubConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGithubConnector(GetGithubConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGithubConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGithubConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGithubConnector.\n",
                "properties": {
                    "apiAuthentications": {
                        "description": "Configuration for using the github api. API Access is Computed for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getGithubConnectorApiAuthentication:getGithubConnectorApiAuthentication"
                        },
                        "type": "array"
                    },
                    "connectionType": {
                        "description": "Whether the connection we're making is to a github repository or a github account. Valid values are Account, Repo.\n",
                        "type": "string"
                    },
                    "credentials": {
                        "description": "Credentials to use for the connection.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getGithubConnectorCredential:getGithubConnectorCredential"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "executeOnDelegate": {
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "url": {
                        "description": "URL of the github repository or account.\n",
                        "type": "string"
                    },
                    "validationRepo": {
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "apiAuthentications",
                    "connectionType",
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "executeOnDelegate",
                    "identifier",
                    "tags",
                    "url",
                    "validationRepo",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getGitlabConnector:getGitlabConnector": {
            "description": "Datasource for looking up a Gitlab connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGitlabConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_gitlab_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGitlabConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupGitlabConnector(ctx, \u0026platform.LookupGitlabConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitlabConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGitlabConnector(GetGitlabConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGitlabConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitlabConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitlabConnector.\n",
                "properties": {
                    "apiAuthentications": {
                        "description": "Configuration for using the gitlab api. API Access is Computed for using “Git Experience”, for creation of Git based triggers, Webhooks management and updating Git statuses.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitlabConnectorApiAuthentication:getGitlabConnectorApiAuthentication"
                        },
                        "type": "array"
                    },
                    "connectionType": {
                        "description": "Whether the connection we're making is to a gitlab repository or a gitlab account. Valid values are Account, Repo.\n",
                        "type": "string"
                    },
                    "credentials": {
                        "description": "Credentials to use for the connection.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitlabConnectorCredential:getGitlabConnectorCredential"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "url": {
                        "description": "URL of the gitlab repository or account.\n",
                        "type": "string"
                    },
                    "validationRepo": {
                        "description": "Repository to test the connection with. This is only used when `connection_type` is `Account`.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "apiAuthentications",
                    "connectionType",
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "validationRepo",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getGitopsAgent:getGitopsAgent": {
            "description": "Datasource for fetching a Harness Gitops Agents.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGitopsAgent({\n    identifier: \"identifier\",\n    accountId: \"account_id\",\n    projectId: \"project_id\",\n    orgId: \"org_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_gitops_agent(identifier=\"identifier\",\n    account_id=\"account_id\",\n    project_id=\"project_id\",\n    org_id=\"org_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGitopsAgent.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        AccountId = \"account_id\",\n        ProjectId = \"project_id\",\n        OrgId = \"org_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.GetGitopsAgent(ctx, \u0026platform.GetGitopsAgentArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tAccountId:  \"account_id\",\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitopsAgentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGitopsAgent(GetGitopsAgentArgs.builder()\n            .identifier(\"identifier\")\n            .accountId(\"account_id\")\n            .projectId(\"project_id\")\n            .orgId(\"org_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGitopsAgent\n      Arguments:\n        identifier: identifier\n        accountId: account_id\n        projectId: project_id\n        orgId: org_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitopsAgent.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps agent.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps agent.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the GitOps agent.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps agent.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitopsAgent.\n",
                "properties": {
                    "accountId": {
                        "description": "Account identifier of the GitOps agent.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the GitOps agent.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Identifier of the GitOps agent.\n",
                        "type": "string"
                    },
                    "metadatas": {
                        "description": "Metadata of the agent.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsAgentMetadata:getGitopsAgentMetadata"
                        },
                        "type": "array"
                    },
                    "name": {
                        "description": "Name of the GitOps agent.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Organization identifier of the GitOps agent.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project identifier of the GitOps agent.\n",
                        "type": "string"
                    },
                    "tags": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Tags for the GitOps agents. These can be used to search or filter the GitOps agents.\n",
                        "type": "object"
                    },
                    "type": {
                        "description": "Default: \"AGENT*TYPE*UNSET\"\nEnum: \"AGENT*TYPE*UNSET\" \"CONNECTED*ARGO*PROVIDER\" \"MANAGED*ARGO*PROVIDER\"\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accountId",
                    "description",
                    "identifier",
                    "metadatas",
                    "name",
                    "tags",
                    "type",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getGitopsAgentDeployYaml:getGitopsAgentDeployYaml": {
            "description": "Datasource for fetching a Harness Gitops Agents.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGitopsAgentDeployYaml({\n    identifier: \"identifier\",\n    accountId: \"account_id\",\n    projectId: \"project_id\",\n    orgId: \"org_id\",\n    namespace: \"namespace\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_gitops_agent_deploy_yaml(identifier=\"identifier\",\n    account_id=\"account_id\",\n    project_id=\"project_id\",\n    org_id=\"org_id\",\n    namespace=\"namespace\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGitopsAgentDeployYaml.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        AccountId = \"account_id\",\n        ProjectId = \"project_id\",\n        OrgId = \"org_id\",\n        Namespace = \"namespace\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.GetGitopsAgentDeployYaml(ctx, \u0026platform.GetGitopsAgentDeployYamlArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tAccountId:  \"account_id\",\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tNamespace:  \"namespace\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitopsAgentDeployYamlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGitopsAgentDeployYaml(GetGitopsAgentDeployYamlArgs.builder()\n            .identifier(\"identifier\")\n            .accountId(\"account_id\")\n            .projectId(\"project_id\")\n            .orgId(\"org_id\")\n            .namespace(\"namespace\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGitopsAgentDeployYaml\n      Arguments:\n        identifier: identifier\n        accountId: account_id\n        projectId: project_id\n        orgId: org_id\n        namespace: namespace\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitopsAgentDeployYaml.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps agent.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps agent.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The k8s namespace that the GitOps agent resides in.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the GitOps agent.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps agent.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "identifier",
                    "namespace"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitopsAgentDeployYaml.\n",
                "properties": {
                    "accountId": {
                        "description": "Account identifier of the GitOps agent.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Identifier of the GitOps agent.\n",
                        "type": "string"
                    },
                    "namespace": {
                        "description": "The k8s namespace that the GitOps agent resides in.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Organization identifier of the GitOps agent.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project identifier of the GitOps agent.\n",
                        "type": "string"
                    },
                    "yaml": {
                        "description": "Deployment YAML of the GitOps agent.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accountId",
                    "identifier",
                    "namespace",
                    "yaml",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getGitopsApplications:getGitopsApplications": {
            "description": "Datasource for fetching a Harness GitOps Application.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGitopsApplications({\n    identifier: \"identifier\",\n    accountId: \"account_id\",\n    projectId: \"project_id\",\n    orgId: \"org_id\",\n    agentId: \"agent_id\",\n    repoId: \"repo_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_gitops_applications(identifier=\"identifier\",\n    account_id=\"account_id\",\n    project_id=\"project_id\",\n    org_id=\"org_id\",\n    agent_id=\"agent_id\",\n    repo_id=\"repo_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGitopsApplications.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        AccountId = \"account_id\",\n        ProjectId = \"project_id\",\n        OrgId = \"org_id\",\n        AgentId = \"agent_id\",\n        RepoId = \"repo_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.GetGitopsApplications(ctx, \u0026platform.GetGitopsApplicationsArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t\tAccountId:  \"account_id\",\n\t\t\tProjectId:  \"project_id\",\n\t\t\tOrgId:      \"org_id\",\n\t\t\tAgentId:    \"agent_id\",\n\t\t\tRepoId:     \"repo_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitopsApplicationsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGitopsApplications(GetGitopsApplicationsArgs.builder()\n            .identifier(\"identifier\")\n            .accountId(\"account_id\")\n            .projectId(\"project_id\")\n            .orgId(\"org_id\")\n            .agentId(\"agent_id\")\n            .repoId(\"repo_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGitopsApplications\n      Arguments:\n        identifier: identifier\n        accountId: account_id\n        projectId: project_id\n        orgId: org_id\n        agentId: agent_id\n        repoId: repo_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitopsApplications.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps application.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier of the GitOps application.\n"
                    },
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsApplicationsApplication:getGitopsApplicationsApplication"
                        },
                        "description": "Definition of the GitOps application resource.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "Cluster identifier of the GitOps application.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps application.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "Kind of the GitOps application.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the GitOps application.\n"
                    },
                    "optionsRemoveExistingFinalizers": {
                        "type": "boolean",
                        "description": "Options to remove existing finalizers to delete the GitOps application.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the GitOps application.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the 'default' project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps application.\n"
                    },
                    "queryProject": {
                        "type": "string",
                        "description": "Project names to filter the corresponding GitOps applications.\n"
                    },
                    "queryRefresh": {
                        "type": "string",
                        "description": "Forces the GitOps application to reconcile when set to true.\n"
                    },
                    "queryRepo": {
                        "type": "string",
                        "description": "Repo URL to restrict returned list applications.\n"
                    },
                    "queryResourceVersion": {
                        "type": "string",
                        "description": "Shows modifications after a version that is specified with a watch call.\n"
                    },
                    "querySelector": {
                        "type": "string",
                        "description": "Filters GitOps applications corresponding to the labels.\n"
                    },
                    "repoId": {
                        "type": "string",
                        "description": "Repository identifier of the GitOps application.\n"
                    },
                    "requestCascade": {
                        "type": "boolean",
                        "description": "Request cascade to delete the GitOps application.\n"
                    },
                    "requestName": {
                        "type": "string",
                        "description": "Request name to delete the GitOps application.\n"
                    },
                    "requestPropagationPolicy": {
                        "type": "string",
                        "description": "Request propagation policy to delete the GitOps application.\n"
                    },
                    "upsert": {
                        "type": "boolean",
                        "description": "Indicates if the GitOps application should be updated if existing and inserted if not.\n"
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "Indicates if the GitOps application has to be validated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "agentId",
                    "name",
                    "orgId",
                    "projectId",
                    "repoId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitopsApplications.\n",
                "properties": {
                    "accountId": {
                        "description": "Account identifier of the GitOps application.\n",
                        "type": "string"
                    },
                    "agentId": {
                        "description": "Agent identifier of the GitOps application.\n",
                        "type": "string"
                    },
                    "applications": {
                        "description": "Definition of the GitOps application resource.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsApplicationsApplication:getGitopsApplicationsApplication"
                        },
                        "type": "array"
                    },
                    "clusterId": {
                        "description": "Cluster identifier of the GitOps application.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Identifier of the GitOps application.\n",
                        "type": "string"
                    },
                    "kind": {
                        "description": "Kind of the GitOps application.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the GitOps application.\n",
                        "type": "string"
                    },
                    "optionsRemoveExistingFinalizers": {
                        "description": "Options to remove existing finalizers to delete the GitOps application.\n",
                        "type": "boolean"
                    },
                    "orgId": {
                        "description": "Organization identifier of the GitOps application.\n",
                        "type": "string"
                    },
                    "project": {
                        "description": "Reference to the project corresponding to this GitOps application. An empty string means that the GitOps application belongs to the 'default' project.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project identifier of the GitOps application.\n",
                        "type": "string"
                    },
                    "queryProject": {
                        "description": "Project names to filter the corresponding GitOps applications.\n",
                        "type": "string"
                    },
                    "queryRefresh": {
                        "description": "Forces the GitOps application to reconcile when set to true.\n",
                        "type": "string"
                    },
                    "queryRepo": {
                        "description": "Repo URL to restrict returned list applications.\n",
                        "type": "string"
                    },
                    "queryResourceVersion": {
                        "description": "Shows modifications after a version that is specified with a watch call.\n",
                        "type": "string"
                    },
                    "querySelector": {
                        "description": "Filters GitOps applications corresponding to the labels.\n",
                        "type": "string"
                    },
                    "repoId": {
                        "description": "Repository identifier of the GitOps application.\n",
                        "type": "string"
                    },
                    "requestCascade": {
                        "description": "Request cascade to delete the GitOps application.\n",
                        "type": "boolean"
                    },
                    "requestName": {
                        "description": "Request name to delete the GitOps application.\n",
                        "type": "string"
                    },
                    "requestPropagationPolicy": {
                        "description": "Request propagation policy to delete the GitOps application.\n",
                        "type": "string"
                    },
                    "upsert": {
                        "description": "Indicates if the GitOps application should be updated if existing and inserted if not.\n",
                        "type": "boolean"
                    },
                    "validate": {
                        "description": "Indicates if the GitOps application has to be validated.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "accountId",
                    "agentId",
                    "name",
                    "orgId",
                    "projectId",
                    "repoId",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getGitopsCluster:getGitopsCluster": {
            "description": "Data source for fetching a Harness GitOps Cluster.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGitopsCluster({\n    identifier: \"identifier\",\n    accountId: \"account_id\",\n    projectId: \"project_id\",\n    orgId: \"org_id\",\n    agentId: \"agent_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_gitops_cluster(identifier=\"identifier\",\n    account_id=\"account_id\",\n    project_id=\"project_id\",\n    org_id=\"org_id\",\n    agent_id=\"agent_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGitopsCluster.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        AccountId = \"account_id\",\n        ProjectId = \"project_id\",\n        OrgId = \"org_id\",\n        AgentId = \"agent_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.GetGitopsCluster(ctx, \u0026platform.GetGitopsClusterArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tAccountId:  \"account_id\",\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tAgentId:    \"agent_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitopsClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGitopsCluster(GetGitopsClusterArgs.builder()\n            .identifier(\"identifier\")\n            .accountId(\"account_id\")\n            .projectId(\"project_id\")\n            .orgId(\"org_id\")\n            .agentId(\"agent_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGitopsCluster\n      Arguments:\n        identifier: identifier\n        accountId: account_id\n        projectId: project_id\n        orgId: org_id\n        agentId: agent_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitopsCluster.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps cluster.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier of the GitOps cluster.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps cluster.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the cluster.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps cluster.\n"
                    },
                    "queries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsClusterQuery:getGitopsClusterQuery"
                        },
                        "description": "Query for the GitOps cluster resources.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "agentId",
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitopsCluster.\n",
                "properties": {
                    "accountId": {
                        "description": "Account identifier of the GitOps cluster.\n",
                        "type": "string"
                    },
                    "agentId": {
                        "description": "Agent identifier of the GitOps cluster.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Identifier of the GitOps cluster.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Organization identifier of the cluster.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project identifier of the GitOps cluster.\n",
                        "type": "string"
                    },
                    "queries": {
                        "description": "Query for the GitOps cluster resources.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsClusterQuery:getGitopsClusterQuery"
                        },
                        "type": "array"
                    },
                    "requests": {
                        "description": "Cluster create or update request.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsClusterRequest:getGitopsClusterRequest"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "accountId",
                    "agentId",
                    "identifier",
                    "requests",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getGitopsGnupg:getGitopsGnupg": {
            "description": "Data source for retrieving a GPG public key in the server's configuration.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGitopsGnupg({\n    accountId: \"account_id\",\n    agentId: \"agent_id\",\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_gitops_gnupg(account_id=\"account_id\",\n    agent_id=\"agent_id\",\n    identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGitopsGnupg.Invoke(new()\n    {\n        AccountId = \"account_id\",\n        AgentId = \"agent_id\",\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.GetGitopsGnupg(ctx, \u0026platform.GetGitopsGnupgArgs{\n\t\t\tAccountId:  \"account_id\",\n\t\t\tAgentId:    \"agent_id\",\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitopsGnupgArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGitopsGnupg(GetGitopsGnupgArgs.builder()\n            .accountId(\"account_id\")\n            .agentId(\"agent_id\")\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGitopsGnupg\n      Arguments:\n        accountId: account_id\n        agentId: agent_id\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitopsGnupg.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier for the GnuPG Key.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier for the GnuPG Key.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier for the GnuPG Key.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the GnuPG Key.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the GnuPG Key.\n"
                    },
                    "requests": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsGnupgRequest:getGitopsGnupgRequest"
                        },
                        "description": "GnuPGPublicKey is a representation of a GnuPG public key\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "agentId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitopsGnupg.\n",
                "properties": {
                    "accountId": {
                        "description": "Account Identifier for the GnuPG Key.\n",
                        "type": "string"
                    },
                    "agentId": {
                        "description": "Agent identifier for the GnuPG Key.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Identifier for the GnuPG Key.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Organization Identifier for the GnuPG Key.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project Identifier for the GnuPG Key.\n",
                        "type": "string"
                    },
                    "requests": {
                        "description": "GnuPGPublicKey is a representation of a GnuPG public key\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsGnupgRequest:getGitopsGnupgRequest"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "accountId",
                    "agentId",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getGitopsRepoCert:getGitopsRepoCert": {
            "description": "Data source for retrieving a GitOps RepoCert.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitopsRepoCertArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getGitopsRepoCert(GetGitopsRepoCertArgs.builder()\n            .identifier(\"identifier\")\n            .accountId(\"account_id\")\n            .projectId(\"project_id\")\n            .orgId(\"org_id\")\n            .agentId(\"agent_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getGitopsRepoCert\n      Arguments:\n        identifier: identifier\n        accountId: account_id\n        projectId: project_id\n        orgId: org_id\n        agentId: agent_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitopsRepoCert.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "account identifier of the Repository Certificates.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "agent identifier of the Repository Certificates.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "organization identifier of the Repository Certificates.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "project identifier of the Repository Certificates.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitopsRepoCert.\n",
                "properties": {
                    "accountId": {
                        "description": "account identifier of the Repository Certificates.\n",
                        "type": "string"
                    },
                    "agentId": {
                        "description": "agent identifier of the Repository Certificates.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "organization identifier of the Repository Certificates.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "project identifier of the Repository Certificates.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accountId",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getGitopsRepoCred:getGitopsRepoCred": {
            "description": "Data source for retrieving a GitOps RepoCred.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getGitopsRepoCred({\n    identifier: \"identifier\",\n    accountId: \"account_id\",\n    projectId: \"project_id\",\n    orgId: \"org_id\",\n    agentId: \"agent_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_gitops_repo_cred(identifier=\"identifier\",\n    account_id=\"account_id\",\n    project_id=\"project_id\",\n    org_id=\"org_id\",\n    agent_id=\"agent_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetGitopsRepoCred.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        AccountId = \"account_id\",\n        ProjectId = \"project_id\",\n        OrgId = \"org_id\",\n        AgentId = \"agent_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.GetGitopsRepoCred(ctx, \u0026platform.GetGitopsRepoCredArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tAccountId:  \"account_id\",\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tAgentId:    \"agent_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitopsRepoCredArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getGitopsRepoCred(GetGitopsRepoCredArgs.builder()\n            .identifier(\"identifier\")\n            .accountId(\"account_id\")\n            .projectId(\"project_id\")\n            .orgId(\"org_id\")\n            .agentId(\"agent_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getGitopsRepoCred\n      Arguments:\n        identifier: identifier\n        accountId: account_id\n        projectId: project_id\n        orgId: org_id\n        agentId: agent_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitopsRepoCred.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "account identifier of the Repository Credentials.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "agent identifier of the Repository Credentials.\n"
                    },
                    "creds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsRepoCredCred:getGitopsRepoCredCred"
                        },
                        "description": "credential details.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the Repository Credentials.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the Repository Credential.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the Repository Credential.\n"
                    },
                    "upsert": {
                        "type": "boolean",
                        "description": "if the Repository credential should be upserted.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "agentId",
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitopsRepoCred.\n",
                "properties": {
                    "accountId": {
                        "description": "account identifier of the Repository Credentials.\n",
                        "type": "string"
                    },
                    "agentId": {
                        "description": "agent identifier of the Repository Credentials.\n",
                        "type": "string"
                    },
                    "creds": {
                        "description": "credential details.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsRepoCredCred:getGitopsRepoCredCred"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Identifier of the Repository Credentials.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Organization identifier of the Repository Credential.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project identifier of the Repository Credential.\n",
                        "type": "string"
                    },
                    "upsert": {
                        "description": "if the Repository credential should be upserted.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "accountId",
                    "agentId",
                    "creds",
                    "identifier",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getGitopsRepository:getGitopsRepository": {
            "description": "Data Source for fetching a Harness GitOps Repository.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getGitopsRepository({\n    identifier: \"identifier\",\n    accountId: \"account_id\",\n    projectId: \"project_id\",\n    orgId: \"org_id\",\n    agentId: \"agent_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_gitops_repository(identifier=\"identifier\",\n    account_id=\"account_id\",\n    project_id=\"project_id\",\n    org_id=\"org_id\",\n    agent_id=\"agent_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetGitopsRepository.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        AccountId = \"account_id\",\n        ProjectId = \"project_id\",\n        OrgId = \"org_id\",\n        AgentId = \"agent_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.GetGitopsRepository(ctx, \u0026platform.GetGitopsRepositoryArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tAccountId:  \"account_id\",\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tAgentId:    \"agent_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetGitopsRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getGitopsRepository(GetGitopsRepositoryArgs.builder()\n            .identifier(\"identifier\")\n            .accountId(\"account_id\")\n            .projectId(\"project_id\")\n            .orgId(\"org_id\")\n            .agentId(\"agent_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getGitopsRepository\n      Arguments:\n        identifier: identifier\n        accountId: account_id\n        projectId: project_id\n        orgId: org_id\n        agentId: agent_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitopsRepository.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account identifier of the GitOps repository.\n"
                    },
                    "agentId": {
                        "type": "string",
                        "description": "Agent identifier of the GitOps repository.\n"
                    },
                    "credsOnly": {
                        "type": "boolean",
                        "description": "Indicates if to operate on credential set instead of repository.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the GitOps repository.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the GitOps repository.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the GitOps repository.\n"
                    },
                    "queryForceRefresh": {
                        "type": "boolean",
                        "description": "Indicates to force refresh query for repository.\n"
                    },
                    "queryProject": {
                        "type": "string",
                        "description": "Project to query for the GitOps repo.\n"
                    },
                    "queryRepo": {
                        "type": "string",
                        "description": "GitOps repository to query.\n"
                    },
                    "updateMasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsRepositoryUpdateMask:getGitopsRepositoryUpdateMask"
                        },
                        "description": "Update mask of the repository.\n"
                    },
                    "upsert": {
                        "type": "boolean",
                        "description": "Indicates if the GitOps repository should be updated if existing and inserted if not.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "agentId",
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitopsRepository.\n",
                "properties": {
                    "accountId": {
                        "description": "Account identifier of the GitOps repository.\n",
                        "type": "string"
                    },
                    "agentId": {
                        "description": "Agent identifier of the GitOps repository.\n",
                        "type": "string"
                    },
                    "credsOnly": {
                        "description": "Indicates if to operate on credential set instead of repository.\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Identifier of the GitOps repository.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Organization identifier of the GitOps repository.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project identifier of the GitOps repository.\n",
                        "type": "string"
                    },
                    "queryForceRefresh": {
                        "description": "Indicates to force refresh query for repository.\n",
                        "type": "boolean"
                    },
                    "queryProject": {
                        "description": "Project to query for the GitOps repo.\n",
                        "type": "string"
                    },
                    "queryRepo": {
                        "description": "GitOps repository to query.\n",
                        "type": "string"
                    },
                    "repos": {
                        "description": "Repo details holding application configurations.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsRepositoryRepo:getGitopsRepositoryRepo"
                        },
                        "type": "array"
                    },
                    "updateMasks": {
                        "description": "Update mask of the repository.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getGitopsRepositoryUpdateMask:getGitopsRepositoryUpdateMask"
                        },
                        "type": "array"
                    },
                    "upsert": {
                        "description": "Indicates if the GitOps repository should be updated if existing and inserted if not.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "accountId",
                    "agentId",
                    "identifier",
                    "repos",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getHelmConnector:getHelmConnector": {
            "description": "Datasource for looking up a HTTP Helm connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getHelmConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_helm_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetHelmConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupHelmConnector(ctx, \u0026platform.LookupHelmConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetHelmConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getHelmConnector(GetHelmConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getHelmConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getHelmConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getHelmConnector.\n",
                "properties": {
                    "credentials": {
                        "description": "Credentials to use for authentication.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getHelmConnectorCredential:getHelmConnectorCredential"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "url": {
                        "description": "URL of the helm server.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getInfrastructure:getInfrastructure": {
            "description": "Data source for retrieving a Harness Infrastructure.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getInfrastructure({\n    identifier: \"identifier\",\n    name: \"name\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    envId: \"env_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_infrastructure(identifier=\"identifier\",\n    name=\"name\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    env_id=\"env_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetInfrastructure.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        Name = \"name\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        EnvId = \"env_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupInfrastructure(ctx, \u0026platform.LookupInfrastructureArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tName:       pulumi.StringRef(\"name\"),\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t\tEnvId:      \"env_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetInfrastructureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getInfrastructure(GetInfrastructureArgs.builder()\n            .identifier(\"identifier\")\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .envId(\"env_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getInfrastructure\n      Arguments:\n        identifier: identifier\n        name: name\n        orgId: org_id\n        projectId: project_id\n        envId: env_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInfrastructure.\n",
                "properties": {
                    "envId": {
                        "type": "string",
                        "description": "environment identifier.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "envId",
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInfrastructure.\n",
                "properties": {
                    "deploymentType": {
                        "description": "Infrastructure deployment type. Valid values are Kubernetes, NativeHelm, Ssh, WinRm, ServerlessAwsLambda, AzureWebApp, Custom, ECS.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "envId": {
                        "description": "environment identifier.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "Type of Infrastructure. Valid values are KubernetesDirect, KubernetesGcp, ServerlessAwsLambda, Pdc, KubernetesAzure, SshWinRmAzure, SshWinRmAws, AzureWebApp, ECS, GitOps, CustomDeployment, TAS.\n",
                        "type": "string"
                    },
                    "yaml": {
                        "description": "Infrastructure YAML\n",
                        "type": "string"
                    }
                },
                "required": [
                    "deploymentType",
                    "description",
                    "envId",
                    "identifier",
                    "tags",
                    "type",
                    "yaml",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getInputSet:getInputSet": {
            "description": "Data source for retrieving a Harness input set.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInputSet.\n",
                "properties": {
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/getInputSetGitDetails:getInputSetGitDetails",
                        "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "pipelineId": {
                        "type": "string",
                        "description": "Identifier of the pipeline\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "orgId",
                    "pipelineId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInputSet.\n",
                "properties": {
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/getInputSetGitDetails:getInputSetGitDetails",
                        "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "pipelineId": {
                        "description": "Identifier of the pipeline\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "yaml": {
                        "description": "Input Set YAML\n",
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "orgId",
                    "pipelineId",
                    "projectId",
                    "tags",
                    "yaml",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getJenkinsConnector:getJenkinsConnector": {
            "description": "Datasource for looking up a Jenkins connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getJenkinsConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_jenkins_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetJenkinsConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupJenkinsConnector(ctx, \u0026platform.LookupJenkinsConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetJenkinsConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getJenkinsConnector(GetJenkinsConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getJenkinsConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getJenkinsConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getJenkinsConnector.\n",
                "properties": {
                    "auths": {
                        "description": "This entity contains the details for Jenkins Authentication.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getJenkinsConnectorAuth:getJenkinsConnectorAuth"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "jenkinsUrl": {
                        "description": "Jenkins Url.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "auths",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "jenkinsUrl",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getJiraConnector:getJiraConnector": {
            "description": "Datasource for looking up a Jira connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getJiraConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_jira_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetJiraConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupJiraConnector(ctx, \u0026platform.LookupJiraConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetJiraConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getJiraConnector(GetJiraConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getJiraConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getJiraConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getJiraConnector.\n",
                "properties": {
                    "auths": {
                        "description": "The credentials to use for the jira authentication.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getJiraConnectorAuth:getJiraConnectorAuth"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "passwordRef": {
                        "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "url": {
                        "description": "URL of the Jira server.\n",
                        "type": "string"
                    },
                    "username": {
                        "description": "Username to use for authentication.\n",
                        "type": "string"
                    },
                    "usernameRef": {
                        "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "auths",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "passwordRef",
                    "tags",
                    "url",
                    "username",
                    "usernameRef",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getKubernetesCloudCostConnector:getKubernetesCloudCostConnector": {
            "description": "Datasource for looking up a Kubernetes Cloud Cost connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getKubernetesCloudCostConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_kubernetes_cloud_cost_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetKubernetesCloudCostConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupKubernetesCloudCostConnector(ctx, \u0026platform.LookupKubernetesCloudCostConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetKubernetesCloudCostConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getKubernetesCloudCostConnector(GetKubernetesCloudCostConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getKubernetesCloudCostConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesCloudCostConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesCloudCostConnector.\n",
                "properties": {
                    "connectorRef": {
                        "description": "Reference of the Connector.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "featuresEnableds": {
                        "description": "Indicates which feature to enable among Billing, Optimization, and Visibility.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "connectorRef",
                    "description",
                    "featuresEnableds",
                    "identifier",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getKubernetesConnector:getKubernetesConnector": {
            "description": "Datasource for looking up a Kubernetes connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getKubernetesConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_kubernetes_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetKubernetesConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupKubernetesConnector(ctx, \u0026platform.LookupKubernetesConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetKubernetesConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getKubernetesConnector(GetKubernetesConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getKubernetesConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesConnector.\n",
                "properties": {
                    "clientKeyCerts": {
                        "description": "Client key and certificate config for the connector.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getKubernetesConnectorClientKeyCert:getKubernetesConnectorClientKeyCert"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Selectors to use for the delegate.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "inheritFromDelegates": {
                        "description": "Credentials are inherited from the delegate.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getKubernetesConnectorInheritFromDelegate:getKubernetesConnectorInheritFromDelegate"
                        },
                        "type": "array"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "openidConnects": {
                        "description": "OpenID configuration for the connector.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getKubernetesConnectorOpenidConnect:getKubernetesConnectorOpenidConnect"
                        },
                        "type": "array"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "serviceAccounts": {
                        "description": "Service account for the connector.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getKubernetesConnectorServiceAccount:getKubernetesConnectorServiceAccount"
                        },
                        "type": "array"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "usernamePasswords": {
                        "description": "Username and password for the connector.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getKubernetesConnectorUsernamePassword:getKubernetesConnectorUsernamePassword"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "clientKeyCerts",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "inheritFromDelegates",
                    "openidConnects",
                    "serviceAccounts",
                    "tags",
                    "usernamePasswords",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getManualFreeze:getManualFreeze": {
            "description": "DataSource for deployment freeze in harness.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getManualFreeze({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    accountId: \"account_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_manual_freeze(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    account_id=\"account_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetManualFreeze.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        AccountId = \"account_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupManualFreeze(ctx, \u0026platform.LookupManualFreezeArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t\tAccountId:  \"account_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetManualFreezeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getManualFreeze(GetManualFreezeArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .accountId(\"account_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getManualFreeze\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n        accountId: account_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getManualFreeze.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier of the freeze\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the freeze\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the freeze\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the freeze\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getManualFreeze.\n",
                "properties": {
                    "accountId": {
                        "description": "Account Identifier of the freeze\n",
                        "type": "string"
                    },
                    "currentOrUpcomingWindows": {
                        "description": "Current or upcoming windows\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getManualFreezeCurrentOrUpcomingWindow:getManualFreezeCurrentOrUpcomingWindow"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the freeze\n",
                        "type": "string"
                    },
                    "freezeWindows": {
                        "description": "Freeze windows in the freeze response\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getManualFreezeFreezeWindow:getManualFreezeFreezeWindow"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Identifier of the freeze\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the freeze\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Organization identifier of the freeze\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project identifier of the freeze\n",
                        "type": "string"
                    },
                    "scope": {
                        "description": "Scope of the freeze\n",
                        "type": "string"
                    },
                    "status": {
                        "description": "Status of the freeze\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags associated with the freeze\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "Type of freeze\n",
                        "type": "string"
                    },
                    "yaml": {
                        "description": "Yaml of the freeze\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accountId",
                    "currentOrUpcomingWindows",
                    "description",
                    "freezeWindows",
                    "identifier",
                    "name",
                    "scope",
                    "status",
                    "tags",
                    "type",
                    "yaml",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getMonitoredService:getMonitoredService": {
            "description": "Data source for retrieving a monitored service.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetMonitoredServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getMonitoredService(GetMonitoredServiceArgs.builder()\n            .accountId(\"account_id\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getMonitoredService\n      Arguments:\n        accountId: account_id\n        orgId: org_id\n        projectId: project_id\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMonitoredService.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the monitored service.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Identifier of the organization in which the monitored service is configured.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Identifier of the project in which the monitored service is configured.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier",
                    "orgId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMonitoredService.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Identifier of the monitored service.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Identifier of the organization in which the monitored service is configured.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Identifier of the project in which the monitored service is configured.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "identifier",
                    "orgId",
                    "projectId",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getNexusConnector:getNexusConnector": {
            "description": "Datasource for looking up a Nexus connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getNexusConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_nexus_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetNexusConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupNexusConnector(ctx, \u0026platform.LookupNexusConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetNexusConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getNexusConnector(GetNexusConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getNexusConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNexusConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNexusConnector.\n",
                "properties": {
                    "credentials": {
                        "description": "Credentials to use for authentication.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getNexusConnectorCredential:getNexusConnectorCredential"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "url": {
                        "description": "URL of the Nexus server.\n",
                        "type": "string"
                    },
                    "version": {
                        "description": "Version of the Nexus server. Valid values are 2.x, 3.x\n",
                        "type": "string"
                    }
                },
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "version",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getOciHelmConnector:getOciHelmConnector": {
            "description": "Datasource for looking up a OCI Helm connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getOciHelmConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_oci_helm_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetOciHelmConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupOciHelmConnector(ctx, \u0026platform.LookupOciHelmConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetOciHelmConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getOciHelmConnector(GetOciHelmConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getOciHelmConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getOciHelmConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOciHelmConnector.\n",
                "properties": {
                    "credentials": {
                        "description": "Credentials to use for authentication.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getOciHelmConnectorCredential:getOciHelmConnectorCredential"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "url": {
                        "description": "URL of the helm server.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getOrganization:getOrganization": {
            "description": "Data source for retrieving a Harness organization\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst this = harness.platform.getOrganization({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nthis = harness.platform.get_organization(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Harness.Platform.GetOrganization.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupOrganization(ctx, \u0026platform.LookupOrganizationArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetOrganizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = PlatformFunctions.getOrganization(GetOrganizationArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: harness:platform:getOrganization\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganization.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOrganization.\n",
                "properties": {
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "description",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getPagerdutyConnector:getPagerdutyConnector": {
            "description": "Datasource for looking up a PagerDuty connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getPagerdutyConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_pagerduty_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetPagerdutyConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupPagerdutyConnector(ctx, \u0026platform.LookupPagerdutyConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetPagerdutyConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getPagerdutyConnector(GetPagerdutyConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getPagerdutyConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPagerdutyConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPagerdutyConnector.\n",
                "properties": {
                    "apiTokenRef": {
                        "description": "Reference to the Harness secret containing the api token. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n",
                        "type": "string"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "apiTokenRef",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getPermissions:getPermissions": {
            "description": "Data source for retrieving permissions.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getPermissions({\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_permissions(org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetPermissions.Invoke(new()\n    {\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.GetPermissions(ctx, \u0026platform.GetPermissionsArgs{\n\t\t\tOrgId:     pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId: pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getPermissions(GetPermissionsArgs.builder()\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getPermissions\n      Arguments:\n        orgId: org_id\n        projectId: project_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPermissions.\n",
                "properties": {
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPermissions.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Organization Identifier\n",
                        "type": "string"
                    },
                    "permissions": {
                        "description": "Response of the api\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getPermissionsPermission:getPermissionsPermission"
                        },
                        "type": "array"
                    },
                    "projectId": {
                        "description": "Project Identifier\n",
                        "type": "string"
                    }
                },
                "required": [
                    "permissions",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getPipeline:getPipeline": {
            "description": "Data source for retrieving a Harness pipeline.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getPipeline({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_pipeline(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetPipeline.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupPipeline(ctx, \u0026platform.LookupPipelineArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t\tOrgId:      \"org_id\",\n\t\t\tProjectId:  \"project_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetPipelineArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getPipeline(GetPipelineArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getPipeline\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPipeline.\n",
                "properties": {
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/getPipelineGitDetails:getPipelineGitDetails",
                        "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "orgId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPipeline.\n",
                "properties": {
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/getPipelineGitDetails:getPipelineGitDetails",
                        "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "templateApplied": {
                        "description": "If true, returns Pipeline YAML with Templates applied on it.\n",
                        "type": "boolean"
                    },
                    "templateAppliedPipelineYaml": {
                        "description": "Pipeline YAML after resolving Templates (returned as a String).\n",
                        "type": "string"
                    },
                    "yaml": {
                        "description": "YAML of the pipeline.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "orgId",
                    "projectId",
                    "tags",
                    "templateApplied",
                    "templateAppliedPipelineYaml",
                    "yaml",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getPipelineFilters:getPipelineFilters": {
            "description": "Data source for retrieving a Harness Pipeline Filter.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPipelineFilters.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of filter. Currently supported types are {PipelineSetup, PipelineExecution, Deployment, Template, EnvironmentGroup, Environment}.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier",
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPipelineFilters.\n",
                "properties": {
                    "filterProperties": {
                        "description": "Properties of the filter entity defined in Harness.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getPipelineFiltersFilterProperty:getPipelineFiltersFilterProperty"
                        },
                        "type": "array"
                    },
                    "filterVisibility": {
                        "description": "This indicates visibility of filter. By default, everyone can view this filter.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the Filter.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Organization Identifier for the Entity.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project Identifier for the Entity.\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of filter. Currently supported types are {PipelineSetup, PipelineExecution, Deployment, Template, EnvironmentGroup, Environment}.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "filterProperties",
                    "filterVisibility",
                    "identifier",
                    "name",
                    "type",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getPolicy:getPolicy": {
            "description": "Data source for retrieving a Harness policy.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getPolicy({\n    identifier: testHarnessPlatformPolicy.identifier,\n    name: testHarnessPlatformPolicy.name,\n    rego: \"package test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_policy(identifier=test_harness_platform_policy[\"identifier\"],\n    name=test_harness_platform_policy[\"name\"],\n    rego=\"package test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetPolicy.Invoke(new()\n    {\n        Identifier = testHarnessPlatformPolicy.Identifier,\n        Name = testHarnessPlatformPolicy.Name,\n        Rego = \"package test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupPolicy(ctx, \u0026platform.LookupPolicyArgs{\n\t\t\tIdentifier: pulumi.StringRef(testHarnessPlatformPolicy.Identifier),\n\t\t\tName:       pulumi.StringRef(testHarnessPlatformPolicy.Name),\n\t\t\tRego:       \"package test\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getPolicy(GetPolicyArgs.builder()\n            .identifier(testHarnessPlatformPolicy.identifier())\n            .name(testHarnessPlatformPolicy.name())\n            .rego(\"package test\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getPolicy\n      Arguments:\n        identifier: ${testHarnessPlatformPolicy.identifier}\n        name: ${testHarnessPlatformPolicy.name}\n        rego: package test\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicy.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "rego": {
                        "type": "string",
                        "description": "Rego code for the policy.\n"
                    }
                },
                "type": "object",
                "required": [
                    "rego"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPolicy.\n",
                "properties": {
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "rego": {
                        "description": "Rego code for the policy.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "description",
                    "rego",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getPolicySet:getPolicySet": {
            "description": "Data source for retrieving a Harness policyset.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getPolicySet({\n    identifier: \"harness_platform_policyset.test.identifier\",\n    name: \"harness_platform_policyset.test.name\",\n    action: \"onrun\",\n    type: \"pipeline\",\n    enabled: true,\n    policies: [{\n        identifier: \"always_run\",\n        severity: \"warning\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_policy_set(identifier=\"harness_platform_policyset.test.identifier\",\n    name=\"harness_platform_policyset.test.name\",\n    action=\"onrun\",\n    type=\"pipeline\",\n    enabled=True,\n    policies=[harness.platform.GetPolicySetPolicyArgs(\n        identifier=\"always_run\",\n        severity=\"warning\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetPolicySet.Invoke(new()\n    {\n        Identifier = \"harness_platform_policyset.test.identifier\",\n        Name = \"harness_platform_policyset.test.name\",\n        Action = \"onrun\",\n        Type = \"pipeline\",\n        Enabled = true,\n        Policies = new[]\n        {\n            new Harness.Platform.Inputs.GetPolicySetPolicyInputArgs\n            {\n                Identifier = \"always_run\",\n                Severity = \"warning\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupPolicySet(ctx, \u0026platform.LookupPolicySetArgs{\n\t\t\tIdentifier: \"harness_platform_policyset.test.identifier\",\n\t\t\tName:       pulumi.StringRef(\"harness_platform_policyset.test.name\"),\n\t\t\tAction:     \"onrun\",\n\t\t\tType:       \"pipeline\",\n\t\t\tEnabled:    pulumi.BoolRef(true),\n\t\t\tPolicies: []platform.GetPolicySetPolicy{\n\t\t\t\t{\n\t\t\t\t\tIdentifier: \"always_run\",\n\t\t\t\t\tSeverity:   \"warning\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetPolicySetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getPolicySet(GetPolicySetArgs.builder()\n            .identifier(\"harness_platform_policyset.test.identifier\")\n            .name(\"harness_platform_policyset.test.name\")\n            .action(\"onrun\")\n            .type(\"pipeline\")\n            .enabled(true)\n            .policies(GetPolicySetPolicyArgs.builder()\n                .identifier(\"always_run\")\n                .severity(\"warning\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getPolicySet\n      Arguments:\n        identifier: harness_platform_policyset.test.identifier\n        name: harness_platform_policyset.test.name\n        action: onrun\n        type: pipeline\n        enabled: true\n        policies:\n          - identifier: always_run\n            severity: warning\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicySet.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Action code for the policyset.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled for the policyset.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getPolicySetPolicy:getPolicySetPolicy"
                        },
                        "description": "List of policy identifiers / severity for the policyset.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the policyset.\n"
                    }
                },
                "type": "object",
                "required": [
                    "action",
                    "identifier",
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPolicySet.\n",
                "properties": {
                    "action": {
                        "description": "Action code for the policyset.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Enabled for the policyset.\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "policies": {
                        "description": "List of policy identifiers / severity for the policyset.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getPolicySetPolicy:getPolicySetPolicy"
                        },
                        "type": "array"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "Type of the policyset.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "action",
                    "description",
                    "identifier",
                    "tags",
                    "type",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getProject:getProject": {
            "description": "Data source for retrieving a Harness project.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst exampleById = harness.platform.getProject({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n});\nconst exampleByName = harness.platform.getProject({\n    name: \"name\",\n    orgId: \"org_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample_by_id = harness.platform.get_project(identifier=\"identifier\",\n    org_id=\"org_id\")\nexample_by_name = harness.platform.get_project(name=\"name\",\n    org_id=\"org_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleById = Harness.Platform.GetProject.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n    });\n\n    var exampleByName = Harness.Platform.GetProject.Invoke(new()\n    {\n        Name = \"name\",\n        OrgId = \"org_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupProject(ctx, \u0026platform.LookupProjectArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t\tOrgId:      \"org_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.LookupProject(ctx, \u0026platform.LookupProjectArgs{\n\t\t\tName:  pulumi.StringRef(\"name\"),\n\t\t\tOrgId: \"org_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleById = PlatformFunctions.getProject(GetProjectArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .build());\n\n        final var exampleByName = PlatformFunctions.getProject(GetProjectArgs.builder()\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleById:\n    fn::invoke:\n      Function: harness:platform:getProject\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n  exampleByName:\n    fn::invoke:\n      Function: harness:platform:getProject\n      Arguments:\n        name: name\n        orgId: org_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "color": {
                        "description": "Color of the project.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "modules": {
                        "description": "Modules in the project.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "color",
                    "description",
                    "modules",
                    "orgId",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getPrometheusConnector:getPrometheusConnector": {
            "description": "Datasource for looking up a Prometheus connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getPrometheusConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_prometheus_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetPrometheusConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupPrometheusConnector(ctx, \u0026platform.LookupPrometheusConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetPrometheusConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getPrometheusConnector(GetPrometheusConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getPrometheusConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPrometheusConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrometheusConnector.\n",
                "properties": {
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "headers": {
                        "description": "Headers.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getPrometheusConnectorHeader:getPrometheusConnectorHeader"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "passwordRef": {
                        "description": "Reference to the Harness secret containing the password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "url": {
                        "description": "URL of the Prometheus server.\n",
                        "type": "string"
                    },
                    "userName": {
                        "description": "User name.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "delegateSelectors",
                    "description",
                    "headers",
                    "identifier",
                    "passwordRef",
                    "tags",
                    "url",
                    "userName",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getResourceGroup:getResourceGroup": {
            "description": "DataSource for looking up resource group in harness.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getResourceGroup({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_resource_group(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetResourceGroup.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupResourceGroup(ctx, \u0026platform.LookupResourceGroupArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetResourceGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getResourceGroup(GetResourceGroupArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getResourceGroup\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getResourceGroup.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getResourceGroup.\n",
                "properties": {
                    "accountId": {
                        "description": "Account Identifier of the account\n",
                        "type": "string"
                    },
                    "allowedScopeLevels": {
                        "description": "The scope levels at which this resource group can be used\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "color": {
                        "description": "Color of the environment.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "includedScopes": {
                        "description": "Included scopes\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getResourceGroupIncludedScope:getResourceGroupIncludedScope"
                        },
                        "type": "array"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "resourceFilters": {
                        "description": "Contains resource filter for a resource group\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getResourceGroupResourceFilter:getResourceGroupResourceFilter"
                        },
                        "type": "array"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "accountId",
                    "allowedScopeLevels",
                    "color",
                    "description",
                    "identifier",
                    "includedScopes",
                    "resourceFilters",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getRoleAssignments:getRoleAssignments": {
            "description": "Data source for retrieving role assignment.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getRoleAssignments({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_role_assignments(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetRoleAssignments.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupRoleAssignments(ctx, \u0026platform.LookupRoleAssignmentsArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetRoleAssignmentsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getRoleAssignments(GetRoleAssignmentsArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getRoleAssignments\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRoleAssignments.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Identifier for role assignment.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Org identifier.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRoleAssignments.\n",
                "properties": {
                    "disabled": {
                        "description": "Disabled or not.\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Identifier for role assignment.\n",
                        "type": "string"
                    },
                    "managed": {
                        "description": "Managed or not.\n",
                        "type": "boolean"
                    },
                    "orgId": {
                        "description": "Org identifier.\n",
                        "type": "string"
                    },
                    "principals": {
                        "description": "Principal.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getRoleAssignmentsPrincipal:getRoleAssignmentsPrincipal"
                        },
                        "type": "array"
                    },
                    "projectId": {
                        "description": "Project Identifier\n",
                        "type": "string"
                    },
                    "resourceGroupIdentifier": {
                        "description": "Resource group identifier.\n",
                        "type": "string"
                    },
                    "roleIdentifier": {
                        "description": "Role identifier.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "disabled",
                    "identifier",
                    "managed",
                    "principals",
                    "resourceGroupIdentifier",
                    "roleIdentifier",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getRoles:getRoles": {
            "description": "Data source for retrieving roles\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getRoles({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_roles(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetRoles.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupRoles(ctx, \u0026platform.LookupRolesArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetRolesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getRoles(GetRolesArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getRoles\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRoles.\n",
                "properties": {
                    "allowedScopeLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The scope levels at which this role can be used\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the permission identifiers\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRoles.\n",
                "properties": {
                    "allowedScopeLevels": {
                        "description": "The scope levels at which this role can be used\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "permissions": {
                        "description": "List of the permission identifiers\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "allowedScopeLevels",
                    "description",
                    "identifier",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getSecretFile:getSecretFile": {
            "description": "Datasource for looking up secert file type secret.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getSecretFile({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_secret_file(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetSecretFile.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupSecretFile(ctx, \u0026platform.LookupSecretFileArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetSecretFileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getSecretFile(GetSecretFileArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getSecretFile\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecretFile.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecretFile.\n",
                "properties": {
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "filePath": {
                        "description": "Path of the file containing secret value\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "secretManagerIdentifier": {
                        "description": "Identifier of the Secret Manager used to manage the secret.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "description",
                    "filePath",
                    "identifier",
                    "secretManagerIdentifier",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getSecretSshkey:getSecretSshkey": {
            "description": "Resource for looking up an SSH Key type secret.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getSecretSshkey({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_secret_sshkey(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetSecretSshkey.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupSecretSshkey(ctx, \u0026platform.LookupSecretSshkeyArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetSecretSshkeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getSecretSshkey(GetSecretSshkeyArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getSecretSshkey\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecretSshkey.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecretSshkey.\n",
                "properties": {
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "kerberos": {
                        "description": "Kerberos authentication scheme\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getSecretSshkeyKerbero:getSecretSshkeyKerbero"
                        },
                        "type": "array"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "port": {
                        "description": "SSH port\n",
                        "type": "integer"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "sshes": {
                        "description": "Kerberos authentication scheme\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getSecretSshkeySsh:getSecretSshkeySsh"
                        },
                        "type": "array"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "description",
                    "identifier",
                    "kerberos",
                    "port",
                    "sshes",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getSecretText:getSecretText": {
            "description": "DataSource for looking up secret of type secret text.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getSecretText({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_secret_text(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetSecretText.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupSecretText(ctx, \u0026platform.LookupSecretTextArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetSecretTextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getSecretText(GetSecretTextArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getSecretText\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecretText.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecretText.\n",
                "properties": {
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "secretManagerIdentifier": {
                        "description": "Identifier of the Secret Manager used to manage the secret.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "value": {
                        "description": "Value of the Secret\n",
                        "secret": true,
                        "type": "string"
                    },
                    "valueType": {
                        "description": "This has details to specify if the secret value is Inline or Reference.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "identifier",
                    "secretManagerIdentifier",
                    "tags",
                    "value",
                    "valueType",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getService:getService": {
            "description": "Data source for retrieving a Harness service.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getService({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_service(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetService.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupService(ctx, \u0026platform.LookupServiceArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getService(GetServiceArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getService\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getService.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getService.\n",
                "properties": {
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "yaml": {
                        "description": "Input Set YAML\n",
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "identifier",
                    "tags",
                    "yaml",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getServiceAccount:getServiceAccount": {
            "description": "Data source for retrieving service account.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getServiceAccount({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_service_account(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetServiceAccount.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupServiceAccount(ctx, \u0026platform.LookupServiceAccountArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetServiceAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getServiceAccount(GetServiceAccountArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getServiceAccount\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceAccount.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServiceAccount.\n",
                "properties": {
                    "accountId": {
                        "description": "Account Identifier for the Entity.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email of the Service Account.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "accountId",
                    "description",
                    "email",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getServiceNowConnector:getServiceNowConnector": {
            "description": "Datasource for looking up a Service Now connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getServiceNowConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_service_now_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetServiceNowConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupServiceNowConnector(ctx, \u0026platform.LookupServiceNowConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetServiceNowConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getServiceNowConnector(GetServiceNowConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getServiceNowConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServiceNowConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceNowConnector.\n",
                "properties": {
                    "auths": {
                        "description": "The credentials to use for the service now authentication.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getServiceNowConnectorAuth:getServiceNowConnectorAuth"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "passwordRef": {
                        "description": "Reference to a secret containing the password to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "serviceNowUrl": {
                        "description": "URL of service now.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "username": {
                        "description": "Username to use for authentication.\n",
                        "type": "string"
                    },
                    "usernameRef": {
                        "description": "Reference to a secret containing the username to use for authentication. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "auths",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "passwordRef",
                    "serviceNowUrl",
                    "tags",
                    "username",
                    "usernameRef",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getServiceOverridesV2:getServiceOverridesV2": {
            "inputs": {
                "description": "A collection of arguments for invoking getServiceOverridesV2.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "envId": {
                        "type": "string"
                    },
                    "identifier": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "infraId": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "serviceId": {
                        "type": "string"
                    },
                    "spec": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "envId",
                    "identifier",
                    "spec",
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceOverridesV2.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "envId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "type": "string"
                    },
                    "infraId": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "serviceId": {
                        "type": "string"
                    },
                    "spec": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "required": [
                    "clusterId",
                    "envId",
                    "identifier",
                    "infraId",
                    "serviceId",
                    "spec",
                    "type",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getSlo:getSlo": {
            "description": "Data source for retrieving an SLO.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetSloArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getSlo(GetSloArgs.builder()\n            .accountId(\"account_id\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getSlo\n      Arguments:\n        accountId: account_id\n        orgId: org_id\n        projectId: project_id\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSlo.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the SLO.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Identifier of the organization in which the SLO is configured.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Identifier of the project in which the SLO is configured.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier",
                    "orgId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSlo.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Identifier of the SLO.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Identifier of the organization in which the SLO is configured.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Identifier of the project in which the SLO is configured.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "identifier",
                    "orgId",
                    "projectId",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getSplunkConnector:getSplunkConnector": {
            "description": "Datasource for looking up a Splunk connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getSplunkConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_splunk_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetSplunkConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupSplunkConnector(ctx, \u0026platform.LookupSplunkConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetSplunkConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getSplunkConnector(GetSplunkConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getSplunkConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSplunkConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSplunkConnector.\n",
                "properties": {
                    "accountId": {
                        "description": "Splunk account id.\n",
                        "type": "string"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "passwordRef": {
                        "description": "The reference to the Harness secret containing the Splunk password. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "url": {
                        "description": "URL of the Splunk server.\n",
                        "type": "string"
                    },
                    "username": {
                        "description": "The username used for connecting to Splunk.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accountId",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "passwordRef",
                    "tags",
                    "url",
                    "username",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getSpotConnector:getSpotConnector": {
            "description": "Datasource for looking up an Spot connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getSpotConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_spot_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetSpotConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupSpotConnector(ctx, \u0026platform.LookupSpotConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetSpotConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getSpotConnector(GetSpotConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getSpotConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSpotConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSpotConnector.\n",
                "properties": {
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "permanentTokens": {
                        "description": "Authenticate to Spot using account id and permanent token.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getSpotConnectorPermanentToken:getSpotConnectorPermanentToken"
                        },
                        "type": "array"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "description",
                    "identifier",
                    "permanentTokens",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getSumologicConnector:getSumologicConnector": {
            "description": "Datasource for looking up a Sumologic connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getSumologicConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_sumologic_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetSumologicConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupSumologicConnector(ctx, \u0026platform.LookupSumologicConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetSumologicConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getSumologicConnector(GetSumologicConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getSumologicConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSumologicConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSumologicConnector.\n",
                "properties": {
                    "accessIdRef": {
                        "description": "Reference to the Harness secret containing the access id. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n",
                        "type": "string"
                    },
                    "accessKeyRef": {
                        "description": "Reference to the Harness secret containing the access key. To reference a secret at the organization scope, prefix 'org' to the expression: org.{identifier}. To reference a secret at the account scope, prefix 'account` to the expression: account.{identifier}.\n",
                        "type": "string"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "url": {
                        "description": "URL of the SumoLogic server.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accessIdRef",
                    "accessKeyRef",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getTasConnector:getTasConnector": {
            "description": "Datasource for looking up an Tas Connector.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getTasConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_tas_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetTasConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupTasConnector(ctx, \u0026platform.LookupTasConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetTasConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getTasConnector(GetTasConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getTasConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTasConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTasConnector.\n",
                "properties": {
                    "credentials": {
                        "description": "Contains Tas connector credentials.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getTasConnectorCredential:getTasConnectorCredential"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "executeOnDelegate": {
                        "description": "Execute on delegate or not.\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "executeOnDelegate",
                    "identifier",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getTemplate:getTemplate": {
            "description": "Data source for retrieving a Harness pipeline.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\n//For account level template\nconst example = harness.platform.getTemplate({\n    identifier: \"identifier\",\n    version: \"version\",\n});\n//For org level template\nconst example1 = harness.platform.getTemplate({\n    identifier: \"identifier\",\n    version: \"version\",\n    orgId: \"org_id\",\n});\n//For project level template\nconst example2 = harness.platform.getTemplate({\n    identifier: \"identifier\",\n    version: \"version\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\n#For account level template\nexample = harness.platform.get_template(identifier=\"identifier\",\n    version=\"version\")\n#For org level template\nexample1 = harness.platform.get_template(identifier=\"identifier\",\n    version=\"version\",\n    org_id=\"org_id\")\n#For project level template\nexample2 = harness.platform.get_template(identifier=\"identifier\",\n    version=\"version\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    //For account level template\n    var example = Harness.Platform.GetTemplate.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        Version = \"version\",\n    });\n\n    //For org level template\n    var example1 = Harness.Platform.GetTemplate.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        Version = \"version\",\n        OrgId = \"org_id\",\n    });\n\n    //For project level template\n    var example2 = Harness.Platform.GetTemplate.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        Version = \"version\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// For account level template\n\t\t_, err := platform.LookupTemplate(ctx, \u0026platform.LookupTemplateArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t\tVersion:    pulumi.StringRef(\"version\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// For org level template\n\t\t_, err = platform.LookupTemplate(ctx, \u0026platform.LookupTemplateArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t\tVersion:    pulumi.StringRef(\"version\"),\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// For project level template\n\t\t_, err = platform.LookupTemplate(ctx, \u0026platform.LookupTemplateArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t\tVersion:    pulumi.StringRef(\"version\"),\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        //For account level template\n        final var example = PlatformFunctions.getTemplate(GetTemplateArgs.builder()\n            .identifier(\"identifier\")\n            .version(\"version\")\n            .build());\n\n        //For org level template\n        final var example1 = PlatformFunctions.getTemplate(GetTemplateArgs.builder()\n            .identifier(\"identifier\")\n            .version(\"version\")\n            .orgId(\"org_id\")\n            .build());\n\n        //For project level template\n        final var example2 = PlatformFunctions.getTemplate(GetTemplateArgs.builder()\n            .identifier(\"identifier\")\n            .version(\"version\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  #For account level template\n  example:\n    fn::invoke:\n      Function: harness:platform:getTemplate\n      Arguments:\n        identifier: identifier\n        version: version\n  #For org level template\n  example1:\n    fn::invoke:\n      Function: harness:platform:getTemplate\n      Arguments:\n        identifier: identifier\n        version: version\n        orgId: org_id\n  #For project level template\n  example2:\n    fn::invoke:\n      Function: harness:platform:getTemplate\n      Arguments:\n        identifier: identifier\n        version: version\n        orgId: org_id\n        projectId: project_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTemplate.\n",
                "properties": {
                    "branchName": {
                        "type": "string",
                        "description": "Version Label for Template.\n"
                    },
                    "childType": {
                        "type": "string",
                        "description": "Defines child template type.\n"
                    },
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/getTemplateGitDetails:getTemplateGitDetails",
                        "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "isStable": {
                        "type": "boolean",
                        "description": "True if given version for template to be set as stable.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "Scope of template.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version Label for Template.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTemplate.\n",
                "properties": {
                    "branchName": {
                        "description": "Version Label for Template.\n",
                        "type": "string"
                    },
                    "childType": {
                        "description": "Defines child template type.\n",
                        "type": "string"
                    },
                    "connectorRef": {
                        "description": "Identifier of the Harness Connector used for CRUD operations on the Entity.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "gitDetails": {
                        "$ref": "#/types/harness:platform/getTemplateGitDetails:getTemplateGitDetails",
                        "description": "Contains parameters related to creating an Entity for Git Experience.\n"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "isStable": {
                        "description": "True if given version for template to be set as stable.\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "scope": {
                        "description": "Scope of template.\n",
                        "type": "string"
                    },
                    "storeType": {
                        "description": "Specifies whether the Entity is to be stored in Git or not. Possible values: INLINE, REMOTE.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "templateYaml": {
                        "description": "Yaml for creating new Template.\n",
                        "type": "string"
                    },
                    "version": {
                        "description": "Version Label for Template.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "connectorRef",
                    "description",
                    "storeType",
                    "tags",
                    "templateYaml",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getTemplateFilters:getTemplateFilters": {
            "description": "Data source for retrieving a Harness Template Filter.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getTemplateFilters({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    type: \"Template\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_template_filters(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    type=\"Template\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetTemplateFilters.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Type = \"Template\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupTemplateFilters(ctx, \u0026platform.LookupTemplateFiltersArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t\tType:       \"Template\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetTemplateFiltersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getTemplateFilters(GetTemplateFiltersArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .type(\"Template\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getTemplateFilters\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n        type: Template\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTemplateFilters.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of filter. Currently supported types are {TemplateSetup, TemplateExecution, Deployment, Template, EnvironmentGroup, Environment}.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier",
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTemplateFilters.\n",
                "properties": {
                    "filterProperties": {
                        "description": "Properties of the filter entity defined in Harness.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getTemplateFiltersFilterProperty:getTemplateFiltersFilterProperty"
                        },
                        "type": "array"
                    },
                    "filterVisibility": {
                        "description": "This indicates visibility of filter. By default, everyone can view this filter.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the Filter.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Organization Identifier for the Entity.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project Identifier for the Entity.\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of filter. Currently supported types are {TemplateSetup, TemplateExecution, Deployment, Template, EnvironmentGroup, Environment}.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "filterProperties",
                    "filterVisibility",
                    "identifier",
                    "name",
                    "type",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getTerraformCloudConnector:getTerraformCloudConnector": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getTerraformCloudConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_terraform_cloud_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetTerraformCloudConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupTerraformCloudConnector(ctx, \u0026platform.LookupTerraformCloudConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetTerraformCloudConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getTerraformCloudConnector(GetTerraformCloudConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getTerraformCloudConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTerraformCloudConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTerraformCloudConnector.\n",
                "properties": {
                    "credentials": {
                        "items": {
                            "$ref": "#/types/harness:platform/getTerraformCloudConnectorCredential:getTerraformCloudConnectorCredential"
                        },
                        "type": "array"
                    },
                    "delegateSelectors": {
                        "description": "Tags to filter delegates for connection.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "required": [
                    "credentials",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "tags",
                    "url",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getToken:getToken": {
            "description": "Data source for retrieving a Harness ApiKey Token.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst test = harness.platform.getToken({\n    identifier: \"test_token\",\n    parentId: \"apikey_parent_id\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    apikeyId: \"apikey_id\",\n    apikeyType: \"USER\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\ntest = harness.platform.get_token(identifier=\"test_token\",\n    parent_id=\"apikey_parent_id\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    apikey_id=\"apikey_id\",\n    apikey_type=\"USER\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Harness.Platform.GetToken.Invoke(new()\n    {\n        Identifier = \"test_token\",\n        ParentId = \"apikey_parent_id\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        ApikeyId = \"apikey_id\",\n        ApikeyType = \"USER\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupToken(ctx, \u0026platform.LookupTokenArgs{\n\t\t\tIdentifier: \"test_token\",\n\t\t\tParentId:   \"apikey_parent_id\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t\tApikeyId:   \"apikey_id\",\n\t\t\tApikeyType: \"USER\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PlatformFunctions.getToken(GetTokenArgs.builder()\n            .identifier(\"test_token\")\n            .parentId(\"apikey_parent_id\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .apikeyId(\"apikey_id\")\n            .apikeyType(\"USER\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: harness:platform:getToken\n      Arguments:\n        identifier: test_token\n        parentId: apikey_parent_id\n        orgId: org_id\n        projectId: project_id\n        apikeyId: apikey_id\n        apikeyType: USER\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getToken.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "Account Identifier for the Entity\n"
                    },
                    "apikeyId": {
                        "type": "string",
                        "description": "Identifier of the API Key\n"
                    },
                    "apikeyType": {
                        "type": "string",
                        "description": "Type of the API Key\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Token\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email Id of the user who created the Token\n"
                    },
                    "encodedPassword": {
                        "type": "string",
                        "description": "Encoded password of the Token\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the Token\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Token\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity\n"
                    },
                    "parentId": {
                        "type": "string",
                        "description": "Parent Entity Identifier of the API Key\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity\n"
                    },
                    "scheduledExpireTime": {
                        "type": "integer",
                        "description": "Scheduled expiry time in milliseconds\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Tags for the Token\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Name of the user who created the Token\n"
                    },
                    "valid": {
                        "type": "boolean",
                        "description": "Boolean value to indicate if Token is valid or not.\n"
                    },
                    "validFrom": {
                        "type": "integer",
                        "description": "This is the time from which the Token is valid. The time is in milliseconds\n"
                    },
                    "validTo": {
                        "type": "integer",
                        "description": "This is the time till which the Token is valid. The time is in milliseconds\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "apikeyId",
                    "apikeyType",
                    "identifier",
                    "name",
                    "parentId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getToken.\n",
                "properties": {
                    "accountId": {
                        "description": "Account Identifier for the Entity\n",
                        "type": "string"
                    },
                    "apikeyId": {
                        "description": "Identifier of the API Key\n",
                        "type": "string"
                    },
                    "apikeyType": {
                        "description": "Type of the API Key\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the Token\n",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email Id of the user who created the Token\n",
                        "type": "string"
                    },
                    "encodedPassword": {
                        "description": "Encoded password of the Token\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Identifier of the Token\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the Token\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Organization Identifier for the Entity\n",
                        "type": "string"
                    },
                    "parentId": {
                        "description": "Parent Entity Identifier of the API Key\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project Identifier for the Entity\n",
                        "type": "string"
                    },
                    "scheduledExpireTime": {
                        "description": "Scheduled expiry time in milliseconds\n",
                        "type": "integer"
                    },
                    "tags": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Tags for the Token\n",
                        "type": "object"
                    },
                    "username": {
                        "description": "Name of the user who created the Token\n",
                        "type": "string"
                    },
                    "valid": {
                        "description": "Boolean value to indicate if Token is valid or not.\n",
                        "type": "boolean"
                    },
                    "validFrom": {
                        "description": "This is the time from which the Token is valid. The time is in milliseconds\n",
                        "type": "integer"
                    },
                    "validTo": {
                        "description": "This is the time till which the Token is valid. The time is in milliseconds\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "accountId",
                    "apikeyId",
                    "apikeyType",
                    "identifier",
                    "name",
                    "parentId",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getTriggers:getTriggers": {
            "description": "Data source for retrieving a Harness trigger.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getTriggers({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    targetId: \"pipeline_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_triggers(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\",\n    target_id=\"pipeline_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetTriggers.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        TargetId = \"pipeline_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupTriggers(ctx, \u0026platform.LookupTriggersArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t\tOrgId:      \"org_id\",\n\t\t\tProjectId:  \"project_id\",\n\t\t\tTargetId:   \"pipeline_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetTriggersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getTriggers(GetTriggersArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .targetId(\"pipeline_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getTriggers\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n        targetId: pipeline_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTriggers.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "ignoreError": {
                        "type": "boolean",
                        "description": "ignore error default false\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    },
                    "targetId": {
                        "type": "string",
                        "description": "Identifier of the target pipeline\n"
                    }
                },
                "type": "object",
                "required": [
                    "orgId",
                    "projectId",
                    "targetId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTriggers.\n",
                "properties": {
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "ignoreError": {
                        "description": "ignore error default false\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "targetId": {
                        "description": "Identifier of the target pipeline\n",
                        "type": "string"
                    },
                    "yaml": {
                        "description": "trigger yaml\n",
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "orgId",
                    "projectId",
                    "tags",
                    "targetId",
                    "yaml",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getUser:getUser": {
            "description": "Data source for retrieving the user based on the API key.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getUser({\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n    email: \"john.doe@harness.io\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_user(org_id=\"org_id\",\n    project_id=\"project_id\",\n    email=\"john.doe@harness.io\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetUser.Invoke(new()\n    {\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n        Email = \"john.doe@harness.io\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupUser(ctx, \u0026platform.LookupUserArgs{\n\t\t\tOrgId:     pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId: pulumi.StringRef(\"project_id\"),\n\t\t\tEmail:     \"john.doe@harness.io\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getUser(GetUserArgs.builder()\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .email(\"john.doe@harness.io\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getUser\n      Arguments:\n        orgId: org_id\n        projectId: project_id\n        email: john.doe@harness.io\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization identifier of the user.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project identifier of the user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "disabled": {
                        "description": "Whether or not the user account is disabled.\n",
                        "type": "boolean"
                    },
                    "email": {
                        "description": "The email of the user.\n",
                        "type": "string"
                    },
                    "externallyManaged": {
                        "description": "Whether or not the user account is externally managed.\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the user.\n",
                        "type": "string"
                    },
                    "locked": {
                        "description": "Whether or not the user account is locked.\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Name of the user.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Organization identifier of the user.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project identifier of the user.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "disabled",
                    "email",
                    "externallyManaged",
                    "identifier",
                    "locked",
                    "name",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getUsergroup:getUsergroup": {
            "description": "Data source for retrieving a Harness User Group.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst exampleById = harness.platform.getUsergroup({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\nconst exampleByName = harness.platform.getUsergroup({\n    name: \"name\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample_by_id = harness.platform.get_usergroup(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\nexample_by_name = harness.platform.get_usergroup(name=\"name\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleById = Harness.Platform.GetUsergroup.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n    var exampleByName = Harness.Platform.GetUsergroup.Invoke(new()\n    {\n        Name = \"name\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupUsergroup(ctx, \u0026platform.LookupUsergroupArgs{\n\t\t\tIdentifier: pulumi.StringRef(\"identifier\"),\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = platform.LookupUsergroup(ctx, \u0026platform.LookupUsergroupArgs{\n\t\t\tName:      pulumi.StringRef(\"name\"),\n\t\t\tOrgId:     pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId: pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetUsergroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleById = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n        final var exampleByName = PlatformFunctions.getUsergroup(GetUsergroupArgs.builder()\n            .name(\"name\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleById:\n    fn::invoke:\n      Function: harness:platform:getUsergroup\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n  exampleByName:\n    fn::invoke:\n      Function: harness:platform:getUsergroup\n      Arguments:\n        name: name\n        orgId: org_id\n        projectId: project_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUsergroup.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "notificationConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/harness:platform/getUsergroupNotificationConfig:getUsergroupNotificationConfig"
                        },
                        "description": "List of notification settings.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsergroup.\n",
                "properties": {
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "externallyManaged": {
                        "description": "Whether the user group is externally managed.\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "linkedSsoDisplayName": {
                        "description": "Name of the linked SSO.\n",
                        "type": "string"
                    },
                    "linkedSsoId": {
                        "description": "The SSO account ID that the user group is linked to.\n",
                        "type": "string"
                    },
                    "linkedSsoType": {
                        "description": "Type of linked SSO.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "notificationConfigs": {
                        "description": "List of notification settings.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getUsergroupNotificationConfig:getUsergroupNotificationConfig"
                        },
                        "type": "array"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "ssoGroupId": {
                        "description": "Identifier of the userGroup in SSO.\n",
                        "type": "string"
                    },
                    "ssoGroupName": {
                        "description": "Name of the SSO userGroup.\n",
                        "type": "string"
                    },
                    "ssoLinked": {
                        "description": "Whether sso is linked or not.\n",
                        "type": "boolean"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "users": {
                        "description": "List of users in the UserGroup.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "description",
                    "externallyManaged",
                    "linkedSsoDisplayName",
                    "linkedSsoId",
                    "linkedSsoType",
                    "ssoGroupId",
                    "ssoGroupName",
                    "ssoLinked",
                    "tags",
                    "users",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getVariables:getVariables": {
            "description": "Data source for retrieving a Harness Variable.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getVariables({\n    identifier: \"identifier\",\n    orgId: \"org_id\",\n    projectId: \"project_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_variables(identifier=\"identifier\",\n    org_id=\"org_id\",\n    project_id=\"project_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetVariables.Invoke(new()\n    {\n        Identifier = \"identifier\",\n        OrgId = \"org_id\",\n        ProjectId = \"project_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupVariables(ctx, \u0026platform.LookupVariablesArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t\tOrgId:      pulumi.StringRef(\"org_id\"),\n\t\t\tProjectId:  pulumi.StringRef(\"project_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetVariablesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getVariables(GetVariablesArgs.builder()\n            .identifier(\"identifier\")\n            .orgId(\"org_id\")\n            .projectId(\"project_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getVariables\n      Arguments:\n        identifier: identifier\n        orgId: org_id\n        projectId: project_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVariables.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Organization Identifier for the Entity\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Project Identifier for the Entity\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVariables.\n",
                "properties": {
                    "description": {
                        "description": "Description of the entity\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the Variable\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Organization Identifier for the Entity\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Project Identifier for the Entity\n",
                        "type": "string"
                    },
                    "specs": {
                        "description": "List of Spce Fields.\n",
                        "items": {
                            "$ref": "#/types/harness:platform/getVariablesSpec:getVariablesSpec"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "Type of Variable\n",
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "identifier",
                    "name",
                    "specs",
                    "type",
                    "id"
                ],
                "type": "object"
            }
        },
        "harness:platform/getVaultConnector:getVaultConnector": {
            "description": "DataSource for looking up a Vault connector in Harness.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as harness from \"@pulumi/harness\";\n\nconst example = harness.platform.getVaultConnector({\n    identifier: \"identifier\",\n});\n```\n```python\nimport pulumi\nimport pulumi_harness as harness\n\nexample = harness.platform.get_vault_connector(identifier=\"identifier\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Harness = Pulumi.Harness;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Harness.Platform.GetVaultConnector.Invoke(new()\n    {\n        Identifier = \"identifier\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-harness/sdk/go/harness/platform\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := platform.LookupVaultConnector(ctx, \u0026platform.LookupVaultConnectorArgs{\n\t\t\tIdentifier: \"identifier\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.harness.platform.PlatformFunctions;\nimport com.pulumi.harness.platform.inputs.GetVaultConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = PlatformFunctions.getVaultConnector(GetVaultConnectorArgs.builder()\n            .identifier(\"identifier\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: harness:platform:getVaultConnector\n      Arguments:\n        identifier: identifier\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVaultConnector.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "Unique identifier of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Unique identifier of the organization.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier of the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "identifier"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVaultConnector.\n",
                "properties": {
                    "accessType": {
                        "description": "Access type.\n",
                        "type": "string"
                    },
                    "appRoleId": {
                        "description": "ID of App Role.\n",
                        "type": "string"
                    },
                    "authToken": {
                        "description": "The authentication token for Vault.\n",
                        "type": "string"
                    },
                    "awsRegion": {
                        "description": "The AWS region where AWS IAM auth will happen.\n",
                        "type": "string"
                    },
                    "basePath": {
                        "description": "The location of the Vault directory where Secret will be stored.\n",
                        "type": "string"
                    },
                    "default": {
                        "description": "Is default or not.\n",
                        "type": "boolean"
                    },
                    "delegateSelectors": {
                        "description": "List of Delegate Selectors that belong to the same Delegate and are used to connect to the Secret Manager.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the resource.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "identifier": {
                        "description": "Unique identifier of the resource.\n",
                        "type": "string"
                    },
                    "isDefault": {
                        "description": "Is default or not.\n",
                        "type": "boolean"
                    },
                    "isReadOnly": {
                        "description": "Read only or not.\n",
                        "type": "boolean"
                    },
                    "k8sAuthEndpoint": {
                        "description": "The path where kubernetes auth is enabled in Vault.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the resource.\n",
                        "type": "string"
                    },
                    "namespace": {
                        "description": "The Vault namespace where Secret will be created.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "description": "Unique identifier of the organization.\n",
                        "type": "string"
                    },
                    "projectId": {
                        "description": "Unique identifier of the project.\n",
                        "type": "string"
                    },
                    "readOnly": {
                        "description": "Read only.\n",
                        "type": "boolean"
                    },
                    "renewAppRoleToken": {
                        "description": "Boolean value to indicate if appRole token renewal is enabled or not.\n",
                        "type": "boolean"
                    },
                    "renewalIntervalMinutes": {
                        "description": "The time interval for token renewal.\n",
                        "type": "integer"
                    },
                    "secretEngineManuallyConfigured": {
                        "description": "Manually entered Secret Engine.\n",
                        "type": "boolean"
                    },
                    "secretEngineName": {
                        "description": "Name of the Secret Engine.\n",
                        "type": "string"
                    },
                    "secretEngineVersion": {
                        "description": "Version of Secret Engine.\n",
                        "type": "integer"
                    },
                    "secretId": {
                        "description": "ID of the Secret.\n",
                        "type": "string"
                    },
                    "serviceAccountTokenPath": {
                        "description": "The SA token path where the token is mounted in the K8s Pod.\n",
                        "type": "string"
                    },
                    "sinkPath": {
                        "description": "The location at which auth token is to be read from.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "Tags to associate with the resource.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "useAwsIam": {
                        "description": "Boolean value to indicate if AWS IAM is used for authentication.\n",
                        "type": "boolean"
                    },
                    "useK8sAuth": {
                        "description": "Boolean value to indicate if K8s Auth is used for authentication.\n",
                        "type": "boolean"
                    },
                    "useVaultAgent": {
                        "description": "Boolean value to indicate if Vault Agent is used for authentication.\n",
                        "type": "boolean"
                    },
                    "vaultAwsIamRole": {
                        "description": "The Vault role defined to bind to AWS IAM account/role being accessed.\n",
                        "type": "string"
                    },
                    "vaultK8sAuthRole": {
                        "description": "The role where K8s auth will happen.\n",
                        "type": "string"
                    },
                    "vaultUrl": {
                        "description": "URL of the HashiCorp Vault.\n",
                        "type": "string"
                    },
                    "xvaultAwsIamServerId": {
                        "description": "The AWS IAM Header Server ID that has been configured for this AWS IAM instance.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "accessType",
                    "appRoleId",
                    "authToken",
                    "awsRegion",
                    "basePath",
                    "default",
                    "delegateSelectors",
                    "description",
                    "identifier",
                    "isDefault",
                    "isReadOnly",
                    "k8sAuthEndpoint",
                    "namespace",
                    "readOnly",
                    "renewAppRoleToken",
                    "renewalIntervalMinutes",
                    "secretEngineManuallyConfigured",
                    "secretEngineName",
                    "secretEngineVersion",
                    "secretId",
                    "serviceAccountTokenPath",
                    "sinkPath",
                    "tags",
                    "useAwsIam",
                    "useK8sAuth",
                    "useVaultAgent",
                    "vaultAwsIamRole",
                    "vaultK8sAuthRole",
                    "vaultUrl",
                    "xvaultAwsIamServerId",
                    "id"
                ],
                "type": "object"
            }
        }
    }
}